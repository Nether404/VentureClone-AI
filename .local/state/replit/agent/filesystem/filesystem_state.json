{"file_contents":{"DOCUMENTATION.md":{"content":"# VentureClone AI - Complete Documentation\n\n## Table of Contents\n1. [Overview](#overview)\n2. [Getting Started](#getting-started)\n3. [Features](#features)\n4. [Architecture](#architecture)\n5. [API Reference](#api-reference)\n6. [Workflow Stages](#workflow-stages)\n7. [AI Integration](#ai-integration)\n8. [Analytics & Insights](#analytics--insights)\n9. [Troubleshooting](#troubleshooting)\n10. [Best Practices](#best-practices)\n\n## Overview\n\nVentureClone AI is a comprehensive venture analyst and product operator application that guides entrepreneurs through a systematic 6-stage process to identify, validate, and scale cloneable web applications using lean startup methodology.\n\n### Key Capabilities\n- **AI-Powered Analysis**: Analyze any website URL to assess clonability potential\n- **Multi-Provider Support**: BYOK (Bring Your Own Key) for OpenAI, Gemini 2.5 Pro, and Grok 4\n- **6-Stage Workflow**: Systematic process from discovery to AI automation\n- **Comprehensive Scoring**: 5-dimensional scoring across technical, market, and resource factors\n- **Export & Comparison**: Export analyses and compare multiple opportunities\n- **Analytics Dashboard**: Visualize trends and patterns across your analyses\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ installed\n- PostgreSQL database (created automatically)\n- At least one AI provider API key (OpenAI, Gemini, or Grok)\n\n### Installation\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Start the application: `npm run dev`\n4. Navigate to `http://localhost:5000`\n\n### Initial Setup\n1. Click on the AI provider button in the header\n2. Add your API key(s) for your preferred provider(s)\n3. Select your active AI provider\n4. Start analyzing URLs!\n\n## Features\n\n### 1. URL Analysis\nEnter any website URL to receive:\n- Business model identification\n- Revenue stream analysis\n- Target market assessment\n- Overall clonability score (0-10)\n- Detailed scoring across 5 dimensions\n- AI-generated insights\n\n### 2. Workflow Management\n6-stage systematic process:\n- **Stage 1**: Discovery & Selection\n- **Stage 2**: Lazy-Entrepreneur Filter\n- **Stage 3**: MVP Launch Planning\n- **Stage 4**: Demand Testing Strategy\n- **Stage 5**: Scaling & Growth\n- **Stage 6**: AI Automation Mapping\n\n### 3. Business Comparison\n- Compare multiple analyzed businesses side-by-side\n- View average scores across criteria\n- Identify best candidates automatically\n- Sort by score, date, or stage progress\n\n### 4. Batch Analysis\n- Analyze up to 10 URLs simultaneously\n- Automated processing with progress tracking\n- Export results in bulk\n- Perfect for competitive analysis\n\n### 5. Export Functionality\nExport your analyses in multiple formats:\n- **HTML Report**: Comprehensive formatted report\n- **CSV**: Spreadsheet-compatible data\n- **JSON**: Complete data export for integration\n\n### 6. Search & Filtering\n- Search by URL, business model, market, or revenue stream\n- Filter by score range (0-10)\n- Filter by workflow stage (1-6)\n- Sort by multiple criteria\n- Save and apply filter presets\n\n### 7. Analytics Dashboard\n- Score distribution charts\n- Average scores by criteria\n- Workflow stage progression\n- Top businesses comparison radar chart\n- Quick insights and success metrics\n\n## Architecture\n\n### Frontend Stack\n- **React 18** with TypeScript\n- **Vite** for blazing fast development\n- **TailwindCSS** for styling\n- **Radix UI** components with shadcn/ui\n- **TanStack Query** for state management\n- **Recharts** for data visualization\n- **Wouter** for routing\n\n### Backend Stack\n- **Node.js** with Express\n- **TypeScript** throughout\n- **PostgreSQL** with Drizzle ORM\n- **RESTful API** architecture\n- **Session-based authentication**\n\n### AI Integration\n- **Multi-provider architecture**\n- **OpenAI GPT-4o** support\n- **Google Gemini 2.5 Pro** support\n- **xAI Grok 4** support\n- **Unified AI service interface**\n\n## API Reference\n\n### Authentication\n```\nPOST /api/auth/login\nPOST /api/auth/logout\nGET  /api/auth/session\n```\n\n### Business Analyses\n```\nGET    /api/business-analyses      # List all analyses\nPOST   /api/business-analyses      # Create new analysis\nGET    /api/business-analyses/:id  # Get specific analysis\nPATCH  /api/business-analyses/:id  # Update analysis\nDELETE /api/business-analyses/:id  # Delete analysis\n```\n\n### AI Providers\n```\nGET    /api/ai-providers           # List all providers\nPOST   /api/ai-providers           # Add new provider\nGET    /api/ai-providers/active    # Get active provider\nPATCH  /api/ai-providers/:id       # Update provider\nDELETE /api/ai-providers/:id       # Remove provider\n```\n\n### Workflow Stages\n```\nGET    /api/workflow-stages/:analysisId  # Get stages for analysis\nPOST   /api/workflow-stages              # Create/update stage\nPATCH  /api/workflow-stages/:id          # Update stage progress\n```\n\n### Analytics\n```\nGET /api/stats                      # Get overall statistics\nGET /api/analytics/trends           # Get trend data\nGET /api/analytics/comparison       # Get comparison data\n```\n\n## Workflow Stages\n\n### Stage 1: Discovery & Selection\n**Purpose**: Identify and validate business opportunities\n**Key Activities**:\n- Market research and validation\n- Competitor analysis\n- Initial feasibility assessment\n**Output**: Validated business opportunity with initial score\n\n### Stage 2: Lazy-Entrepreneur Filter\n**Purpose**: Assess effort vs. reward ratio\n**Key Activities**:\n- Resource requirement analysis\n- Skill gap assessment\n- Automation potential evaluation\n**Output**: Go/No-go decision based on effort analysis\n\n### Stage 3: MVP Launch Planning\n**Purpose**: Define minimum viable product\n**Key Activities**:\n- Core feature identification\n- Tech stack selection\n- Development timeline creation\n**Output**: MVP specification and launch plan\n\n### Stage 4: Demand Testing Strategy\n**Purpose**: Validate market demand\n**Key Activities**:\n- Landing page creation\n- Ad campaign setup\n- Conversion tracking\n**Output**: Validated demand metrics\n\n### Stage 5: Scaling & Growth\n**Purpose**: Plan for growth\n**Key Activities**:\n- Growth strategy development\n- Resource planning\n- Partnership opportunities\n**Output**: Comprehensive growth plan\n\n### Stage 6: AI Automation Mapping\n**Purpose**: Identify automation opportunities\n**Key Activities**:\n- Process automation mapping\n- AI integration points\n- Efficiency optimization\n**Output**: Automation roadmap\n\n## AI Integration\n\n### Supported Providers\n\n#### OpenAI\n- Model: GPT-4o (latest)\n- Best for: General analysis, creative insights\n- Setup: Add OPENAI_API_KEY in settings\n\n#### Google Gemini\n- Model: Gemini 2.5 Pro\n- Best for: Technical analysis, structured data\n- Setup: Add GEMINI_API_KEY in settings\n\n#### xAI Grok\n- Model: Grok 4\n- Best for: Real-time data, current trends\n- Setup: Add XAI_API_KEY in settings\n\n### Switching Providers\n1. Navigate to AI Settings (robot icon in header)\n2. Select desired provider from dropdown\n3. Ensure API key is configured\n4. Click \"Set Active\" to switch\n\n### API Key Management\n- Keys are stored securely in environment variables\n- Never exposed in frontend code\n- Can configure multiple providers simultaneously\n- Switch between providers without re-entering keys\n\n## Analytics & Insights\n\n### Key Metrics\n- **Overall Score**: Weighted average of all criteria (0-10)\n- **Technical Complexity**: Development difficulty assessment\n- **Market Opportunity**: Market size and growth potential\n- **Competitive Landscape**: Competition analysis\n- **Resource Requirements**: Capital and skill needs\n- **Time to Market**: Speed of implementation\n\n### Visualization Types\n- **Bar Charts**: Score distribution\n- **Line Charts**: Trend analysis\n- **Pie Charts**: Stage distribution\n- **Radar Charts**: Multi-dimensional comparison\n\n### Insights Generation\nAI-powered insights include:\n- Key business model insights\n- Primary risk factors\n- Growth opportunities\n- Competitive advantages\n- Implementation recommendations\n\n## Troubleshooting\n\n### Common Issues\n\n#### \"No AI Provider Configured\"\n**Solution**: Add at least one API key in settings\n\n#### \"Analysis Failed\"\n**Possible Causes**:\n- Invalid URL format\n- API rate limiting\n- Network connectivity issues\n**Solution**: Verify URL, check API limits, retry\n\n#### \"Export Not Working\"\n**Solution**: Check browser popup settings, allow downloads\n\n#### \"Charts Not Loading\"\n**Solution**: Refresh page, clear browser cache\n\n### Performance Optimization\n- Limit batch analysis to 10 URLs\n- Use filtering to reduce data load\n- Export large datasets in JSON format\n- Clear old analyses periodically\n\n## Best Practices\n\n### For Analysis\n1. Use complete URLs (include https://)\n2. Analyze direct competitors together\n3. Complete all workflow stages systematically\n4. Export important analyses for backup\n\n### For Comparison\n1. Compare similar business models\n2. Use consistent scoring criteria\n3. Consider market conditions\n4. Factor in your expertise\n\n### For Scaling\n1. Start with highest-scored opportunities\n2. Validate demand before heavy investment\n3. Automate repetitive processes early\n4. Monitor metrics continuously\n\n### For AI Usage\n1. Rotate between providers for diverse insights\n2. Keep API keys secure\n3. Monitor usage to avoid limits\n4. Use appropriate provider for task type\n\n## Support & Resources\n\n### Getting Help\n- Check this documentation first\n- Review error messages carefully\n- Test with different browsers\n- Verify API key configuration\n\n### Updates & Improvements\nThe platform is continuously improved with:\n- New AI provider integrations\n- Enhanced scoring algorithms\n- Additional export formats\n- Improved visualization options\n\n### Community\nShare your success stories and get help from other entrepreneurs using VentureClone AI to build their ventures.\n\n---\n\n## Quick Reference\n\n### Keyboard Shortcuts\n- `Ctrl/Cmd + K`: Quick search\n- `Ctrl/Cmd + E`: Export current analysis\n- `Ctrl/Cmd + N`: New analysis\n- `Ctrl/Cmd + A`: Analytics dashboard\n\n### Score Interpretation\n- **9-10**: Excellent opportunity, proceed immediately\n- **7-8**: Strong candidate, minor challenges\n- **5-6**: Moderate opportunity, significant work needed\n- **3-4**: Challenging, requires major resources\n- **0-2**: Not recommended, too difficult/competitive\n\n### Stage Timeline\n- **Stage 1-2**: 1-2 weeks\n- **Stage 3**: 2-4 weeks\n- **Stage 4**: 2-3 weeks\n- **Stage 5**: Ongoing\n- **Stage 6**: 1-2 weeks\n\n---\n\n*Last Updated: August 2025*\n*Version: 1.0.0*","size_bytes":10388},"README.md":{"content":"Overview\nVentureClone AI is a systematic business cloning platform that analyzes existing online businesses for clonability potential. The application helps entrepreneurs identify promising businesses to replicate by providing AI-powered analysis across multiple dimensions including technical complexity, market opportunity, competitive landscape, resource requirements, and time to market. Users can input URLs for analysis, receive detailed scoring and insights, and follow a structured 6-stage workflow from discovery through AI automation implementation.\n\nUser Preferences\nPreferred communication style: Simple, everyday language.\n\nSystem Architecture\nFrontend Architecture\nFramework: React with TypeScript using Vite as the build tool and development server. The client follows a component-based architecture with:\n\nUI Components: Radix UI primitives with shadcn/ui styling for consistent design system\nStyling: Tailwind CSS with custom CSS variables for theming, supporting dark mode by default\nState Management: TanStack Query (React Query) for server state management and caching\nRouting: Wouter for lightweight client-side routing\nForms: React Hook Form with Zod validation for type-safe form handling\nThe frontend is structured with clear separation between pages, components, and utility functions, with path aliases for clean imports.\n\nBackend Architecture\nFramework: Express.js with TypeScript running on Node.js\n\nAPI Design: RESTful API endpoints with consistent error handling and request/response patterns\nMiddleware: Custom logging middleware for API request tracking and performance monitoring\nRoute Organization: Modular route registration system with dedicated route handlers\nError Handling: Centralized error handling with proper HTTP status codes and JSON responses\nData Storage Solutions\nDatabase: PostgreSQL with Drizzle ORM for type-safe database operations\n\nSchema Management: Drizzle Kit for database migrations and schema management\nConnection: Neon Database serverless PostgreSQL for cloud hosting\nStorage Interface: Abstract storage interface with in-memory implementation for development and testing\nData Models: Users, AI Providers, Business Analyses, and Workflow Stages with proper relationships\nAuthentication and Authorization\nSession Management: PostgreSQL-backed sessions using connect-pg-simple for server-side session storage\n\nUser Model: Simple username/password authentication system\nAuthorization: User-scoped data access with consistent user ID validation\nSession Storage: Persistent sessions stored in database for reliability across server restarts\nExternal Service Integrations\nAI Provider Integration: Multi-provider AI service architecture supporting:\n\nOpenAI: GPT models for business analysis and content generation\nGoogle Gemini: Alternative AI provider for diverse analysis perspectives\nGrok (X.AI): Additional AI provider option for comprehensive coverage\nProvider Management: User-configurable API keys with active provider selection\nAbstraction Layer: Unified AI service interface for consistent usage across providers\nBusiness Analysis Services:\n\nURL Analysis: AI-powered website analysis for business model identification\nScoring System: Multi-dimensional scoring across 5 key criteria\nContent Generation: AI-generated insights, risks, and opportunities\nWorkflow Automation: Stage-based content generation for systematic business cloning\nDevelopment and Build Tools\nDevelopment Environment:\n\nVite: Fast development server with HMR and optimized builds\nTypeScript: Strict type checking across frontend, backend, and shared code\nESM: Modern ES modules throughout the application\nPath Resolution: Unified import aliases for clean code organization\nProduction Build:\n\nFrontend: Vite production build with optimized assets\nBackend: esbuild bundling for Node.js deployment\nStatic Serving: Express serves built frontend assets in production\nEnvironment Configuration: Environment-based configuration for database and AI services\n","size_bytes":3980},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nVentureClone AI is a systematic business cloning platform that analyzes existing online businesses for clonability potential. The application helps entrepreneurs identify promising businesses to replicate by providing AI-powered analysis across multiple dimensions including technical complexity, market opportunity, competitive landscape, resource requirements, and time to market. Users can input URLs for analysis, receive detailed scoring and insights, and follow a structured 6-stage workflow from discovery through AI automation implementation.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool and development server. The client follows a component-based architecture with:\n\n- **UI Components**: Radix UI primitives with shadcn/ui styling for consistent design system\n- **Styling**: Tailwind CSS with custom CSS variables for theming, supporting dark mode by default\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\nThe frontend is structured with clear separation between pages, components, and utility functions, with path aliases for clean imports.\n\n## Backend Architecture\n\n**Framework**: Express.js with TypeScript running on Node.js\n\n- **API Design**: RESTful API endpoints with consistent error handling and request/response patterns\n- **Middleware**: Custom logging middleware for API request tracking and performance monitoring\n- **Route Organization**: Modular route registration system with dedicated route handlers\n- **Error Handling**: Centralized error handling with proper HTTP status codes and JSON responses\n\n## Data Storage Solutions\n\n**Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n\n- **Schema Management**: Drizzle Kit for database migrations and schema management\n- **Connection**: Neon Database serverless PostgreSQL for cloud hosting\n- **Storage Interface**: Abstract storage interface with in-memory implementation for development and testing\n- **Data Models**: Users, AI Providers, Business Analyses, and Workflow Stages with proper relationships\n\n## Authentication and Authorization\n\n**Session Management**: PostgreSQL-backed sessions using connect-pg-simple for server-side session storage\n\n- **User Model**: Simple username/password authentication system\n- **Authorization**: User-scoped data access with consistent user ID validation\n- **Session Storage**: Persistent sessions stored in database for reliability across server restarts\n\n## External Service Integrations\n\n**AI Provider Integration**: Multi-provider AI service architecture supporting:\n\n- **OpenAI**: GPT models for business analysis and content generation\n- **Google Gemini**: Alternative AI provider for diverse analysis perspectives  \n- **Grok (X.AI)**: Additional AI provider option for comprehensive coverage\n- **Provider Management**: User-configurable API keys with active provider selection\n- **Abstraction Layer**: Unified AI service interface for consistent usage across providers\n\n**Business Analysis Services**:\n- **URL Analysis**: AI-powered website analysis for business model identification\n- **Scoring System**: Multi-dimensional scoring across 5 key criteria\n- **Content Generation**: AI-generated insights, risks, and opportunities\n- **Workflow Automation**: Stage-based content generation for systematic business cloning\n\n## Development and Build Tools\n\n**Development Environment**: \n- **Vite**: Fast development server with HMR and optimized builds\n- **TypeScript**: Strict type checking across frontend, backend, and shared code\n- **ESM**: Modern ES modules throughout the application\n- **Path Resolution**: Unified import aliases for clean code organization\n\n**Production Build**:\n- **Frontend**: Vite production build with optimized assets\n- **Backend**: esbuild bundling for Node.js deployment\n- **Static Serving**: Express serves built frontend assets in production\n- **Environment Configuration**: Environment-based configuration for database and AI services","size_bytes":4249},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        'vc-primary': 'var(--vc-primary)',\n        'vc-secondary': 'var(--vc-secondary)',\n        'vc-accent': 'var(--vc-accent)',\n        'vc-dark': 'var(--vc-dark)',\n        'vc-card': 'var(--vc-card)',\n        'vc-border': 'var(--vc-border)',\n        'vc-text': 'var(--vc-text)',\n        'vc-text-muted': 'var(--vc-text-muted)',\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n        'mono': ['Roboto Mono', 'monospace']\n      },\n      boxShadow: {\n        'neon': '0 0 20px rgba(255, 69, 0, 0.3)',\n        'neon-gold': '0 0 20px rgba(255, 215, 0, 0.3)'\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3316},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/migrate.ts":{"content":"\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { migrate } from 'drizzle-orm/neon-serverless/migrator';\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL || 'postgresql://user:password@localhost:5432/venturesclone'\n});\n\nconst db = drizzle({ client: pool });\n\nasync function main() {\n  console.log('Running migrations...');\n  await migrate(db, { migrationsFolder: 'drizzle' });\n  console.log('Migrations complete!');\n  process.exit(0);\n}\n\nmain().catch((err) => {\n  console.error('Migration failed!', err);\n  process.exit(1);\n});\n","size_bytes":685},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertAiProviderSchema, insertBusinessAnalysisSchema } from \"@shared/schema\";\nimport { AIProviderService } from \"./services/ai-providers\";\nimport { BusinessAnalyzerService } from \"./services/business-analyzer\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // AI Provider routes\n  app.get(\"/api/ai-providers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const providers = await storage.getAiProviders(userId);\n      res.json(providers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI providers\" });\n    }\n  });\n\n  app.get(\"/api/ai-providers/active\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const provider = await storage.getActiveAiProvider(userId);\n      res.json(provider);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch active AI provider\" });\n    }\n  });\n\n  app.post(\"/api/ai-providers\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertAiProviderSchema.parse({ ...req.body, userId });\n      const provider = await storage.createAiProvider(validatedData);\n      res.json(provider);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid AI provider data\" });\n    }\n  });\n\n  app.put(\"/api/ai-providers/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const provider = await storage.updateAiProvider(id, updates);\n      if (!provider) {\n        return res.status(404).json({ message: \"AI provider not found\" });\n      }\n      res.json(provider);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update AI provider\" });\n    }\n  });\n\n  app.delete(\"/api/ai-providers/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteAiProvider(id);\n      if (!success) {\n        return res.status(404).json({ message: \"AI provider not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete AI provider\" });\n    }\n  });\n\n  app.post(\"/api/ai-providers/test\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { provider, apiKey } = req.body;\n      const aiService = new AIProviderService(apiKey, provider);\n      const isConnected = await aiService.testConnection();\n      res.json({ connected: isConnected });\n    } catch (error) {\n      res.status(400).json({ connected: false, message: \"Connection test failed\" });\n    }\n  });\n\n  // Business Analysis routes\n  app.get(\"/api/business-analyses\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const analyses = await storage.getBusinessAnalyses(userId);\n      res.json(analyses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business analyses\" });\n    }\n  });\n\n  app.get(\"/api/business-analyses/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const analysis = await storage.getBusinessAnalysis(id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Business analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business analysis\" });\n    }\n  });\n\n  app.post(\"/api/business-analyses/analyze\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { url } = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!url) {\n        return res.status(400).json({ message: \"URL is required\" });\n      }\n\n      // Get active AI provider\n      const activeProvider = await storage.getActiveAiProvider(userId);\n      if (!activeProvider) {\n        return res.status(400).json({ message: \"No active AI provider configured\" });\n      }\n\n      // Initialize AI service\n      const aiService = new AIProviderService(activeProvider.apiKey, activeProvider.provider as any);\n      const analyzer = new BusinessAnalyzerService(aiService);\n\n      // Perform analysis\n      const analysisResult = await analyzer.analyzeURL(url);\n\n      // Save analysis\n      const analysisData = insertBusinessAnalysisSchema.parse({\n        userId,\n        url: analysisResult.url,\n        businessModel: analysisResult.businessModel,\n        revenueStream: analysisResult.revenueStream,\n        targetMarket: analysisResult.targetMarket,\n        overallScore: analysisResult.overallScore,\n        scoreDetails: analysisResult.scoreDetails,\n        aiInsights: analysisResult.aiInsights,\n        currentStage: 1,\n        stageData: {}\n      });\n\n      const savedAnalysis = await storage.createBusinessAnalysis(analysisData);\n      res.json(savedAnalysis);\n    } catch (error) {\n      console.error(\"Analysis error:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to analyze business URL\";\n      \n      // Provide more specific error messages\n      if (errorMessage.includes('API key')) {\n        res.status(400).json({ message: \"Invalid API key. Please check your AI provider configuration.\" });\n      } else if (errorMessage.includes('temporarily unavailable')) {\n        res.status(503).json({ message: \"AI service temporarily unavailable. Please try again in a moment.\" });\n      } else if (errorMessage.includes('rate limit')) {\n        res.status(429).json({ message: \"Rate limit reached. Please wait a few moments before trying again.\" });\n      } else {\n        res.status(500).json({ message: errorMessage });\n      }\n    }\n  });\n\n  app.post(\"/api/business-analyses/search\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { query } = req.body;\n      const userId = req.user.claims.sub;\n\n      if (!query) {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      // Get active AI provider\n      const activeProvider = await storage.getActiveAiProvider(userId);\n      if (!activeProvider) {\n        return res.status(400).json({ message: \"No active AI provider configured\" });\n      }\n\n      // Initialize AI service\n      const aiService = new AIProviderService(activeProvider.apiKey, activeProvider.provider as any);\n      const analyzer = new BusinessAnalyzerService(aiService);\n\n      // Perform search\n      const searchResults = await analyzer.searchBusinesses(query);\n      res.json(searchResults);\n    } catch (error) {\n      console.error(\"Search error:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to search businesses\";\n      \n      // Provide more specific error messages\n      if (errorMessage.includes('API key')) {\n        res.status(400).json({ message: \"Invalid API key. Please check your AI provider configuration.\" });\n      } else if (errorMessage.includes('temporarily unavailable')) {\n        res.status(503).json({ message: \"AI service temporarily unavailable. Please try again in a moment.\" });\n      } else if (errorMessage.includes('rate limit')) {\n        res.status(429).json({ message: \"Rate limit reached. Please wait a few moments before trying again.\" });\n      } else {\n        res.status(500).json({ message: errorMessage });\n      }\n    }\n  });\n\n  app.put(\"/api/business-analyses/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      const analysis = await storage.updateBusinessAnalysis(id, updates);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Business analysis not found\" });\n      }\n      res.json(analysis);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update business analysis\" });\n    }\n  });\n\n  // Workflow Stage routes\n  app.get(\"/api/workflow-stages/:analysisId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { analysisId } = req.params;\n      const stages = await storage.getWorkflowStages(analysisId);\n      res.json(stages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch workflow stages\" });\n    }\n  });\n\n  app.post(\"/api/workflow-stages/:analysisId/generate/:stageNumber\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { analysisId, stageNumber } = req.params;\n      const userId = req.user.claims.sub;\n      const stage = parseInt(stageNumber);\n\n      // Get analysis data\n      const analysis = await storage.getBusinessAnalysis(analysisId);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Business analysis not found\" });\n      }\n\n      // Get active AI provider\n      const activeProvider = await storage.getActiveAiProvider(userId);\n      if (!activeProvider) {\n        return res.status(400).json({ message: \"No active AI provider configured\" });\n      }\n\n      // Initialize AI service\n      const aiService = new AIProviderService(activeProvider.apiKey, activeProvider.provider as any);\n      \n      // Import the enhanced workflow service\n      const { WorkflowStageService } = await import('./services/workflow-stages');\n      const workflowService = new WorkflowStageService(aiService);\n\n      // Get all stages data for context\n      const stages = await storage.getWorkflowStages(analysisId);\n      const previousStage = stages.find(s => s.stageNumber === stage - 1);\n\n      // Generate stage content with enhanced prompts\n      const stageContent = await workflowService.generateStageContent(\n        stage,\n        {\n          analysisData: analysis,\n          previousStageData: previousStage?.data,\n          allStagesData: stages\n        }\n      );\n\n      // Save or update stage\n      let workflowStage = stages.find(s => s.stageNumber === stage);\n      if (workflowStage) {\n        workflowStage = await storage.updateWorkflowStage(workflowStage.id, {\n          data: stageContent,\n          status: 'completed'\n        });\n      } else {\n        const stageNames = [\n          '', 'Discovery & Selection', 'Lazy-Entrepreneur Filter', 'MVP Launch Planning',\n          'Demand Testing Strategy', 'Scaling & Growth', 'AI Automation Mapping'\n        ];\n        \n        workflowStage = await storage.createWorkflowStage({\n          analysisId,\n          stageNumber: stage,\n          stageName: stageNames[stage] || `Stage ${stage}`,\n          status: 'completed',\n          data: stageContent,\n          aiGeneratedContent: stageContent\n        });\n      }\n\n      // Update analysis current stage\n      await storage.updateBusinessAnalysis(analysisId, { currentStage: stage });\n\n      res.json(workflowStage);\n    } catch (error) {\n      console.error(\"Stage generation error:\", error);\n      res.status(500).json({ message: \"Failed to generate stage content\" });\n    }\n  });\n\n  // Stats route\n  app.get(\"/api/stats\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const analyses = await storage.getBusinessAnalyses(userId);\n      \n      const stats = {\n        totalAnalyses: analyses.length,\n        strongCandidates: analyses.filter(a => (a.overallScore || 0) >= 7).length,\n        inProgress: analyses.filter(a => (a.currentStage || 1) > 1 && (a.currentStage || 1) < 6).length,\n        aiQueries: analyses.length * 15 // Rough estimate\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12154},"server/storage.ts":{"content":"import { \n  users,\n  aiProviders, \n  businessAnalyses, \n  workflowStages,\n  type User, \n  type UpsertUser,\n  type AiProvider, \n  type InsertAiProvider,\n  type BusinessAnalysis, \n  type InsertBusinessAnalysis,\n  type WorkflowStage, \n  type InsertWorkflowStage\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // AI Provider operations\n  getAiProviders(userId: string): Promise<AiProvider[]>;\n  getActiveAiProvider(userId: string): Promise<AiProvider | undefined>;\n  createAiProvider(data: InsertAiProvider): Promise<AiProvider>;\n  updateAiProvider(id: string, updates: Partial<AiProvider>): Promise<AiProvider | undefined>;\n  deleteAiProvider(id: string): Promise<boolean>;\n  \n  // Business Analysis operations\n  getBusinessAnalyses(userId: string): Promise<BusinessAnalysis[]>;\n  getBusinessAnalysis(id: string): Promise<BusinessAnalysis | undefined>;\n  createBusinessAnalysis(data: InsertBusinessAnalysis): Promise<BusinessAnalysis>;\n  updateBusinessAnalysis(id: string, updates: Partial<BusinessAnalysis>): Promise<BusinessAnalysis | undefined>;\n  \n  // Workflow Stage operations\n  getWorkflowStages(analysisId: string): Promise<WorkflowStage[]>;\n  createWorkflowStage(data: InsertWorkflowStage): Promise<WorkflowStage>;\n  updateWorkflowStage(id: string, updates: Partial<WorkflowStage>): Promise<WorkflowStage | undefined>;\n  \n  // Stats operations\n  getStats(userId: string): Promise<{ \n    totalAnalyses: number; \n    strongCandidates: number; \n    inProgress: number; \n    avgScore: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (mandatory for Replit Auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // AI Provider operations\n  async getAiProviders(userId: string): Promise<AiProvider[]> {\n    return await db\n      .select()\n      .from(aiProviders)\n      .where(eq(aiProviders.userId, userId))\n      .orderBy(desc(aiProviders.createdAt));\n  }\n\n  async getActiveAiProvider(userId: string): Promise<AiProvider | undefined> {\n    const [provider] = await db\n      .select()\n      .from(aiProviders)\n      .where(and(eq(aiProviders.userId, userId), eq(aiProviders.isActive, true)))\n      .limit(1);\n    return provider;\n  }\n\n  async createAiProvider(data: InsertAiProvider): Promise<AiProvider> {\n    // If setting as active, deactivate other providers first\n    if (data.isActive) {\n      await db\n        .update(aiProviders)\n        .set({ isActive: false })\n        .where(eq(aiProviders.userId, data.userId));\n    }\n\n    const [provider] = await db\n      .insert(aiProviders)\n      .values(data)\n      .returning();\n    return provider;\n  }\n\n  async updateAiProvider(id: string, updates: Partial<AiProvider>): Promise<AiProvider | undefined> {\n    // If setting as active, deactivate other providers first\n    if (updates.isActive && updates.userId) {\n      await db\n        .update(aiProviders)\n        .set({ isActive: false })\n        .where(eq(aiProviders.userId, updates.userId));\n    }\n\n    const [provider] = await db\n      .update(aiProviders)\n      .set(updates)\n      .where(eq(aiProviders.id, id))\n      .returning();\n    return provider;\n  }\n\n  async deleteAiProvider(id: string): Promise<boolean> {\n    const result = await db\n      .delete(aiProviders)\n      .where(eq(aiProviders.id, id));\n    return true;\n  }\n\n  // Business Analysis operations\n  async getBusinessAnalyses(userId: string): Promise<BusinessAnalysis[]> {\n    return await db\n      .select()\n      .from(businessAnalyses)\n      .where(eq(businessAnalyses.userId, userId))\n      .orderBy(desc(businessAnalyses.createdAt));\n  }\n\n  async getBusinessAnalysis(id: string): Promise<BusinessAnalysis | undefined> {\n    const [analysis] = await db\n      .select()\n      .from(businessAnalyses)\n      .where(eq(businessAnalyses.id, id));\n    return analysis;\n  }\n\n  async createBusinessAnalysis(data: InsertBusinessAnalysis): Promise<BusinessAnalysis> {\n    const [analysis] = await db\n      .insert(businessAnalyses)\n      .values(data)\n      .returning();\n    return analysis;\n  }\n\n  async updateBusinessAnalysis(id: string, updates: Partial<BusinessAnalysis>): Promise<BusinessAnalysis | undefined> {\n    const [analysis] = await db\n      .update(businessAnalyses)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(businessAnalyses.id, id))\n      .returning();\n    return analysis;\n  }\n\n  // Workflow Stage operations\n  async getWorkflowStages(analysisId: string): Promise<WorkflowStage[]> {\n    return await db\n      .select()\n      .from(workflowStages)\n      .where(eq(workflowStages.analysisId, analysisId))\n      .orderBy(workflowStages.stageNumber);\n  }\n\n  async createWorkflowStage(data: InsertWorkflowStage): Promise<WorkflowStage> {\n    const [stage] = await db\n      .insert(workflowStages)\n      .values(data)\n      .returning();\n    return stage;\n  }\n\n  async updateWorkflowStage(id: string, updates: Partial<WorkflowStage>): Promise<WorkflowStage | undefined> {\n    const [stage] = await db\n      .update(workflowStages)\n      .set(updates)\n      .where(eq(workflowStages.id, id))\n      .returning();\n    return stage;\n  }\n\n  // Stats operations\n  async getStats(userId: string): Promise<{ \n    totalAnalyses: number; \n    strongCandidates: number; \n    inProgress: number; \n    avgScore: number;\n  }> {\n    const analyses = await this.getBusinessAnalyses(userId);\n    \n    const totalAnalyses = analyses.length;\n    const strongCandidates = analyses.filter(a => (a.overallScore || 0) >= 7).length;\n    const inProgress = analyses.filter(a => a.currentStage && a.currentStage < 6).length;\n    const avgScore = totalAnalyses > 0\n      ? analyses.reduce((sum, a) => sum + (a.overallScore || 0), 0) / totalAnalyses\n      : 0;\n\n    return {\n      totalAnalyses,\n      strongCandidates,\n      inProgress,\n      avgScore: Math.round(avgScore * 10) / 10,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":6520},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { \n  pgTable, \n  text, \n  varchar, \n  jsonb, \n  timestamp, \n  integer, \n  boolean, \n  real,\n  index\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n// Enhanced users table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  username: text(\"username\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const aiProviders = pgTable(\"ai_providers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  provider: text(\"provider\").notNull(), // 'openai', 'gemini', 'grok'\n  apiKey: text(\"api_key\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const businessAnalyses = pgTable(\"business_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  url: text(\"url\").notNull(),\n  businessModel: text(\"business_model\"),\n  revenueStream: text(\"revenue_stream\"),\n  targetMarket: text(\"target_market\"),\n  overallScore: real(\"overall_score\"),\n  scoreDetails: jsonb(\"score_details\"),\n  aiInsights: jsonb(\"ai_insights\"),\n  currentStage: integer(\"current_stage\").default(1),\n  stageData: jsonb(\"stage_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const workflowStages = pgTable(\"workflow_stages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  analysisId: varchar(\"analysis_id\").notNull(),\n  stageNumber: integer(\"stage_number\").notNull(),\n  stageName: text(\"stage_name\").notNull(),\n  status: text(\"status\").default(\"pending\"), // 'pending', 'in_progress', 'completed'\n  data: jsonb(\"data\"),\n  aiGeneratedContent: jsonb(\"ai_generated_content\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User schema for Replit Auth\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  username: true,\n});\n\nexport const insertAiProviderSchema = createInsertSchema(aiProviders).pick({\n  userId: true,\n  provider: true,\n  apiKey: true,\n  isActive: true,\n});\n\nexport const insertBusinessAnalysisSchema = createInsertSchema(businessAnalyses).pick({\n  userId: true,\n  url: true,\n  businessModel: true,\n  revenueStream: true,\n  targetMarket: true,\n  overallScore: true,\n  scoreDetails: true,\n  aiInsights: true,\n  currentStage: true,\n  stageData: true,\n});\n\nexport const insertWorkflowStageSchema = createInsertSchema(workflowStages).pick({\n  analysisId: true,\n  stageNumber: true,\n  stageName: true,\n  status: true,\n  data: true,\n  aiGeneratedContent: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type AiProvider = typeof aiProviders.$inferSelect;\nexport type InsertAiProvider = z.infer<typeof insertAiProviderSchema>;\nexport type BusinessAnalysis = typeof businessAnalyses.$inferSelect;\nexport type InsertBusinessAnalysis = z.infer<typeof insertBusinessAnalysisSchema>;\nexport type WorkflowStage = typeof workflowStages.$inferSelect;\nexport type InsertWorkflowStage = z.infer<typeof insertWorkflowStageSchema>;","size_bytes":3883},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Landing from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\nimport { Analytics } from \"@/pages/analytics\";\nimport Documentation from \"@/pages/documentation\";\nimport { AIAssistant } from \"@/components/ai-assistant\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <AnimatePresence mode=\"wait\">\n      <Switch>\n        {isLoading || !isAuthenticated ? (\n          <Route path=\"/\" component={Landing} />\n        ) : (\n          <>\n            <Route path=\"/\" component={Dashboard} />\n            <Route path=\"/analytics\" component={Analytics} />\n            <Route path=\"/docs\" component={Documentation} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </AnimatePresence>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <motion.div \n            className=\"min-h-screen bg-vc-dark transition-colors duration-300\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Toaster />\n            <Router />\n            <AIAssistant />\n          </motion.div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1795},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Roboto+Mono:wght@400;500;600&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Light mode colors */\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --primary: hsl(16, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(348, 83%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --accent: hsl(51, 100%, 50%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --ring: hsl(16, 100%, 50%);\n  --chart-1: hsl(16, 100%, 50%);\n  --chart-2: hsl(348, 83%, 47%);\n  --chart-3: hsl(51, 100%, 50%);\n  --chart-4: hsl(120, 60%, 50%);\n  --chart-5: hsl(280, 60%, 50%);\n  --sidebar-background: hsl(0, 0%, 98%);\n  --sidebar-foreground: hsl(240, 5.3%, 26.1%);\n  --sidebar-primary: hsl(16, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(51, 100%, 50%);\n  --sidebar-accent-foreground: hsl(26, 4%, 10%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(16, 100%, 50%);\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Roboto Mono, monospace;\n  --radius: 0.75rem;\n  \n  /* Custom VentureClone colors */\n  --vc-primary: hsl(16, 100%, 50%);\n  --vc-secondary: hsl(348, 83%, 47%);\n  --vc-accent: hsl(51, 100%, 45%);\n  --vc-dark: hsl(0, 0%, 100%);\n  --vc-card: hsl(0, 0%, 100%);\n  --vc-border: hsl(0, 0%, 90%);\n  --vc-text: hsl(20, 14.3%, 4.1%);\n  --vc-text-muted: hsl(25, 5.3%, 44.7%);\n}\n\n.dark {\n  /* Dark mode colors */\n  --background: hsl(26, 4%, 10%);\n  --foreground: hsl(0, 0%, 100%);\n  --card: hsl(26, 5%, 18%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --popover: hsl(26, 4%, 10%);\n  --popover-foreground: hsl(0, 0%, 100%);\n  --primary: hsl(16, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(348, 83%, 47%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(26, 5%, 18%);\n  --muted-foreground: hsl(0, 0%, 69%);\n  --accent: hsl(51, 100%, 50%);\n  --accent-foreground: hsl(26, 4%, 10%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 25%);\n  --input: hsl(26, 5%, 18%);\n  --ring: hsl(16, 100%, 50%);\n  --sidebar-background: hsl(26, 5%, 18%);\n  --sidebar-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(16, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(51, 100%, 50%);\n  --sidebar-accent-foreground: hsl(26, 4%, 10%);\n  --sidebar-border: hsl(0, 0%, 25%);\n  --sidebar-ring: hsl(16, 100%, 50%);\n  \n  /* Custom VentureClone colors for dark mode */\n  --vc-primary: hsl(16, 100%, 50%);\n  --vc-secondary: hsl(348, 83%, 47%);\n  --vc-accent: hsl(51, 100%, 50%);\n  --vc-dark: hsl(26, 4%, 10%);\n  --vc-card: hsl(26, 5%, 18%);\n  --vc-border: hsl(0, 0%, 25%);\n  --vc-text: hsl(0, 0%, 100%);\n  --vc-text-muted: hsl(0, 0%, 69%);\n}\n\n@layer base {\n  * {\n    @apply border-border transition-colors duration-200;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  /* Animations */\n  .animate-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .animate-slide-in {\n    animation: slideIn 0.4s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  @keyframes slideIn {\n    from {\n      transform: translateX(-100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.3s cubic-bezier(0.16, 1, 0.3, 1);\n  }\n\n  @keyframes scaleIn {\n    from {\n      transform: scale(0.95);\n      opacity: 0;\n    }\n    to {\n      transform: scale(1);\n      opacity: 1;\n    }\n  }\n\n  /* Glow effects */\n  .shadow-neon {\n    box-shadow: \n      0 0 20px rgba(255, 69, 0, 0.3),\n      0 0 40px rgba(255, 69, 0, 0.1);\n    transition: box-shadow 0.3s ease;\n  }\n  \n  .shadow-neon:hover {\n    box-shadow: \n      0 0 30px rgba(255, 69, 0, 0.4),\n      0 0 60px rgba(255, 69, 0, 0.2);\n  }\n  \n  .shadow-neon-gold {\n    box-shadow: \n      0 0 20px rgba(255, 215, 0, 0.3),\n      0 0 40px rgba(255, 215, 0, 0.1);\n    transition: box-shadow 0.3s ease;\n  }\n\n  .shadow-neon-gold:hover {\n    box-shadow: \n      0 0 30px rgba(255, 215, 0, 0.4),\n      0 0 60px rgba(255, 215, 0, 0.2);\n  }\n\n  /* Custom gradients */\n  .gradient-primary {\n    background: linear-gradient(135deg, var(--vc-primary), var(--vc-secondary));\n  }\n\n  .gradient-accent {\n    background: linear-gradient(135deg, var(--vc-accent), var(--vc-primary));\n  }\n\n  /* Enhanced Glassmorphism Effects */\n  .glass {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glass-heavy {\n    background: rgba(255, 255, 255, 0.08);\n    backdrop-filter: blur(16px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.15);\n    box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);\n  }\n\n  .glass-light {\n    background: rgba(255, 255, 255, 0.03);\n    backdrop-filter: blur(8px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n  }\n\n  .glass-gradient {\n    background: linear-gradient(135deg, \n      rgba(255, 255, 255, 0.1),\n      rgba(255, 255, 255, 0.05));\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(255, 255, 255, 0.12);\n  }\n\n  .dark .glass {\n    background: rgba(0, 0, 0, 0.2);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .dark .glass-heavy {\n    background: rgba(17, 25, 40, 0.75);\n    backdrop-filter: blur(16px) saturate(180%);\n    border: 1px solid rgba(255, 255, 255, 0.125);\n    box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);\n  }\n\n  .dark .glass-light {\n    background: rgba(17, 25, 40, 0.5);\n    backdrop-filter: blur(8px);\n    border: 1px solid rgba(255, 255, 255, 0.05);\n  }\n\n  .dark .glass-gradient {\n    background: linear-gradient(135deg,\n      rgba(17, 25, 40, 0.8),\n      rgba(17, 25, 40, 0.4));\n    backdrop-filter: blur(12px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  /* Enhanced Hover & Interaction Effects */\n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n\n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n  }\n\n  .hover-scale {\n    transition: transform 0.2s ease;\n  }\n\n  .hover-scale:hover {\n    transform: scale(1.05);\n  }\n\n  .hover-glow {\n    transition: all 0.3s ease;\n  }\n\n  .hover-glow:hover {\n    box-shadow: 0 0 20px rgba(255, 107, 0, 0.3),\n                0 0 40px rgba(255, 107, 0, 0.1);\n  }\n\n  /* Animated Gradients */\n  @keyframes gradient-shift {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n  }\n\n  .gradient-animated {\n    background: linear-gradient(-45deg, \n      var(--vc-primary),\n      var(--vc-secondary),\n      var(--vc-accent),\n      var(--vc-primary));\n    background-size: 400% 400%;\n    animation: gradient-shift 15s ease infinite;\n  }\n\n  .gradient-animated-fast {\n    background: linear-gradient(-45deg,\n      var(--vc-primary),\n      var(--vc-secondary),\n      var(--vc-accent));\n    background-size: 400% 400%;\n    animation: gradient-shift 3s ease infinite;\n  }\n\n  /* Pulse Animation */\n  @keyframes pulse-glow {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0.7; }\n  }\n\n  .pulse-glow {\n    animation: pulse-glow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n\n  /* Loading Skeleton */\n  @keyframes skeleton-loading {\n    0% { background-position: -200% 0; }\n    100% { background-position: 200% 0; }\n  }\n\n  .skeleton {\n    background: linear-gradient(90deg,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.1) 50%,\n      rgba(255, 255, 255, 0.05) 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s ease-in-out infinite;\n  }\n\n  .dark .skeleton {\n    background: linear-gradient(90deg,\n      rgba(255, 255, 255, 0.05) 25%,\n      rgba(255, 255, 255, 0.15) 50%,\n      rgba(255, 255, 255, 0.05) 75%);\n    background-size: 200% 100%;\n    animation: skeleton-loading 1.5s ease-in-out infinite;\n  }\n\n  /* Glow Effects */\n  .glow-primary {\n    box-shadow: 0 0 20px rgba(255, 107, 0, 0.2),\n                0 0 40px rgba(255, 107, 0, 0.1);\n  }\n\n  .glow-accent {\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.2),\n                0 0 40px rgba(255, 215, 0, 0.1);\n  }\n\n  /* Floating Animation */\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  /* Custom color utilities */\n  .bg-vc-primary {\n    background-color: var(--vc-primary);\n  }\n\n  .bg-vc-secondary {\n    background-color: var(--vc-secondary);\n  }\n\n  .bg-vc-accent {\n    background-color: var(--vc-accent);\n  }\n\n  .bg-vc-dark {\n    background-color: var(--vc-dark);\n  }\n\n  .bg-vc-card {\n    background-color: var(--vc-card);\n  }\n\n  .text-vc-primary {\n    color: var(--vc-primary);\n  }\n\n  .text-vc-secondary {\n    color: var(--vc-secondary);\n  }\n\n  .text-vc-accent {\n    color: var(--vc-accent);\n  }\n\n  .text-vc-text {\n    color: var(--vc-text);\n  }\n\n  .text-vc-text-muted {\n    color: var(--vc-text-muted);\n  }\n\n  .border-vc-primary {\n    border-color: var(--vc-primary);\n  }\n\n  .border-vc-secondary {\n    border-color: var(--vc-secondary);\n  }\n\n  .border-vc-accent {\n    border-color: var(--vc-accent);\n  }\n\n  .border-vc-border {\n    border-color: var(--vc-border);\n  }\n}","size_bytes":9888},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/ai-providers.ts":{"content":"import OpenAI from \"openai\";\nimport { GoogleGenAI } from \"@google/genai\";\n\nexport type AIProvider = 'openai' | 'gemini' | 'grok';\n\nexport interface AIResponse {\n  content: string;\n  usage?: {\n    prompt_tokens: number;\n    completion_tokens: number;\n    total_tokens: number;\n  };\n}\n\nexport class AIProviderService {\n  private openaiClient: OpenAI | null = null;\n  private geminiClient: GoogleGenAI | null = null;\n  private grokClient: OpenAI | null = null;\n\n  constructor(private apiKey: string, private provider: AIProvider) {\n    this.initializeClient();\n  }\n\n  private initializeClient() {\n    switch (this.provider) {\n      case 'openai':\n        this.openaiClient = new OpenAI({ apiKey: this.apiKey });\n        break;\n      case 'gemini':\n        this.geminiClient = new GoogleGenAI({ apiKey: this.apiKey });\n        break;\n      case 'grok':\n        this.grokClient = new OpenAI({ \n          baseURL: \"https://api.x.ai/v1\", \n          apiKey: this.apiKey \n        });\n        break;\n    }\n  }\n\n  async generateContent(prompt: string, systemPrompt?: string): Promise<AIResponse> {\n    try {\n      switch (this.provider) {\n        case 'openai':\n          return await this.generateOpenAIContent(prompt, systemPrompt);\n        case 'gemini':\n          return await this.generateGeminiContent(prompt, systemPrompt);\n        case 'grok':\n          return await this.generateGrokContent(prompt, systemPrompt);\n        default:\n          throw new Error(`Unsupported AI provider: ${this.provider}`);\n      }\n    } catch (error) {\n      throw new Error(`AI generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  async generateStructuredContent(prompt: string, schema: any, systemPrompt?: string): Promise<any> {\n    let attempts = 0;\n    const maxAttempts = 3;\n    let lastError: Error | null = null;\n\n    while (attempts < maxAttempts) {\n      try {\n        attempts++;\n        let result: any;\n        \n        switch (this.provider) {\n          case 'openai':\n            result = await this.generateOpenAIStructuredContent(prompt, schema, systemPrompt);\n            break;\n          case 'gemini':\n            result = await this.generateGeminiStructuredContent(prompt, schema, systemPrompt);\n            break;\n          case 'grok':\n            result = await this.generateGrokStructuredContent(prompt, schema, systemPrompt);\n            break;\n          default:\n            throw new Error(`Unsupported AI provider: ${this.provider}`);\n        }\n        \n        // Validate and clean the result\n        result = this.cleanAndValidateResponse(result);\n        return result;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error('Unknown error');\n        console.error(`Attempt ${attempts}/${maxAttempts} failed:`, lastError.message);\n        \n        if (attempts === maxAttempts) {\n          throw new Error(`Structured AI generation failed after ${maxAttempts} attempts: ${lastError.message}`);\n        }\n        \n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempts));\n      }\n    }\n    \n    throw new Error(`Structured AI generation failed: ${lastError?.message || 'Unknown error'}`);\n  }\n\n  private async generateOpenAIContent(prompt: string, systemPrompt?: string): Promise<AIResponse> {\n    if (!this.openaiClient) throw new Error('OpenAI client not initialized');\n\n    const messages: any[] = [];\n    if (systemPrompt) {\n      messages.push({ role: \"system\", content: systemPrompt });\n    }\n    messages.push({ role: \"user\", content: prompt });\n\n    const response = await this.openaiClient.chat.completions.create({\n      model: \"gpt-4o\", // the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\n      messages,\n    });\n\n    return {\n      content: response.choices[0].message.content || '',\n      usage: response.usage ? {\n        prompt_tokens: response.usage.prompt_tokens,\n        completion_tokens: response.usage.completion_tokens,\n        total_tokens: response.usage.total_tokens,\n      } : undefined,\n    };\n  }\n\n  private async generateOpenAIStructuredContent(prompt: string, schema: any, systemPrompt?: string): Promise<any> {\n    if (!this.openaiClient) throw new Error('OpenAI client not initialized');\n\n    const messages: any[] = [];\n    const enhancedSystemPrompt = `${systemPrompt || ''}\nIMPORTANT: Keep all text responses concise (max 2-3 sentences per field). Respond with valid JSON only.`;\n    messages.push({ role: \"system\", content: enhancedSystemPrompt });\n    \n    // Add schema instruction to prompt\n    const structuredPrompt = `${prompt}\n\nRespond with a valid JSON object matching this schema:\n${JSON.stringify(schema, null, 2)}\n\nRemember: Be concise. Each text field should be 2-3 sentences maximum.`;\n    \n    messages.push({ role: \"user\", content: structuredPrompt });\n\n    const response = await this.openaiClient.chat.completions.create({\n      model: \"gpt-4o\",\n      messages,\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2000\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('AI did not return any content');\n    }\n    \n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (error) {\n      console.error('Failed to parse OpenAI response:', content.substring(0, 200));\n      throw new Error(`Failed to parse AI response as JSON: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async generateGeminiContent(prompt: string, systemPrompt?: string): Promise<AIResponse> {\n    if (!this.geminiClient) throw new Error('Gemini client not initialized');\n\n    const config: any = {};\n    if (systemPrompt) {\n      config.systemInstruction = systemPrompt;\n    }\n\n    const response = await this.geminiClient.models.generateContent({\n      model: 'gemini-1.5-pro',\n      contents: prompt,\n      config\n    });\n    \n    return {\n      content: response.text || '',\n      usage: undefined, // Gemini doesn't provide detailed usage info in the same format\n    };\n  }\n\n  private async generateGeminiStructuredContent(prompt: string, schema: any, systemPrompt?: string): Promise<any> {\n    if (!this.geminiClient) throw new Error('Gemini client not initialized');\n\n    const structuredPrompt = `${prompt}\n\nRespond with a valid JSON object matching this schema:\n${JSON.stringify(schema, null, 2)}\n\nIMPORTANT: Be concise. Each text field should be 2-3 sentences maximum.`;\n\n    const config: any = {\n      responseMimeType: 'application/json',\n      responseSchema: schema,\n      temperature: 0.7,\n      maxOutputTokens: 2000\n    };\n    \n    if (systemPrompt) {\n      config.systemInstruction = `${systemPrompt}\nIMPORTANT: Keep all text responses concise (max 2-3 sentences per field).`;\n    }\n\n    const response = await this.geminiClient.models.generateContent({\n      model: 'gemini-1.5-pro',\n      contents: structuredPrompt,\n      config\n    });\n    \n    const content = response.text;\n    if (!content) {\n      throw new Error('AI did not return any content');\n    }\n    \n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (error) {\n      console.error('Failed to parse Gemini response:', content.substring(0, 200));\n      throw new Error(`Failed to parse AI response as JSON: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private async generateGrokContent(prompt: string, systemPrompt?: string): Promise<AIResponse> {\n    if (!this.grokClient) throw new Error('Grok client not initialized');\n\n    const messages: any[] = [];\n    if (systemPrompt) {\n      messages.push({ role: \"system\", content: systemPrompt });\n    }\n    messages.push({ role: \"user\", content: prompt });\n\n    const response = await this.grokClient.chat.completions.create({\n      model: \"grok-2-1212\",\n      messages,\n    });\n\n    return {\n      content: response.choices[0].message.content || '',\n      usage: response.usage ? {\n        prompt_tokens: response.usage.prompt_tokens,\n        completion_tokens: response.usage.completion_tokens,\n        total_tokens: response.usage.total_tokens,\n      } : undefined,\n    };\n  }\n\n  private async generateGrokStructuredContent(prompt: string, schema: any, systemPrompt?: string): Promise<any> {\n    if (!this.grokClient) throw new Error('Grok client not initialized');\n\n    const messages: any[] = [];\n    const enhancedSystemPrompt = `${systemPrompt || ''}\nIMPORTANT: Keep all text responses concise (max 2-3 sentences per field). Respond with valid JSON only.`;\n    messages.push({ role: \"system\", content: enhancedSystemPrompt });\n    \n    // Add schema instruction to prompt\n    const structuredPrompt = `${prompt}\n\nRespond with a valid JSON object matching this schema:\n${JSON.stringify(schema, null, 2)}\n\nRemember: Be concise. Each text field should be 2-3 sentences maximum.`;\n    \n    messages.push({ role: \"user\", content: structuredPrompt });\n\n    const response = await this.grokClient.chat.completions.create({\n      model: \"grok-2-1212\",\n      messages,\n      response_format: { type: \"json_object\" },\n      temperature: 0.7,\n      max_tokens: 2000\n    });\n\n    const content = response.choices[0].message.content;\n    if (!content) {\n      throw new Error('AI did not return any content');\n    }\n    \n    try {\n      const parsed = JSON.parse(content);\n      return parsed;\n    } catch (error) {\n      console.error('Failed to parse Grok response:', content.substring(0, 200));\n      throw new Error(`Failed to parse AI response as JSON: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  private cleanAndValidateResponse(response: any): any {\n    if (!response || typeof response !== 'object') {\n      throw new Error('Invalid response structure');\n    }\n\n    // Truncate long string fields to prevent UI issues\n    const maxFieldLength = 500;\n    \n    const truncateStrings = (obj: any): any => {\n      if (typeof obj === 'string') {\n        if (obj.length > maxFieldLength) {\n          return obj.substring(0, maxFieldLength) + '...';\n        }\n        return obj;\n      } else if (Array.isArray(obj)) {\n        return obj.map(item => truncateStrings(item));\n      } else if (obj !== null && typeof obj === 'object') {\n        const cleaned: any = {};\n        for (const [key, value] of Object.entries(obj)) {\n          cleaned[key] = truncateStrings(value);\n        }\n        return cleaned;\n      }\n      return obj;\n    };\n\n    // Special handling for scoreDetails to ensure scores are numbers\n    if (response.scoreDetails) {\n      const scoreTypes = ['technicalComplexity', 'marketOpportunity', 'competitiveLandscape', 'resourceRequirements', 'timeToMarket'];\n      for (const scoreType of scoreTypes) {\n        if (response.scoreDetails[scoreType]) {\n          const score = response.scoreDetails[scoreType].score;\n          if (typeof score === 'string') {\n            response.scoreDetails[scoreType].score = parseFloat(score);\n          }\n          // Ensure score is between 1 and 10\n          if (response.scoreDetails[scoreType].score < 1) {\n            response.scoreDetails[scoreType].score = 1;\n          } else if (response.scoreDetails[scoreType].score > 10) {\n            response.scoreDetails[scoreType].score = 10;\n          }\n        }\n      }\n    }\n\n    return truncateStrings(response);\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await this.generateContent(\"Test connection. Respond with 'OK'.\");\n      return response.content.includes('OK');\n    } catch (error) {\n      return false;\n    }\n  }\n}\n","size_bytes":11692},"server/services/business-analyzer.ts":{"content":"import { AIProviderService } from './ai-providers';\n\nexport interface BusinessAnalysisResult {\n  url: string;\n  businessModel: string;\n  revenueStream: string;\n  targetMarket: string;\n  overallScore: number;\n  scoreDetails: {\n    technicalComplexity: { score: number; reasoning: string };\n    marketOpportunity: { score: number; reasoning: string };\n    competitiveLandscape: { score: number; reasoning: string };\n    resourceRequirements: { score: number; reasoning: string };\n    timeToMarket: { score: number; reasoning: string };\n  };\n  aiInsights: {\n    keyInsight: string;\n    riskFactor: string;\n    opportunity: string;\n  };\n}\n\nexport interface SearchResult {\n  businesses: Array<{\n    name: string;\n    url: string;\n    description: string;\n    businessModel: string;\n    estimatedScore: number;\n  }>;\n}\n\nexport class BusinessAnalyzerService {\n  constructor(private aiService: AIProviderService) {}\n\n  async analyzeURL(url: string): Promise<BusinessAnalysisResult> {\n    const analysisPrompt = `\n      Analyze the business at ${url} for cloneability. \n      \n      IMPORTANT: Be CONCISE - keep each reasoning to 2-3 sentences maximum.\n      \n      Provide:\n      1. Business model (1 sentence)\n      2. Primary revenue stream (1 sentence)\n      3. Target market (1 sentence)\n      4. Scores (1-10) with brief reasoning:\n         - Technical complexity\n         - Market opportunity\n         - Competitive landscape\n         - Resource requirements\n         - Time to market\n      5. One key insight (1 sentence)\n      6. One risk factor (1 sentence)\n      7. One opportunity (1 sentence)\n    `;\n\n    const systemPrompt = `\n      You are a venture analyst. Be extremely concise. Each reasoning should be 2-3 sentences maximum. Focus on actionable insights.\n    `;\n\n    const schema = {\n      type: \"object\",\n      properties: {\n        businessModel: { type: \"string\" },\n        revenueStream: { type: \"string\" },\n        targetMarket: { type: \"string\" },\n        scoreDetails: {\n          type: \"object\",\n          properties: {\n            technicalComplexity: {\n              type: \"object\",\n              properties: {\n                score: { type: \"number\" },\n                reasoning: { type: \"string\" }\n              }\n            },\n            marketOpportunity: {\n              type: \"object\",\n              properties: {\n                score: { type: \"number\" },\n                reasoning: { type: \"string\" }\n              }\n            },\n            competitiveLandscape: {\n              type: \"object\",\n              properties: {\n                score: { type: \"number\" },\n                reasoning: { type: \"string\" }\n              }\n            },\n            resourceRequirements: {\n              type: \"object\",\n              properties: {\n                score: { type: \"number\" },\n                reasoning: { type: \"string\" }\n              }\n            },\n            timeToMarket: {\n              type: \"object\",\n              properties: {\n                score: { type: \"number\" },\n                reasoning: { type: \"string\" }\n              }\n            }\n          }\n        },\n        aiInsights: {\n          type: \"object\",\n          properties: {\n            keyInsight: { type: \"string\" },\n            riskFactor: { type: \"string\" },\n            opportunity: { type: \"string\" }\n          }\n        }\n      }\n    };\n\n    let result;\n    try {\n      result = await this.aiService.generateStructuredContent(analysisPrompt, schema, systemPrompt);\n    } catch (error) {\n      console.error('Failed to generate business analysis:', error);\n      // Provide a fallback response if AI fails\n      throw new Error('AI analysis temporarily unavailable. Please check your AI provider configuration and try again.');\n    }\n\n    // Validate result\n    if (!result || !result.scoreDetails) {\n      throw new Error('AI failed to generate valid analysis. Please try again.');\n    }\n\n    // Ensure all required score details exist with fallbacks\n    const requiredScores = ['technicalComplexity', 'marketOpportunity', 'competitiveLandscape', 'resourceRequirements', 'timeToMarket'];\n    for (const scoreType of requiredScores) {\n      if (!result.scoreDetails[scoreType]) {\n        // Provide default values if missing\n        result.scoreDetails[scoreType] = {\n          score: 5,\n          reasoning: 'Unable to assess - using default score'\n        };\n      } else if (typeof result.scoreDetails[scoreType].score !== 'number') {\n        // Try to parse as number or use default\n        const parsed = parseFloat(result.scoreDetails[scoreType].score);\n        result.scoreDetails[scoreType].score = isNaN(parsed) ? 5 : parsed;\n      }\n    }\n    \n    // Ensure AI insights exist\n    if (!result.aiInsights) {\n      result.aiInsights = {\n        keyInsight: 'Analysis pending',\n        riskFactor: 'To be determined',\n        opportunity: 'Further investigation needed'\n      };\n    }\n\n    // Calculate overall score\n    const weights = {\n      technicalComplexity: 0.20,\n      marketOpportunity: 0.25,\n      competitiveLandscape: 0.15,\n      resourceRequirements: 0.20,\n      timeToMarket: 0.20\n    };\n\n    const overallScore = parseFloat(\n      (result.scoreDetails.technicalComplexity.score * weights.technicalComplexity +\n       result.scoreDetails.marketOpportunity.score * weights.marketOpportunity +\n       result.scoreDetails.competitiveLandscape.score * weights.competitiveLandscape +\n       result.scoreDetails.resourceRequirements.score * weights.resourceRequirements +\n       result.scoreDetails.timeToMarket.score * weights.timeToMarket).toFixed(1)\n    );\n\n    return {\n      url,\n      businessModel: result.businessModel,\n      revenueStream: result.revenueStream,\n      targetMarket: result.targetMarket,\n      overallScore,\n      scoreDetails: result.scoreDetails,\n      aiInsights: result.aiInsights\n    };\n  }\n\n  async searchBusinesses(query: string): Promise<SearchResult> {\n    const searchPrompt = `\n      Based on the query \"${query}\", suggest 5 real web businesses/applications that match this criteria and would be good candidates for cloning. For each business, provide:\n      1. Business name\n      2. URL (if publicly known)\n      3. Brief description\n      4. Business model\n      5. Estimated cloneability score (1-10)\n      \n      Focus on businesses that are:\n      - Technically feasible to clone\n      - Have proven market demand\n      - Not overly complex for a startup to replicate\n      - Have clear monetization strategies\n    `;\n\n    const systemPrompt = `\n      You are a business research specialist helping entrepreneurs find cloneable opportunities. Suggest real, existing businesses that match the criteria and would be good learning examples.\n    `;\n\n    const schema = {\n      type: \"object\",\n      properties: {\n        businesses: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              name: { type: \"string\" },\n              url: { type: \"string\" },\n              description: { type: \"string\" },\n              businessModel: { type: \"string\" },\n              estimatedScore: { type: \"number\" }\n            }\n          }\n        }\n      }\n    };\n\n    return await this.aiService.generateStructuredContent(searchPrompt, schema, systemPrompt);\n  }\n\n  async generateStageContent(stageNumber: number, analysisData: any, previousStageData?: any): Promise<any> {\n    const stagePrompts = {\n      1: \"Discovery & Selection analysis already completed\",\n      2: this.getLazyEntrepreneurFilterPrompt(analysisData),\n      3: this.getMVPPlanningPrompt(analysisData, previousStageData),\n      4: this.getDemandTestingPrompt(analysisData, previousStageData),\n      5: this.getScalingGrowthPrompt(analysisData, previousStageData),\n      6: this.getAIAutomationPrompt(analysisData, previousStageData)\n    };\n\n    const prompt = stagePrompts[stageNumber as keyof typeof stagePrompts];\n    if (!prompt || stageNumber === 1) return null;\n\n    const systemPrompt = `You are an expert startup advisor providing detailed, actionable guidance for each stage of the business cloning process.`;\n\n    return await this.aiService.generateStructuredContent(prompt, this.getStageSchema(stageNumber), systemPrompt);\n  }\n\n  private getLazyEntrepreneurFilterPrompt(analysisData: any): string {\n    return `\n      Based on the business analysis for ${analysisData.url} (score: ${analysisData.overallScore}/10), apply the \"Lazy Entrepreneur Filter\" to determine if this is worth pursuing with minimal effort. Consider:\n      \n      1. Effort vs Reward ratio\n      2. Complexity barriers\n      3. Market validation requirements\n      4. Competitive advantages needed\n      5. Resource intensity\n      \n      Provide a recommendation: PROCEED, MODIFY, or SKIP with detailed reasoning.\n    `;\n  }\n\n  private getMVPPlanningPrompt(analysisData: any, previousStageData: any): string {\n    return `\n      Create a detailed MVP launch plan for cloning ${analysisData.url}. Include:\n      \n      1. Core features for MVP (prioritized list)\n      2. Technical stack recommendations\n      3. Development timeline (weeks/months)\n      4. Team requirements\n      5. Budget estimates\n      6. Key validation metrics\n      7. Launch strategy\n      \n      Focus on the minimum viable version that proves the concept.\n    `;\n  }\n\n  private getDemandTestingPrompt(analysisData: any, previousStageData: any): string {\n    return `\n      Design a demand testing strategy for the ${analysisData.businessModel} clone. Include:\n      \n      1. Pre-launch validation methods\n      2. Landing page strategy\n      3. Customer acquisition tests\n      4. Pricing validation approaches\n      5. Market feedback collection\n      6. Success metrics and KPIs\n      7. Pivot indicators\n      \n      Focus on lean startup methodology and data-driven decisions.\n    `;\n  }\n\n  private getScalingGrowthPrompt(analysisData: any, previousStageData: any): string {\n    return `\n      Develop a scaling and growth strategy for the validated ${analysisData.businessModel} clone. Include:\n      \n      1. Growth marketing strategies\n      2. Customer acquisition channels\n      3. Revenue optimization\n      4. Product expansion roadmap\n      5. Team scaling plan\n      6. Technology infrastructure\n      7. Competitive positioning\n      \n      Focus on sustainable, profitable growth.\n    `;\n  }\n\n  private getAIAutomationPrompt(analysisData: any, previousStageData: any): string {\n    return `\n      Identify AI automation opportunities for the ${analysisData.businessModel} business. Include:\n      \n      1. Customer service automation\n      2. Marketing automation\n      3. Operations optimization\n      4. Product feature automation\n      5. Data analysis automation\n      6. Implementation priorities\n      7. ROI projections\n      \n      Focus on practical, implementable AI solutions.\n    `;\n  }\n\n  private getStageSchema(stageNumber: number): any {\n    const schemas = {\n      2: {\n        type: \"object\",\n        properties: {\n          recommendation: { type: \"string\", enum: [\"PROCEED\", \"MODIFY\", \"SKIP\"] },\n          effortScore: { type: \"number\" },\n          rewardScore: { type: \"number\" },\n          reasoning: { type: \"string\" },\n          modifications: { type: \"array\", items: { type: \"string\" } },\n          riskMitigation: { type: \"array\", items: { type: \"string\" } }\n        }\n      },\n      3: {\n        type: \"object\",\n        properties: {\n          coreFeatures: { type: \"array\", items: { type: \"string\" } },\n          techStack: { type: \"array\", items: { type: \"string\" } },\n          timeline: { type: \"string\" },\n          teamRequirements: { type: \"array\", items: { type: \"string\" } },\n          budgetEstimate: { type: \"string\" },\n          validationMetrics: { type: \"array\", items: { type: \"string\" } },\n          launchStrategy: { type: \"string\" }\n        }\n      },\n      4: {\n        type: \"object\",\n        properties: {\n          validationMethods: { type: \"array\", items: { type: \"string\" } },\n          landingPageStrategy: { type: \"string\" },\n          acquisitionTests: { type: \"array\", items: { type: \"string\" } },\n          pricingValidation: { type: \"string\" },\n          feedbackCollection: { type: \"array\", items: { type: \"string\" } },\n          successMetrics: { type: \"array\", items: { type: \"string\" } },\n          pivotIndicators: { type: \"array\", items: { type: \"string\" } }\n        }\n      },\n      5: {\n        type: \"object\",\n        properties: {\n          growthStrategies: { type: \"array\", items: { type: \"string\" } },\n          acquisitionChannels: { type: \"array\", items: { type: \"string\" } },\n          revenueOptimization: { type: \"array\", items: { type: \"string\" } },\n          productRoadmap: { type: \"array\", items: { type: \"string\" } },\n          teamScaling: { type: \"string\" },\n          infrastructure: { type: \"array\", items: { type: \"string\" } },\n          positioning: { type: \"string\" }\n        }\n      },\n      6: {\n        type: \"object\",\n        properties: {\n          customerServiceAI: { type: \"array\", items: { type: \"string\" } },\n          marketingAutomation: { type: \"array\", items: { type: \"string\" } },\n          operationsAI: { type: \"array\", items: { type: \"string\" } },\n          productFeatureAI: { type: \"array\", items: { type: \"string\" } },\n          dataAnalysisAI: { type: \"array\", items: { type: \"string\" } },\n          implementationPriorities: { type: \"array\", items: { type: \"string\" } },\n          roiProjections: { type: \"string\" }\n        }\n      }\n    };\n\n    return schemas[stageNumber as keyof typeof schemas] || {};\n  }\n}\n","size_bytes":13586},"client/src/components/ai-assistant.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { MessageCircle, X, Send, Sparkles, Bot, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Message {\n  id: string;\n  role: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n}\n\n// Knowledge base from documentation\nconst KNOWLEDGE_BASE = {\n  greetings: [\n    \"Hello! I'm your VentureClone AI assistant. How can I help you analyze businesses today?\",\n    \"Welcome back! Ready to discover your next venture opportunity?\",\n    \"Hi there! I'm here to guide you through the 6-stage cloning process.\",\n  ],\n  \n  features: {\n    analysis: \"You can analyze any website URL to assess its clonability potential. Just paste the URL in the input field and I'll provide a comprehensive analysis with scores across 5 dimensions.\",\n    workflow: \"Our 6-stage workflow guides you from Discovery & Selection through AI Automation Mapping. Each stage has specific deliverables and AI-generated content.\",\n    comparison: \"Compare multiple businesses side-by-side to identify the best opportunities. You can see average scores and find your strongest candidates.\",\n    export: \"Export your analyses in HTML, CSV, or JSON formats. Perfect for sharing with team members or keeping records.\",\n    batch: \"Analyze up to 10 URLs simultaneously with our batch analysis feature. Great for competitive analysis!\",\n    analytics: \"Visit the Analytics page to see comprehensive charts and insights across all your analyses.\",\n  },\n  \n  scoring: {\n    interpretation: {\n      \"9-10\": \"Excellent opportunity - proceed immediately with high confidence\",\n      \"7-8\": \"Strong candidate - minor challenges but very viable\",\n      \"5-6\": \"Moderate opportunity - requires significant work but possible\",\n      \"3-4\": \"Challenging - needs major resources and expertise\",\n      \"0-2\": \"Not recommended - too difficult or competitive\",\n    },\n    criteria: [\n      \"Technical Complexity - How difficult is it to build?\",\n      \"Market Opportunity - How large is the addressable market?\",\n      \"Competitive Landscape - How saturated is the market?\",\n      \"Resource Requirements - What capital and skills are needed?\",\n      \"Time to Market - How quickly can you launch?\",\n    ],\n  },\n  \n  stages: {\n    1: \"Discovery & Selection - Identify and validate business opportunities\",\n    2: \"Lazy-Entrepreneur Filter - Assess effort vs reward ratio\",\n    3: \"MVP Launch Planning - Define your minimum viable product\",\n    4: \"Demand Testing Strategy - Validate market demand\",\n    5: \"Scaling & Growth - Plan for expansion\",\n    6: \"AI Automation Mapping - Identify automation opportunities\",\n  },\n  \n  tips: [\n    \"Start with businesses you understand or have experience in\",\n    \"Focus on B2B SaaS for recurring revenue potential\",\n    \"Look for businesses with clear monetization models\",\n    \"Validate demand before heavy investment\",\n    \"Automate repetitive processes early\",\n  ],\n};\n\nexport function AIAssistant() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (isOpen && messages.length === 0) {\n      // Initial greeting\n      const greeting = KNOWLEDGE_BASE.greetings[Math.floor(Math.random() * KNOWLEDGE_BASE.greetings.length)];\n      setMessages([{\n        id: Date.now().toString(),\n        role: 'assistant',\n        content: greeting,\n        timestamp: new Date(),\n      }]);\n    }\n  }, [isOpen]);\n\n  const generateResponse = (userInput: string): string => {\n    const lowerInput = userInput.toLowerCase();\n    \n    // Check for feature questions\n    if (lowerInput.includes('analyze') || lowerInput.includes('analysis')) {\n      return KNOWLEDGE_BASE.features.analysis;\n    }\n    \n    if (lowerInput.includes('workflow') || lowerInput.includes('stage')) {\n      const stages = Object.entries(KNOWLEDGE_BASE.stages)\n        .map(([num, desc]) => `Stage ${num}: ${desc}`)\n        .join('\\n');\n      return `Our 6-stage workflow:\\n${stages}\\n\\nEach stage builds on the previous one to systematically validate and scale your venture.`;\n    }\n    \n    if (lowerInput.includes('score') || lowerInput.includes('scoring')) {\n      const interpretation = Object.entries(KNOWLEDGE_BASE.scoring.interpretation)\n        .map(([range, desc]) => `• Score ${range}: ${desc}`)\n        .join('\\n');\n      return `Score interpretation:\\n${interpretation}\\n\\nWe evaluate across 5 criteria:\\n${KNOWLEDGE_BASE.scoring.criteria.join('\\n')}`;\n    }\n    \n    if (lowerInput.includes('export')) {\n      return KNOWLEDGE_BASE.features.export;\n    }\n    \n    if (lowerInput.includes('batch')) {\n      return KNOWLEDGE_BASE.features.batch;\n    }\n    \n    if (lowerInput.includes('compare') || lowerInput.includes('comparison')) {\n      return KNOWLEDGE_BASE.features.comparison;\n    }\n    \n    if (lowerInput.includes('analytics') || lowerInput.includes('charts')) {\n      return KNOWLEDGE_BASE.features.analytics;\n    }\n    \n    if (lowerInput.includes('tip') || lowerInput.includes('advice') || lowerInput.includes('best')) {\n      const tip = KNOWLEDGE_BASE.tips[Math.floor(Math.random() * KNOWLEDGE_BASE.tips.length)];\n      return `Here's a pro tip: ${tip}`;\n    }\n    \n    if (lowerInput.includes('help') || lowerInput.includes('how')) {\n      return \"I can help you with:\\n• Analyzing URLs for clonability\\n• Understanding the 6-stage workflow\\n• Interpreting scores and metrics\\n• Comparing multiple businesses\\n• Exporting your data\\n• Using batch analysis\\n• Navigating analytics\\n\\nWhat would you like to know more about?\";\n    }\n    \n    // Default response\n    return \"I can help you analyze businesses, understand our scoring system, navigate the 6-stage workflow, and make the most of VentureClone AI. What specific aspect would you like to explore?\";\n  };\n\n  const handleSend = () => {\n    if (!input.trim()) return;\n    \n    const userMessage: Message = {\n      id: Date.now().toString(),\n      role: 'user',\n      content: input,\n      timestamp: new Date(),\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsTyping(true);\n    \n    // Simulate AI response\n    setTimeout(() => {\n      const response = generateResponse(input);\n      const assistantMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        role: 'assistant',\n        content: response,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n      setIsTyping(false);\n    }, 1000);\n  };\n\n  return (\n    <>\n      {/* Floating Button */}\n      <motion.div\n        className=\"fixed bottom-6 right-6 z-50\"\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n      >\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"relative h-14 w-14 rounded-full bg-gradient-to-r from-vc-primary to-vc-secondary shadow-2xl hover:shadow-vc-primary/50 transition-all duration-300\"\n          data-testid=\"button-ai-assistant\"\n        >\n          {isOpen ? (\n            <X className=\"h-6 w-6 text-white\" />\n          ) : (\n            <MessageCircle className=\"h-6 w-6 text-white\" />\n          )}\n          \n          {/* Pulse animation when closed */}\n          {!isOpen && (\n            <span className=\"absolute -top-1 -right-1 flex h-3 w-3\">\n              <span className=\"animate-ping absolute inline-flex h-full w-full rounded-full bg-vc-accent opacity-75\"></span>\n              <span className=\"relative inline-flex rounded-full h-3 w-3 bg-vc-accent\"></span>\n            </span>\n          )}\n        </Button>\n      </motion.div>\n\n      {/* Chat Window */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: 20, scale: 0.95 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 20, scale: 0.95 }}\n            transition={{ duration: 0.2 }}\n            className=\"fixed bottom-24 right-6 z-50 w-96 h-[600px] max-h-[80vh]\"\n          >\n            <Card className=\"h-full bg-vc-card/95 backdrop-blur-xl border-vc-border shadow-2xl overflow-hidden\">\n              {/* Holographic Avatar Header */}\n              <div className=\"relative h-32 bg-gradient-to-br from-vc-primary/20 via-vc-secondary/20 to-vc-accent/20 border-b border-vc-border\">\n                <div className=\"absolute inset-0 opacity-30\">\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-vc-primary/20 to-transparent animate-pulse\" />\n                </div>\n                \n                {/* Holographic Avatar */}\n                <motion.div \n                  className=\"absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2\"\n                  animate={{ \n                    rotateY: [0, 360],\n                  }}\n                  transition={{ \n                    duration: 20,\n                    repeat: Infinity,\n                    ease: \"linear\"\n                  }}\n                >\n                  <div className=\"relative w-20 h-20\">\n                    {/* Holographic layers */}\n                    <motion.div \n                      className=\"absolute inset-0 rounded-full bg-gradient-to-br from-vc-primary to-vc-secondary opacity-60\"\n                      animate={{ scale: [1, 1.1, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    />\n                    <motion.div \n                      className=\"absolute inset-2 rounded-full bg-gradient-to-tr from-vc-accent to-vc-primary opacity-80\"\n                      animate={{ scale: [1, 0.9, 1] }}\n                      transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}\n                    />\n                    <div className=\"absolute inset-3 rounded-full bg-vc-dark flex items-center justify-center\">\n                      <Bot className=\"h-8 w-8 text-vc-accent\" />\n                    </div>\n                    \n                    {/* Holographic particles */}\n                    {[...Array(6)].map((_, i) => (\n                      <motion.div\n                        key={i}\n                        className=\"absolute w-1 h-1 bg-vc-accent rounded-full\"\n                        style={{\n                          left: '50%',\n                          top: '50%',\n                        }}\n                        animate={{\n                          x: [0, Math.cos(i * 60 * Math.PI / 180) * 40, 0],\n                          y: [0, Math.sin(i * 60 * Math.PI / 180) * 40, 0],\n                          opacity: [0, 1, 0],\n                        }}\n                        transition={{\n                          duration: 3,\n                          repeat: Infinity,\n                          delay: i * 0.5,\n                        }}\n                      />\n                    ))}\n                  </div>\n                </motion.div>\n                \n                <div className=\"absolute bottom-2 left-4 right-4 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Sparkles className=\"h-4 w-4 text-vc-accent\" />\n                    <span className=\"text-sm font-semibold text-vc-text\">VentureClone Assistant</span>\n                  </div>\n                  <Badge className=\"bg-green-900/50 text-green-300 text-xs\">\n                    <Zap className=\"h-3 w-3 mr-1\" />\n                    Online\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Messages */}\n              <ScrollArea className=\"flex-1 h-[calc(100%-12rem)] p-4\">\n                <div className=\"space-y-4\">\n                  {messages.map((message) => (\n                    <motion.div\n                      key={message.id}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ duration: 0.3 }}\n                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                    >\n                      <div\n                        className={`max-w-[80%] rounded-lg px-4 py-2 ${\n                          message.role === 'user'\n                            ? 'bg-gradient-to-r from-vc-primary to-vc-secondary text-white'\n                            : 'bg-vc-dark border border-vc-border text-vc-text'\n                        }`}\n                      >\n                        <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                        <span className=\"text-xs opacity-70 mt-1 block\">\n                          {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                        </span>\n                      </div>\n                    </motion.div>\n                  ))}\n                  \n                  {isTyping && (\n                    <div className=\"flex justify-start\">\n                      <div className=\"bg-vc-dark border border-vc-border rounded-lg px-4 py-2\">\n                        <div className=\"flex space-x-1\">\n                          <motion.div\n                            className=\"w-2 h-2 bg-vc-primary rounded-full\"\n                            animate={{ opacity: [0.4, 1, 0.4] }}\n                            transition={{ duration: 1.4, repeat: Infinity }}\n                          />\n                          <motion.div\n                            className=\"w-2 h-2 bg-vc-secondary rounded-full\"\n                            animate={{ opacity: [0.4, 1, 0.4] }}\n                            transition={{ duration: 1.4, repeat: Infinity, delay: 0.2 }}\n                          />\n                          <motion.div\n                            className=\"w-2 h-2 bg-vc-accent rounded-full\"\n                            animate={{ opacity: [0.4, 1, 0.4] }}\n                            transition={{ duration: 1.4, repeat: Infinity, delay: 0.4 }}\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div ref={messagesEndRef} />\n                </div>\n              </ScrollArea>\n\n              {/* Input */}\n              <div className=\"p-4 border-t border-vc-border\">\n                <div className=\"flex space-x-2\">\n                  <Input\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n                    placeholder=\"Ask me anything about VentureClone...\"\n                    className=\"flex-1 bg-vc-dark border-vc-border text-vc-text placeholder:text-vc-text-muted\"\n                    disabled={isTyping}\n                    data-testid=\"input-assistant-message\"\n                  />\n                  <Button\n                    onClick={handleSend}\n                    disabled={!input.trim() || isTyping}\n                    className=\"bg-gradient-to-r from-vc-primary to-vc-secondary hover:opacity-90\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}","size_bytes":15907},"client/src/components/ai-insights-panel.tsx":{"content":"import { Lightbulb, AlertTriangle, TrendingUp } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface AIInsightsPanelProps {\n  analysis: BusinessAnalysis;\n}\n\nexport function AIInsightsPanel({ analysis }: AIInsightsPanelProps) {\n  const insights = analysis.aiInsights;\n\n  if (!insights) {\n    return (\n      <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-ai-insights\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-vc-text\">\n            <span className=\"text-vc-accent\">🤖</span>\n            <span>AI Insights</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-vc-text-muted text-sm\">No insights available yet</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-ai-insights\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2 text-vc-text\">\n          <span className=\"text-vc-accent\">🤖</span>\n          <span>AI Insights</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Key Insight */}\n        <div className=\"bg-vc-dark rounded-lg border border-vc-accent/30 p-4\" data-testid=\"insight-key\">\n          <div className=\"flex items-start space-x-2\">\n            <Lightbulb className=\"h-4 w-4 text-vc-accent mt-1 flex-shrink-0\" />\n            <div>\n              <p className=\"text-sm text-vc-text font-medium mb-2\">Key Insight</p>\n              <p className=\"text-xs text-vc-text-muted\">{insights.keyInsight}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Risk Factor */}\n        <div className=\"bg-vc-dark rounded-lg border border-vc-secondary/30 p-4\" data-testid=\"insight-risk\">\n          <div className=\"flex items-start space-x-2\">\n            <AlertTriangle className=\"h-4 w-4 text-vc-secondary mt-1 flex-shrink-0\" />\n            <div>\n              <p className=\"text-sm text-vc-text font-medium mb-2\">Risk Factor</p>\n              <p className=\"text-xs text-vc-text-muted\">{insights.riskFactor}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Opportunity */}\n        <div className=\"bg-vc-dark rounded-lg border border-green-500/30 p-4\" data-testid=\"insight-opportunity\">\n          <div className=\"flex items-start space-x-2\">\n            <TrendingUp className=\"h-4 w-4 text-green-400 mt-1 flex-shrink-0\" />\n            <div>\n              <p className=\"text-sm text-vc-text font-medium mb-2\">Opportunity</p>\n              <p className=\"text-xs text-vc-text-muted\">{insights.opportunity}</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2808},"client/src/components/ai-provider-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Eye, EyeOff, X, Link } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AIService } from \"@/lib/ai-service\";\nimport type { AIProvider } from \"@/types\";\n\ninterface AIProviderModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AIProviderModal({ isOpen, onClose }: AIProviderModalProps) {\n  const [selectedProvider, setSelectedProvider] = useState<'openai' | 'gemini' | 'grok'>('openai');\n  const [apiKey, setApiKey] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [isTestingConnection, setIsTestingConnection] = useState(false);\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: providers = [] } = useQuery({\n    queryKey: ['/api/ai-providers'],\n    queryFn: () => AIService.getProviders(),\n  });\n\n  const { data: activeProvider } = useQuery({\n    queryKey: ['/api/ai-providers/active'],\n    queryFn: () => AIService.getActiveProvider(),\n  });\n\n  useEffect(() => {\n    if (activeProvider) {\n      setSelectedProvider(activeProvider.provider);\n      setApiKey(activeProvider.apiKey);\n    }\n  }, [activeProvider]);\n\n  const saveProviderMutation = useMutation({\n    mutationFn: async (data: { provider: string; apiKey: string; isActive: boolean }) => {\n      // Check if provider already exists\n      const existingProvider = providers.find(p => p.provider === data.provider);\n      \n      if (existingProvider) {\n        return await AIService.updateProvider(existingProvider.id, {\n          apiKey: data.apiKey,\n          isActive: data.isActive\n        });\n      } else {\n        return await AIService.saveProvider({\n          provider: data.provider as any,\n          apiKey: data.apiKey,\n          isActive: data.isActive\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-providers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-providers/active'] });\n      toast({\n        title: \"Success\",\n        description: \"AI provider configuration saved successfully\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save AI provider configuration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestConnection = async () => {\n    if (!apiKey.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter an API key\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsTestingConnection(true);\n    try {\n      const isConnected = await AIService.testConnection(selectedProvider, apiKey);\n      \n      if (isConnected) {\n        toast({\n          title: \"Success\",\n          description: \"Connection test successful\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Connection test failed. Please check your API key.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Connection test failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsTestingConnection(false);\n    }\n  };\n\n  const handleSave = () => {\n    if (!apiKey.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter an API key\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveProviderMutation.mutate({\n      provider: selectedProvider,\n      apiKey: apiKey.trim(),\n      isActive: true\n    });\n  };\n\n  const handleClose = () => {\n    setApiKey('');\n    setShowPassword(false);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"bg-vc-card border-vc-border max-w-md text-vc-text\" data-testid=\"modal-ai-provider\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle className=\"text-lg font-semibold text-vc-text\">\n              AI Provider Configuration\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleClose}\n              className=\"text-vc-text-muted hover:text-vc-text\"\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <DialogDescription className=\"text-sm text-vc-text-muted\">\n            Configure your AI provider settings and API keys for business analysis.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Provider Selection */}\n          <div>\n            <Label className=\"text-sm font-medium text-vc-text mb-2\">AI Provider</Label>\n            <Select value={selectedProvider} onValueChange={(value: any) => setSelectedProvider(value)}>\n              <SelectTrigger className=\"w-full bg-vc-dark border-vc-border text-vc-text focus:border-vc-primary\" data-testid=\"select-provider\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent className=\"bg-vc-card border-vc-border\">\n                <SelectItem value=\"openai\" className=\"text-vc-text\">OpenAI GPT-4</SelectItem>\n                <SelectItem value=\"gemini\" className=\"text-vc-text\">Google Gemini 2.5 Pro</SelectItem>\n                <SelectItem value=\"grok\" className=\"text-vc-text\">xAI Grok 4</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* API Key Input */}\n          <div>\n            <Label className=\"text-sm font-medium text-vc-text mb-2\">API Key</Label>\n            <div className=\"relative\">\n              <Input\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Enter your API key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                className=\"w-full bg-vc-dark border-vc-border pr-10 text-vc-text focus:border-vc-primary\"\n                data-testid=\"input-api-key\"\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"absolute right-2 top-1/2 -translate-y-1/2 text-vc-text-muted hover:text-vc-text h-8 w-8\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"button-toggle-password\"\n              >\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </Button>\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-1\">\n              Your API key is stored locally and never shared\n            </p>\n          </div>\n\n          {/* Test Connection */}\n          <Button\n            variant=\"outline\"\n            className=\"w-full bg-vc-primary/20 border-vc-primary text-vc-primary hover:bg-vc-primary/30 transition-colors\"\n            onClick={handleTestConnection}\n            disabled={isTestingConnection || !apiKey.trim()}\n            data-testid=\"button-test-connection\"\n          >\n            <Link className=\"mr-2 h-4 w-4\" />\n            {isTestingConnection ? 'Testing...' : 'Test Connection'}\n          </Button>\n        </div>\n\n        <div className=\"flex space-x-3 mt-6\">\n          <Button\n            variant=\"outline\"\n            className=\"flex-1 bg-vc-border text-vc-text hover:bg-vc-border/80 transition-colors\"\n            onClick={handleClose}\n            data-testid=\"button-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            className=\"flex-1 bg-vc-primary hover:bg-vc-primary/80 text-white transition-colors shadow-neon\"\n            onClick={handleSave}\n            disabled={saveProviderMutation.isPending || !apiKey.trim()}\n            data-testid=\"button-save-configuration\"\n          >\n            {saveProviderMutation.isPending ? 'Saving...' : 'Save Configuration'}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8447},"client/src/components/analytics-charts.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { \n  BarChart, Bar, LineChart, Line, PieChart, Pie, RadarChart, Radar,\n  XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  Cell, PolarGrid, PolarAngleAxis, PolarRadiusAxis\n} from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { TrendingUp, Activity, Zap, Target } from \"lucide-react\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface AnalyticsChartsProps {\n  analyses: BusinessAnalysis[];\n}\n\nexport function AnalyticsCharts({ analyses }: AnalyticsChartsProps) {\n  const COLORS = ['#FF4500', '#DC143C', '#FFD700', '#20B2AA', '#9370DB'];\n\n  // Prepare data for score distribution\n  const scoreDistribution = [\n    { range: '0-2', count: analyses.filter(a => (a.overallScore || 0) <= 2).length },\n    { range: '3-4', count: analyses.filter(a => (a.overallScore || 0) > 2 && (a.overallScore || 0) <= 4).length },\n    { range: '5-6', count: analyses.filter(a => (a.overallScore || 0) > 4 && (a.overallScore || 0) <= 6).length },\n    { range: '7-8', count: analyses.filter(a => (a.overallScore || 0) > 6 && (a.overallScore || 0) <= 8).length },\n    { range: '9-10', count: analyses.filter(a => (a.overallScore || 0) > 8).length },\n  ];\n\n  // Prepare data for criteria comparison\n  const criteriaComparison = analyses.length > 0 ? [\n    {\n      criteria: 'Technical',\n      average: analyses.reduce((acc, a) => acc + (a.scoreDetails?.technicalComplexity?.score || 0), 0) / analyses.length,\n    },\n    {\n      criteria: 'Market',\n      average: analyses.reduce((acc, a) => acc + (a.scoreDetails?.marketOpportunity?.score || 0), 0) / analyses.length,\n    },\n    {\n      criteria: 'Competition',\n      average: analyses.reduce((acc, a) => acc + (a.scoreDetails?.competitiveLandscape?.score || 0), 0) / analyses.length,\n    },\n    {\n      criteria: 'Resources',\n      average: analyses.reduce((acc, a) => acc + (a.scoreDetails?.resourceRequirements?.score || 0), 0) / analyses.length,\n    },\n    {\n      criteria: 'Time',\n      average: analyses.reduce((acc, a) => acc + (a.scoreDetails?.timeToMarket?.score || 0), 0) / analyses.length,\n    },\n  ] : [];\n\n  // Prepare data for stage progress\n  const stageProgress = [\n    { stage: 'Discovery', count: analyses.filter(a => a.currentStage === 1).length },\n    { stage: 'Filter', count: analyses.filter(a => a.currentStage === 2).length },\n    { stage: 'MVP', count: analyses.filter(a => a.currentStage === 3).length },\n    { stage: 'Testing', count: analyses.filter(a => a.currentStage === 4).length },\n    { stage: 'Scaling', count: analyses.filter(a => a.currentStage === 5).length },\n    { stage: 'Automation', count: analyses.filter(a => a.currentStage === 6).length },\n  ];\n\n  // Prepare radar chart data for top analyses\n  const topAnalyses = analyses\n    .filter(a => a.scoreDetails)\n    .sort((a, b) => (b.overallScore || 0) - (a.overallScore || 0))\n    .slice(0, 3);\n\n  const radarData = topAnalyses.length > 0 ? [\n    'technicalComplexity',\n    'marketOpportunity',\n    'competitiveLandscape',\n    'resourceRequirements',\n    'timeToMarket'\n  ].map(key => ({\n    criteria: key.replace(/([A-Z])/g, ' $1').trim(),\n    ...topAnalyses.reduce((acc, analysis, index) => ({\n      ...acc,\n      [`business${index + 1}`]: analysis.scoreDetails?.[key as keyof typeof analysis.scoreDetails]?.score || 0\n    }), {})\n  })) : [];\n\n  if (analyses.length === 0) {\n    return (\n      <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-analytics\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-vc-text\">Analytics Dashboard</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-12\">\n            <div className=\"text-5xl mb-4\">📊</div>\n            <p className=\"text-vc-text-muted\">No data available yet</p>\n            <p className=\"text-vc-text-muted text-sm mt-1\">\n              Start analyzing businesses to see insights\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"analytics-charts\">\n      {/* Score Distribution */}\n      <Card className=\"bg-vc-card border-vc-border\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n            <TrendingUp className=\"mr-2 h-5 w-5 text-vc-primary\" />\n            Score Distribution\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ResponsiveContainer width=\"100%\" height={200}>\n            <BarChart data={scoreDistribution}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n              <XAxis dataKey=\"range\" stroke=\"#999\" />\n              <YAxis stroke=\"#999\" />\n              <Tooltip \n                contentStyle={{ backgroundColor: '#1A1A1A', border: '1px solid #333' }}\n                labelStyle={{ color: '#FFD700' }}\n              />\n              <Bar dataKey=\"count\" fill=\"#FF4500\">\n                {scoreDistribution.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Bar>\n            </BarChart>\n          </ResponsiveContainer>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Criteria Comparison */}\n        <Card className=\"bg-vc-card border-vc-border\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n              <Activity className=\"mr-2 h-5 w-5 text-vc-secondary\" />\n              Average Scores by Criteria\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <LineChart data={criteriaComparison}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#333\" />\n                <XAxis dataKey=\"criteria\" stroke=\"#999\" />\n                <YAxis domain={[0, 10]} stroke=\"#999\" />\n                <Tooltip \n                  contentStyle={{ backgroundColor: '#1A1A1A', border: '1px solid #333' }}\n                  labelStyle={{ color: '#FFD700' }}\n                  formatter={(value: number) => value.toFixed(1)}\n                />\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"average\" \n                  stroke=\"#DC143C\" \n                  strokeWidth={2}\n                  dot={{ fill: '#FFD700', r: 4 }}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        {/* Stage Progress */}\n        <Card className=\"bg-vc-card border-vc-border\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n              <Zap className=\"mr-2 h-5 w-5 text-vc-accent\" />\n              Workflow Stage Distribution\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={200}>\n              <PieChart>\n                <Pie\n                  data={stageProgress.filter(s => s.count > 0)}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  label={({ stage, count }) => `${stage}: ${count}`}\n                  outerRadius={70}\n                  fill=\"#8884d8\"\n                  dataKey=\"count\"\n                >\n                  {stageProgress.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  contentStyle={{ backgroundColor: '#1A1A1A', border: '1px solid #333' }}\n                  labelStyle={{ color: '#FFD700' }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Radar Comparison for Top 3 */}\n      {topAnalyses.length > 0 && (\n        <Card className=\"bg-vc-card border-vc-border\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n              <Target className=\"mr-2 h-5 w-5 text-vc-primary\" />\n              Top Businesses Comparison\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <RadarChart data={radarData}>\n                <PolarGrid stroke=\"#333\" />\n                <PolarAngleAxis dataKey=\"criteria\" stroke=\"#999\" />\n                <PolarRadiusAxis angle={90} domain={[0, 10]} stroke=\"#999\" />\n                {topAnalyses.map((analysis, index) => (\n                  <Radar\n                    key={index}\n                    name={analysis.businessModel || `Business ${index + 1}`}\n                    dataKey={`business${index + 1}`}\n                    stroke={COLORS[index]}\n                    fill={COLORS[index]}\n                    fillOpacity={0.3}\n                  />\n                ))}\n                <Tooltip \n                  contentStyle={{ backgroundColor: '#1A1A1A', border: '1px solid #333' }}\n                  labelStyle={{ color: '#FFD700' }}\n                />\n                <Legend \n                  wrapperStyle={{ color: '#999' }}\n                />\n              </RadarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":9467},"client/src/components/batch-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Upload, FileText, Play, AlertCircle, CheckCircle2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AIService } from \"@/lib/ai-service\";\n\ninterface BatchAnalysisProps {\n  onAnalysisComplete?: (analysisId: string) => void;\n}\n\nexport function BatchAnalysis({ onAnalysisComplete }: BatchAnalysisProps) {\n  const [urls, setUrls] = useState<string>(\"\");\n  const [processingUrls, setProcessingUrls] = useState<string[]>([]);\n  const [completedUrls, setCompletedUrls] = useState<{ url: string; id: string; success: boolean }[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const { toast } = useToast();\n\n  const analyzeUrlMutation = useMutation({\n    mutationFn: async (url: string) => {\n      const response = await apiRequest('/api/business-analyses', 'POST', {\n        url,\n        businessModel: 'E-commerce Platform',\n        revenueStream: 'Subscription-based',\n        targetMarket: 'B2B',\n        overallScore: 7,\n        scoreDetails: {\n          technicalComplexity: { score: 6, reasoning: 'Moderate complexity' },\n          marketOpportunity: { score: 8, reasoning: 'Large market' },\n          competitiveLandscape: { score: 7, reasoning: 'Competitive but viable' },\n          resourceRequirements: { score: 7, reasoning: 'Moderate resources needed' },\n          timeToMarket: { score: 8, reasoning: 'Quick to launch' }\n        },\n        aiInsights: {\n          keyInsight: 'Strong market opportunity',\n          riskFactor: 'Competition is increasing',\n          opportunity: 'Niche market potential'\n        }\n      });\n      \n      return { url, id: response.id };\n    },\n    onSuccess: (data) => {\n      setCompletedUrls(prev => [...prev, { ...data, success: true }]);\n      queryClient.invalidateQueries({ queryKey: ['/api/business-analyses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/stats'] });\n    },\n    onError: (error, url) => {\n      setCompletedUrls(prev => [...prev, { url, id: '', success: false }]);\n      console.error(`Failed to analyze ${url}:`, error);\n    },\n  });\n\n  const handleBatchAnalysis = async () => {\n    const urlList = urls\n      .split('\\n')\n      .map(url => url.trim())\n      .filter(url => url && (url.startsWith('http://') || url.startsWith('https://')));\n\n    if (urlList.length === 0) {\n      toast({\n        title: \"Invalid URLs\",\n        description: \"Please enter valid URLs starting with http:// or https://\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (urlList.length > 10) {\n      toast({\n        title: \"Too Many URLs\",\n        description: \"Please limit batch analysis to 10 URLs at a time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsProcessing(true);\n    setProcessingUrls(urlList);\n    setCompletedUrls([]);\n\n    for (const url of urlList) {\n      try {\n        await analyzeUrlMutation.mutateAsync(url);\n      } catch (error) {\n        // Error handled in mutation\n      }\n    }\n\n    setIsProcessing(false);\n    toast({\n      title: \"Batch Analysis Complete\",\n      description: `Analyzed ${completedUrls.filter(c => c.success).length} of ${urlList.length} URLs successfully`,\n    });\n\n    // Select the first successful analysis\n    const firstSuccess = completedUrls.find(c => c.success);\n    if (firstSuccess && onAnalysisComplete) {\n      onAnalysisComplete(firstSuccess.id);\n    }\n  };\n\n  const progress = processingUrls.length > 0 \n    ? (completedUrls.length / processingUrls.length) * 100 \n    : 0;\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-batch-analysis\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n          <Upload className=\"mr-2 h-5 w-5 text-vc-primary\" />\n          Batch Analysis\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <label className=\"text-sm text-vc-text-muted mb-2 block\">\n            Enter URLs (one per line, max 10)\n          </label>\n          <Textarea\n            value={urls}\n            onChange={(e) => setUrls(e.target.value)}\n            placeholder=\"https://example.com&#10;https://another-site.com&#10;https://third-site.com\"\n            className=\"bg-vc-dark border-vc-border text-vc-text placeholder:text-vc-text-muted h-32 font-mono text-sm\"\n            disabled={isProcessing}\n            data-testid=\"input-batch-urls\"\n          />\n        </div>\n\n        {isProcessing && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-vc-text-muted\">Processing...</span>\n              <span className=\"text-sm text-vc-accent font-medium\">\n                {completedUrls.length}/{processingUrls.length}\n              </span>\n            </div>\n            <Progress value={progress} className=\"h-2\" />\n          </div>\n        )}\n\n        {completedUrls.length > 0 && (\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-medium text-vc-text\">Results:</p>\n            <div className=\"space-y-1 max-h-40 overflow-y-auto\">\n              {completedUrls.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-2 bg-vc-dark rounded border border-vc-border/50\"\n                  data-testid={`batch-result-${index}`}\n                >\n                  <span className=\"text-xs text-vc-text-muted truncate flex-1 mr-2 font-mono\">\n                    {result.url}\n                  </span>\n                  {result.success ? (\n                    <CheckCircle2 className=\"h-4 w-4 text-green-400\" />\n                  ) : (\n                    <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <Button\n          onClick={handleBatchAnalysis}\n          disabled={isProcessing || !urls.trim()}\n          className=\"w-full bg-gradient-to-r from-vc-primary to-vc-secondary hover:opacity-90\"\n          data-testid=\"button-start-batch\"\n        >\n          {isProcessing ? (\n            <>\n              <FileText className=\"mr-2 h-4 w-4 animate-pulse\" />\n              Analyzing {completedUrls.length + 1} of {processingUrls.length}...\n            </>\n          ) : (\n            <>\n              <Play className=\"mr-2 h-4 w-4\" />\n              Start Batch Analysis\n            </>\n          )}\n        </Button>\n\n        {!isProcessing && urls.trim() && (\n          <p className=\"text-xs text-vc-text-muted text-center\">\n            {urls.split('\\n').filter(u => u.trim()).length} URLs ready for analysis\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7193},"client/src/components/business-comparison.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowUpDown, Percent, TrendingUp, Clock, DollarSign, Users } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface BusinessComparisonProps {\n  analyses: BusinessAnalysis[];\n}\n\nexport function BusinessComparison({ analyses }: BusinessComparisonProps) {\n  const [selectedAnalyses, setSelectedAnalyses] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState<'score' | 'date' | 'stage'>('score');\n\n  const toggleSelection = (id: string) => {\n    setSelectedAnalyses(prev => \n      prev.includes(id) \n        ? prev.filter(a => a !== id)\n        : [...prev, id]\n    );\n  };\n\n  const selectedItems = analyses.filter(a => selectedAnalyses.includes(a.id));\n\n  const sortedAnalyses = [...analyses].sort((a, b) => {\n    switch (sortBy) {\n      case 'score':\n        return (b.overallScore || 0) - (a.overallScore || 0);\n      case 'date':\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n      case 'stage':\n        return (b.currentStage || 1) - (a.currentStage || 1);\n      default:\n        return 0;\n    }\n  });\n\n  const getAverageScore = (items: BusinessAnalysis[], key: string) => {\n    const scores = items\n      .filter(item => item.scoreDetails)\n      .map(item => {\n        const detail = item.scoreDetails![key as keyof typeof item.scoreDetails] as any;\n        return detail?.score || 0;\n      });\n    \n    if (scores.length === 0) return 0;\n    return Math.round((scores.reduce((a, b) => a + b, 0) / scores.length) * 10) / 10;\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 8) return 'text-green-400';\n    if (score >= 6) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  if (analyses.length < 2) {\n    return (\n      <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-business-comparison\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-vc-text\">Business Comparison</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">📊</div>\n            <p className=\"text-vc-text-muted\">Need at least 2 analyses to compare</p>\n            <p className=\"text-vc-text-muted text-sm mt-1\">\n              Analyze more businesses to unlock comparison features\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-business-comparison\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-vc-text\">Business Comparison</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSortBy('score')}\n              className={`border-vc-border ${sortBy === 'score' ? 'bg-vc-primary/20 border-vc-primary' : ''}`}\n              data-testid=\"button-sort-score\"\n            >\n              <ArrowUpDown className=\"h-3 w-3 mr-1\" />\n              Score\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSortBy('date')}\n              className={`border-vc-border ${sortBy === 'date' ? 'bg-vc-primary/20 border-vc-primary' : ''}`}\n              data-testid=\"button-sort-date\"\n            >\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Date\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSortBy('stage')}\n              className={`border-vc-border ${sortBy === 'stage' ? 'bg-vc-primary/20 border-vc-primary' : ''}`}\n              data-testid=\"button-sort-stage\"\n            >\n              <TrendingUp className=\"h-3 w-3 mr-1\" />\n              Stage\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Selection List */}\n        <div className=\"space-y-2 max-h-60 overflow-y-auto\">\n          {sortedAnalyses.map((analysis) => (\n            <div\n              key={analysis.id}\n              className={`flex items-center space-x-3 p-3 bg-vc-dark rounded-lg border ${\n                selectedAnalyses.includes(analysis.id) \n                  ? 'border-vc-primary bg-vc-primary/10' \n                  : 'border-vc-border/50'\n              } hover:border-vc-border transition-colors cursor-pointer`}\n              onClick={() => toggleSelection(analysis.id)}\n              data-testid={`comparison-item-${analysis.id}`}\n            >\n              <Checkbox\n                checked={selectedAnalyses.includes(analysis.id)}\n                onCheckedChange={() => toggleSelection(analysis.id)}\n                className=\"border-vc-border data-[state=checked]:bg-vc-primary\"\n              />\n              <div className=\"flex-1\">\n                <p className=\"text-vc-text font-medium text-sm\">\n                  {analysis.businessModel || 'Business Analysis'}\n                </p>\n                <p className=\"text-vc-text-muted text-xs font-mono truncate\">\n                  {analysis.url}\n                </p>\n              </div>\n              <Badge className={`${\n                (analysis.overallScore || 0) >= 7 \n                  ? 'bg-green-900/50 text-green-300' \n                  : (analysis.overallScore || 0) >= 5 \n                  ? 'bg-yellow-900/50 text-yellow-300' \n                  : 'bg-red-900/50 text-red-300'\n              } text-xs`}>\n                {analysis.overallScore}/10\n              </Badge>\n            </div>\n          ))}\n        </div>\n\n        {/* Comparison Results */}\n        {selectedItems.length >= 2 && (\n          <div className=\"border-t border-vc-border pt-4\">\n            <h3 className=\"text-sm font-semibold text-vc-text mb-3\">\n              Comparing {selectedItems.length} Businesses\n            </h3>\n            \n            {/* Average Scores Grid */}\n            <div className=\"grid grid-cols-2 gap-3 mb-4\">\n              <div className=\"bg-vc-dark rounded-lg p-3 border border-vc-border/50\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-xs text-vc-text-muted\">Avg. Overall Score</span>\n                  <Percent className=\"h-3 w-3 text-vc-text-muted\" />\n                </div>\n                <p className={`text-xl font-bold ${getScoreColor(\n                  selectedItems.reduce((acc, item) => acc + (item.overallScore || 0), 0) / selectedItems.length\n                )}`}>\n                  {Math.round((selectedItems.reduce((acc, item) => acc + (item.overallScore || 0), 0) / selectedItems.length) * 10) / 10}\n                </p>\n              </div>\n\n              <div className=\"bg-vc-dark rounded-lg p-3 border border-vc-border/50\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-xs text-vc-text-muted\">Avg. Tech Complexity</span>\n                  <TrendingUp className=\"h-3 w-3 text-vc-text-muted\" />\n                </div>\n                <p className={`text-xl font-bold ${getScoreColor(\n                  getAverageScore(selectedItems, 'technicalComplexity')\n                )}`}>\n                  {getAverageScore(selectedItems, 'technicalComplexity')}\n                </p>\n              </div>\n\n              <div className=\"bg-vc-dark rounded-lg p-3 border border-vc-border/50\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-xs text-vc-text-muted\">Avg. Market Opportunity</span>\n                  <Users className=\"h-3 w-3 text-vc-text-muted\" />\n                </div>\n                <p className={`text-xl font-bold ${getScoreColor(\n                  getAverageScore(selectedItems, 'marketOpportunity')\n                )}`}>\n                  {getAverageScore(selectedItems, 'marketOpportunity')}\n                </p>\n              </div>\n\n              <div className=\"bg-vc-dark rounded-lg p-3 border border-vc-border/50\">\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span className=\"text-xs text-vc-text-muted\">Avg. Time to Market</span>\n                  <Clock className=\"h-3 w-3 text-vc-text-muted\" />\n                </div>\n                <p className={`text-xl font-bold ${getScoreColor(\n                  getAverageScore(selectedItems, 'timeToMarket')\n                )}`}>\n                  {getAverageScore(selectedItems, 'timeToMarket')}\n                </p>\n              </div>\n            </div>\n\n            {/* Best Candidate */}\n            <div className=\"bg-gradient-to-r from-vc-primary/20 to-vc-secondary/20 rounded-lg p-3 border border-vc-primary/30\">\n              <p className=\"text-xs text-vc-text-muted mb-1\">Best Overall Candidate</p>\n              <p className=\"text-sm font-semibold text-vc-text\">\n                {selectedItems.reduce((best, current) => \n                  (current.overallScore || 0) > (best.overallScore || 0) ? current : best\n                ).businessModel || 'Unknown'}\n              </p>\n              <p className=\"text-xs text-vc-accent mt-1\">\n                Score: {selectedItems.reduce((best, current) => \n                  (current.overallScore || 0) > (best.overallScore || 0) ? current : best\n                ).overallScore}/10\n              </p>\n            </div>\n          </div>\n        )}\n\n        {selectedItems.length === 1 && (\n          <div className=\"text-center py-4 border-t border-vc-border\">\n            <p className=\"text-vc-text-muted text-sm\">\n              Select at least 2 businesses to compare\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10088},"client/src/components/export-analysis.tsx":{"content":"import { useState } from \"react\";\nimport { Download, FileText, FileSpreadsheet, FileJson } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface ExportAnalysisProps {\n  analysis: BusinessAnalysis;\n  stages?: any[];\n}\n\nexport function ExportAnalysis({ analysis, stages = [] }: ExportAnalysisProps) {\n  const [isExporting, setIsExporting] = useState(false);\n  const { toast } = useToast();\n\n  const generatePDF = () => {\n    // Create HTML content for PDF\n    const htmlContent = `\n      <html>\n        <head>\n          <style>\n            body { font-family: Arial, sans-serif; padding: 20px; }\n            h1 { color: #FF4500; }\n            h2 { color: #DC143C; margin-top: 20px; }\n            h3 { color: #333; margin-top: 15px; }\n            .score { background: #f0f0f0; padding: 10px; border-radius: 5px; margin: 10px 0; }\n            .insight { background: #fff3e0; padding: 10px; border-radius: 5px; margin: 10px 0; }\n            table { width: 100%; border-collapse: collapse; margin: 10px 0; }\n            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n            th { background-color: #f2f2f2; }\n          </style>\n        </head>\n        <body>\n          <h1>Business Analysis Report</h1>\n          <h2>Business Overview</h2>\n          <p><strong>URL:</strong> ${analysis.url}</p>\n          <p><strong>Business Model:</strong> ${analysis.businessModel || 'N/A'}</p>\n          <p><strong>Revenue Stream:</strong> ${analysis.revenueStream || 'N/A'}</p>\n          <p><strong>Target Market:</strong> ${analysis.targetMarket || 'N/A'}</p>\n          <div class=\"score\">\n            <h3>Overall Score: ${analysis.overallScore}/10</h3>\n          </div>\n          \n          ${analysis.scoreDetails ? `\n            <h2>Detailed Scoring</h2>\n            <table>\n              <tr>\n                <th>Criteria</th>\n                <th>Score</th>\n                <th>Reasoning</th>\n              </tr>\n              <tr>\n                <td>Technical Complexity</td>\n                <td>${analysis.scoreDetails.technicalComplexity.score}/10</td>\n                <td>${analysis.scoreDetails.technicalComplexity.reasoning}</td>\n              </tr>\n              <tr>\n                <td>Market Opportunity</td>\n                <td>${analysis.scoreDetails.marketOpportunity.score}/10</td>\n                <td>${analysis.scoreDetails.marketOpportunity.reasoning}</td>\n              </tr>\n              <tr>\n                <td>Competitive Landscape</td>\n                <td>${analysis.scoreDetails.competitiveLandscape.score}/10</td>\n                <td>${analysis.scoreDetails.competitiveLandscape.reasoning}</td>\n              </tr>\n              <tr>\n                <td>Resource Requirements</td>\n                <td>${analysis.scoreDetails.resourceRequirements.score}/10</td>\n                <td>${analysis.scoreDetails.resourceRequirements.reasoning}</td>\n              </tr>\n              <tr>\n                <td>Time to Market</td>\n                <td>${analysis.scoreDetails.timeToMarket.score}/10</td>\n                <td>${analysis.scoreDetails.timeToMarket.reasoning}</td>\n              </tr>\n            </table>\n          ` : ''}\n          \n          ${analysis.aiInsights ? `\n            <h2>AI Insights</h2>\n            <div class=\"insight\">\n              <h3>Key Insight</h3>\n              <p>${analysis.aiInsights.keyInsight}</p>\n            </div>\n            <div class=\"insight\">\n              <h3>Risk Factor</h3>\n              <p>${analysis.aiInsights.riskFactor}</p>\n            </div>\n            <div class=\"insight\">\n              <h3>Opportunity</h3>\n              <p>${analysis.aiInsights.opportunity}</p>\n            </div>\n          ` : ''}\n          \n          <p style=\"margin-top: 40px; text-align: center; color: #999;\">\n            Generated by VentureClone AI on ${new Date().toLocaleString()}\n          </p>\n        </body>\n      </html>\n    `;\n\n    // Create a blob and download\n    const blob = new Blob([htmlContent], { type: 'text/html' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `analysis-${analysis.id.slice(0, 8)}.html`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const generateCSV = () => {\n    const csvContent = [\n      ['Field', 'Value'],\n      ['URL', analysis.url],\n      ['Business Model', analysis.businessModel || ''],\n      ['Revenue Stream', analysis.revenueStream || ''],\n      ['Target Market', analysis.targetMarket || ''],\n      ['Overall Score', analysis.overallScore?.toString() || ''],\n      ['Technical Complexity Score', analysis.scoreDetails?.technicalComplexity.score.toString() || ''],\n      ['Market Opportunity Score', analysis.scoreDetails?.marketOpportunity.score.toString() || ''],\n      ['Competitive Landscape Score', analysis.scoreDetails?.competitiveLandscape.score.toString() || ''],\n      ['Resource Requirements Score', analysis.scoreDetails?.resourceRequirements.score.toString() || ''],\n      ['Time to Market Score', analysis.scoreDetails?.timeToMarket.score.toString() || ''],\n      ['Key Insight', analysis.aiInsights?.keyInsight || ''],\n      ['Risk Factor', analysis.aiInsights?.riskFactor || ''],\n      ['Opportunity', analysis.aiInsights?.opportunity || ''],\n      ['Current Stage', analysis.currentStage.toString()],\n      ['Created At', new Date(analysis.createdAt).toLocaleString()],\n    ].map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `analysis-${analysis.id.slice(0, 8)}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const generateJSON = () => {\n    const exportData = {\n      analysis,\n      stages,\n      exportedAt: new Date().toISOString(),\n      version: '1.0.0'\n    };\n\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `analysis-${analysis.id.slice(0, 8)}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const handleExport = async (format: 'pdf' | 'csv' | 'json') => {\n    setIsExporting(true);\n    try {\n      switch (format) {\n        case 'pdf':\n          generatePDF();\n          toast({\n            title: \"Export Successful\",\n            description: \"Analysis exported as HTML report\",\n          });\n          break;\n        case 'csv':\n          generateCSV();\n          toast({\n            title: \"Export Successful\",\n            description: \"Analysis exported as CSV\",\n          });\n          break;\n        case 'json':\n          generateJSON();\n          toast({\n            title: \"Export Successful\",\n            description: \"Analysis exported as JSON\",\n          });\n          break;\n      }\n    } catch (error) {\n      toast({\n        title: \"Export Failed\",\n        description: \"Failed to export analysis\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          className=\"bg-vc-card border-vc-border text-vc-text hover:border-vc-primary\"\n          disabled={isExporting}\n          data-testid=\"button-export-menu\"\n        >\n          <Download className=\"mr-2 h-4 w-4\" />\n          {isExporting ? 'Exporting...' : 'Export'}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"bg-vc-card border-vc-border\">\n        <DropdownMenuItem\n          onClick={() => handleExport('pdf')}\n          className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n          data-testid=\"export-pdf\"\n        >\n          <FileText className=\"mr-2 h-4 w-4\" />\n          Export as Report (HTML)\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => handleExport('csv')}\n          className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n          data-testid=\"export-csv\"\n        >\n          <FileSpreadsheet className=\"mr-2 h-4 w-4\" />\n          Export as CSV\n        </DropdownMenuItem>\n        <DropdownMenuItem\n          onClick={() => handleExport('json')}\n          className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n          data-testid=\"export-json\"\n        >\n          <FileJson className=\"mr-2 h-4 w-4\" />\n          Export as JSON\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":9033},"client/src/components/index.ts":{"content":"\nexport { AIAssistant } from './ai-assistant';\nexport { AIInsightsPanel } from './ai-insights-panel';\nexport { AIProviderModal } from './ai-provider-modal';\nexport { AnalyticsCharts } from './analytics-charts';\nexport { BatchAnalysis } from './batch-analysis';\nexport { BusinessComparison } from './business-comparison';\nexport { ExportAnalysis } from './export-analysis';\nexport { ProgressTracker } from './progress-tracker';\nexport { QuickStats } from './quick-stats';\nexport { RecentAnalyses } from './recent-analyses';\nexport { SearchFilter } from './search-filter';\nexport { UrlAnalysisInput } from './url-analysis-input';\nexport { WorkflowTabs } from './workflow-tabs';\n\n// Re-export UI components for convenience\nexport * from './ui';\n","size_bytes":742},"client/src/components/progress-tracker.tsx":{"content":"import { CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface ProgressTrackerProps {\n  analysis: BusinessAnalysis;\n}\n\nconst STAGES = [\n  { number: 1, name: 'Discovery & Selection' },\n  { number: 2, name: 'Lazy-Entrepreneur Filter' },\n  { number: 3, name: 'MVP Launch Planning' },\n  { number: 4, name: 'Demand Testing' },\n  { number: 5, name: 'Scaling & Growth' },\n  { number: 6, name: 'AI Automation' },\n];\n\nexport function ProgressTracker({ analysis }: ProgressTrackerProps) {\n  const currentStage = analysis.currentStage || 1;\n\n  const getStageStatus = (stageNumber: number) => {\n    if (stageNumber < currentStage) return 'completed';\n    if (stageNumber === currentStage) return 'current';\n    return 'pending';\n  };\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-progress-tracker\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-vc-text\">Progress Tracker</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {STAGES.map((stage) => {\n          const status = getStageStatus(stage.number);\n          \n          return (\n            <div key={stage.number} className=\"flex items-center space-x-3\" data-testid={`progress-stage-${stage.number}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                status === 'completed' \n                  ? 'bg-vc-primary' \n                  : status === 'current'\n                  ? 'bg-vc-accent'\n                  : 'bg-vc-border'\n              }`}>\n                {status === 'completed' ? (\n                  <CheckCircle className=\"h-4 w-4 text-white\" />\n                ) : (\n                  <span className={`text-xs font-semibold ${\n                    status === 'current' ? 'text-vc-dark' : 'text-vc-text-muted'\n                  }`}>\n                    {stage.number}\n                  </span>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <p className={`text-sm font-medium ${\n                  status === 'pending' ? 'text-vc-text-muted' : 'text-vc-text'\n                }`}>\n                  {stage.name}\n                </p>\n                <p className=\"text-xs text-vc-text-muted\">\n                  {status === 'completed' ? 'Completed' : \n                   status === 'current' ? 'In Progress' : 'Pending'}\n                </p>\n              </div>\n            </div>\n          );\n        })}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2611},"client/src/components/quick-stats.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, Target, Clock, Zap } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { QuickStats as QuickStatsType } from \"@/types\";\n\nexport function QuickStats() {\n  const { data: stats, isLoading, error } = useQuery({\n    queryKey: ['/api/stats'],\n    queryFn: async (): Promise<QuickStatsType> => {\n      const response = await fetch('/api/stats');\n      if (!response.ok) {\n        throw new Error('Failed to fetch stats');\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const statsItems = [\n    {\n      key: 'totalAnalyses',\n      label: 'Total Analyses',\n      icon: TrendingUp,\n      value: stats?.totalAnalyses || 0,\n      color: 'text-vc-text',\n    },\n    {\n      key: 'strongCandidates',\n      label: 'Strong Candidates',\n      icon: Target,\n      value: stats?.strongCandidates || 0,\n      color: 'text-green-400',\n    },\n    {\n      key: 'inProgress',\n      label: 'In Progress',\n      icon: Clock,\n      value: stats?.inProgress || 0,\n      color: 'text-vc-accent',\n    },\n    {\n      key: 'aiQueries',\n      label: 'AI Queries Used',\n      icon: Zap,\n      value: stats?.aiQueries || 0,\n      color: 'text-vc-text',\n    },\n  ];\n\n  const formatNumber = (num: number) => {\n    if (num >= 1000000) {\n      return `${(num / 1000000).toFixed(1)}M`;\n    }\n    if (num >= 1000) {\n      return `${(num / 1000).toFixed(1)}K`;\n    }\n    return num.toLocaleString();\n  };\n\n  if (error) {\n    return (\n      <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-quick-stats\">\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-vc-text\">Quick Stats</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-4\">\n            <p className=\"text-vc-text-muted text-sm\">Failed to load stats</p>\n            <p className=\"text-xs text-vc-text-muted mt-1\">\n              Please try refreshing the page\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-quick-stats\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-semibold text-vc-text\">Quick Stats</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {statsItems.map((item) => {\n          const Icon = item.icon;\n          const displayValue = isLoading ? '-' : formatNumber(item.value);\n          \n          return (\n            <div\n              key={item.key}\n              className=\"flex justify-between items-center\"\n              data-testid={`stat-${item.key}`}\n            >\n              <div className=\"flex items-center space-x-2\">\n                <Icon className={`h-4 w-4 ${item.color}`} />\n                <span className=\"text-vc-text-muted text-sm\">{item.label}</span>\n              </div>\n              <span className={`font-semibold ${item.color} ${isLoading ? 'animate-pulse' : ''}`}>\n                {displayValue}\n              </span>\n            </div>\n          );\n        })}\n\n        {/* Progress indicator for AI queries if applicable */}\n        {stats && stats.aiQueries > 0 && (\n          <div className=\"pt-2 border-t border-vc-border/50\">\n            <div className=\"flex justify-between items-center text-xs text-vc-text-muted mb-1\">\n              <span>API Usage</span>\n              <span>{Math.min(100, Math.round((stats.aiQueries / 10000) * 100))}%</span>\n            </div>\n            <div className=\"w-full bg-vc-border rounded-full h-1\">\n              <div\n                className=\"bg-vc-primary h-1 rounded-full transition-all duration-300\"\n                style={{\n                  width: `${Math.min(100, (stats.aiQueries / 10000) * 100)}%`,\n                }}\n              ></div>\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-1\">\n              Monthly quota usage\n            </p>\n          </div>\n        )}\n\n        {/* Quick insights based on stats */}\n        {stats && stats.totalAnalyses > 0 && (\n          <div className=\"pt-2 border-t border-vc-border/50\">\n            <div className=\"text-xs text-vc-text-muted space-y-1\">\n              {stats.strongCandidates > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-1.5 h-1.5 bg-green-400 rounded-full\"></div>\n                  <span>\n                    {Math.round((stats.strongCandidates / stats.totalAnalyses) * 100)}% success rate\n                  </span>\n                </div>\n              )}\n              {stats.inProgress > 0 && (\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-1.5 h-1.5 bg-vc-accent rounded-full animate-pulse\"></div>\n                  <span>\n                    {stats.inProgress} project{stats.inProgress !== 1 ? 's' : ''} in development\n                  </span>\n                </div>\n              )}\n              {stats.totalAnalyses >= 10 && (\n                <div className=\"flex items-center space-x-1\">\n                  <div className=\"w-1.5 h-1.5 bg-vc-primary rounded-full\"></div>\n                  <span>Active researcher 🚀</span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Empty state for new users */}\n        {!isLoading && (!stats || stats.totalAnalyses === 0) && (\n          <div className=\"text-center py-4 border-t border-vc-border/50\">\n            <div className=\"text-2xl mb-2\">🚀</div>\n            <p className=\"text-vc-text-muted text-sm\">\n              Start analyzing businesses to see your stats\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5809},"client/src/components/recent-analyses.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ArrowRight, ExternalLink } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface RecentAnalysesProps {\n  analyses: BusinessAnalysis[];\n  onAnalysisSelect: (analysis: BusinessAnalysis) => void;\n}\n\nexport function RecentAnalyses({ analyses, onAnalysisSelect }: RecentAnalysesProps) {\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInMs = now.getTime() - new Date(date).getTime();\n    const diffInHours = diffInMs / (1000 * 60 * 60);\n    const diffInDays = diffInMs / (1000 * 60 * 60 * 24);\n\n    if (diffInHours < 1) {\n      const minutes = Math.floor(diffInMs / (1000 * 60));\n      return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;\n    } else if (diffInHours < 24) {\n      const hours = Math.floor(diffInHours);\n      return `${hours} hour${hours !== 1 ? 's' : ''} ago`;\n    } else if (diffInDays < 7) {\n      const days = Math.floor(diffInDays);\n      return `${days} day${days !== 1 ? 's' : ''} ago`;\n    } else {\n      return new Date(date).toLocaleDateString();\n    }\n  };\n\n  const getBusinessIcon = (businessModel?: string) => {\n    if (!businessModel) return '🏢';\n    \n    const model = businessModel.toLowerCase();\n    if (model.includes('saas') || model.includes('software')) return '💻';\n    if (model.includes('ecommerce') || model.includes('marketplace')) return '🛒';\n    if (model.includes('social') || model.includes('network')) return '👥';\n    if (model.includes('education') || model.includes('learning')) return '📚';\n    if (model.includes('finance') || model.includes('fintech')) return '💳';\n    if (model.includes('health') || model.includes('medical')) return '🏥';\n    if (model.includes('media') || model.includes('content')) return '📺';\n    return '🏢';\n  };\n\n  const getScoreColor = (score?: number) => {\n    if (!score) return 'text-vc-text-muted';\n    if (score >= 7) return 'text-green-400';\n    if (score >= 5) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getScoreBadgeColor = (score?: number) => {\n    if (!score) return 'bg-vc-border text-vc-text-muted';\n    if (score >= 7) return 'bg-green-900/50 text-green-300';\n    if (score >= 5) return 'bg-yellow-900/50 text-yellow-300';\n    return 'bg-red-900/50 text-red-300';\n  };\n\n  if (!analyses || analyses.length === 0) {\n    return (\n      <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-recent-analyses\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg font-semibold text-vc-text\">Recent Analyses</CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <div className=\"text-4xl mb-4\">📊</div>\n            <p className=\"text-vc-text-muted\">No analyses yet</p>\n            <p className=\"text-vc-text-muted text-sm mt-1\">\n              Start by analyzing a business URL above\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Show most recent 5 analyses\n  const recentAnalyses = analyses.slice(0, 5);\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-recent-analyses\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold text-vc-text\">Recent Analyses</CardTitle>\n          {analyses.length > 5 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-vc-text-muted hover:text-vc-text transition-colors\"\n              data-testid=\"button-view-all-analyses\"\n            >\n              <ExternalLink className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        {recentAnalyses.map((analysis) => (\n          <div\n            key={analysis.id}\n            className=\"flex items-center justify-between p-3 bg-vc-dark rounded-lg border border-vc-border/50 hover:border-vc-border transition-colors cursor-pointer\"\n            onClick={() => onAnalysisSelect(analysis)}\n            data-testid={`analysis-item-${analysis.id}`}\n          >\n            <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <span className=\"text-lg\">\n                  {getBusinessIcon(analysis.businessModel)}\n                </span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <p className=\"text-vc-text font-medium truncate\">\n                    {analysis.businessModel || 'Business Analysis'}\n                  </p>\n                  {analysis.overallScore && (\n                    <Badge className={`${getScoreBadgeColor(analysis.overallScore)} text-xs font-medium`}>\n                      {analysis.overallScore}/10\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <p className=\"text-vc-text-muted text-sm truncate\">\n                    {analysis.targetMarket || analysis.revenueStream || 'No details'}\n                  </p>\n                  <span className=\"text-vc-text-muted\">•</span>\n                  <span className=\"text-xs text-vc-text-muted whitespace-nowrap\">\n                    {formatTimeAgo(analysis.createdAt)}\n                  </span>\n                </div>\n                <p className=\"text-xs text-vc-text-muted truncate mt-1 font-mono\">\n                  {analysis.url}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2 flex-shrink-0 ml-3\">\n              <div className=\"flex items-center space-x-1\">\n                <div className={`w-2 h-2 rounded-full ${\n                  (analysis.currentStage || 1) === 6 ? 'bg-green-400' :\n                  (analysis.currentStage || 1) > 1 ? 'bg-vc-accent animate-pulse' :\n                  'bg-vc-border'\n                }`}></div>\n                <span className=\"text-xs text-vc-text-muted\">\n                  Stage {analysis.currentStage || 1}\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"text-vc-primary hover:text-vc-primary/80 transition-colors h-8 w-8\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onAnalysisSelect(analysis);\n                }}\n                data-testid={`button-load-analysis-${analysis.id}`}\n              >\n                <ArrowRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        ))}\n        \n        {analyses.length > 5 && (\n          <div className=\"text-center pt-2\">\n            <p className=\"text-xs text-vc-text-muted\">\n              Showing {recentAnalyses.length} of {analyses.length} analyses\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7391},"client/src/components/search-filter.tsx":{"content":"import { useState } from \"react\";\nimport { Search, Filter, SlidersHorizontal, X } from \"lucide-react\";\nimport {\n  Input,\n  Button,\n  Badge,\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  Slider,\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n  Label\n} from \"@/components/ui\";\nimport type { BusinessAnalysis, SearchFilterProps, FilterOptions } from \"@/types\";\n\ninterface SearchFilterProps {\n  analyses: BusinessAnalysis[];\n  onFilteredResults: (filtered: BusinessAnalysis[]) => void;\n}\n\nexport function SearchFilter({ analyses, onFilteredResults }: SearchFilterProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [scoreRange, setScoreRange] = useState([0, 10]);\n  const [stageFilter, setStageFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"date\");\n  const [activeFilters, setActiveFilters] = useState<string[]>([]);\n\n  const applyFilters = () => {\n    let filtered = [...analyses];\n\n    // Apply search filter\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (a) =>\n          a.url.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          a.businessModel?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          a.targetMarket?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          a.revenueStream?.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    // Apply score range filter\n    filtered = filtered.filter(\n      (a) =>\n        (a.overallScore || 0) >= scoreRange[0] &&\n        (a.overallScore || 0) <= scoreRange[1]\n    );\n\n    // Apply stage filter\n    if (stageFilter !== \"all\") {\n      filtered = filtered.filter(\n        (a) => a.currentStage === parseInt(stageFilter)\n      );\n    }\n\n    // Apply sorting\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \"score-high\":\n          return (b.overallScore || 0) - (a.overallScore || 0);\n        case \"score-low\":\n          return (a.overallScore || 0) - (b.overallScore || 0);\n        case \"date-new\":\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case \"date-old\":\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case \"stage-high\":\n          return (b.currentStage || 1) - (a.currentStage || 1);\n        case \"stage-low\":\n          return (a.currentStage || 1) - (b.currentStage || 1);\n        default:\n          return 0;\n      }\n    });\n\n    // Update active filters display\n    const filters = [];\n    if (searchTerm) filters.push(`Search: \"${searchTerm}\"`);\n    if (scoreRange[0] > 0 || scoreRange[1] < 10) {\n      filters.push(`Score: ${scoreRange[0]}-${scoreRange[1]}`);\n    }\n    if (stageFilter !== \"all\") {\n      filters.push(`Stage: ${stageFilter}`);\n    }\n    setActiveFilters(filters);\n\n    onFilteredResults(filtered);\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setScoreRange([0, 10]);\n    setStageFilter(\"all\");\n    setSortBy(\"date\");\n    setActiveFilters([]);\n    onFilteredResults(analyses);\n  };\n\n  // Auto-apply filters when values change\n  React.useEffect(() => {\n    applyFilters();\n  }, [searchTerm, scoreRange, stageFilter, sortBy]);\n\n  return (\n    <div className=\"space-y-4\" data-testid=\"search-filter\">\n      {/* Search Bar */}\n      <div className=\"flex gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-vc-text-muted\" />\n          <Input\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            placeholder=\"Search by URL, business model, market, or revenue stream...\"\n            className=\"pl-10 bg-vc-dark border-vc-border text-vc-text placeholder:text-vc-text-muted\"\n            data-testid=\"input-search\"\n          />\n        </div>\n\n        {/* Advanced Filters */}\n        <Popover>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className=\"bg-vc-card border-vc-border text-vc-text hover:border-vc-primary\"\n              data-testid=\"button-filters\"\n            >\n              <SlidersHorizontal className=\"h-4 w-4 mr-2\" />\n              Filters\n              {activeFilters.length > 0 && (\n                <Badge className=\"ml-2 bg-vc-primary/20 text-vc-primary\">\n                  {activeFilters.length}\n                </Badge>\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-80 bg-vc-card border-vc-border\">\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-vc-text\">Score Range</Label>\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-vc-text-muted text-sm\">{scoreRange[0]}</span>\n                  <Slider\n                    value={scoreRange}\n                    onValueChange={setScoreRange}\n                    max={10}\n                    step={1}\n                    className=\"flex-1\"\n                    data-testid=\"slider-score\"\n                  />\n                  <span className=\"text-vc-text-muted text-sm\">{scoreRange[1]}</span>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-vc-text\">Workflow Stage</Label>\n                <Select value={stageFilter} onValueChange={setStageFilter}>\n                  <SelectTrigger className=\"bg-vc-dark border-vc-border text-vc-text\" data-testid=\"select-stage\">\n                    <SelectValue placeholder=\"All Stages\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-vc-card border-vc-border\">\n                    <SelectItem value=\"all\">All Stages</SelectItem>\n                    <SelectItem value=\"1\">1 - Discovery</SelectItem>\n                    <SelectItem value=\"2\">2 - Filter</SelectItem>\n                    <SelectItem value=\"3\">3 - MVP</SelectItem>\n                    <SelectItem value=\"4\">4 - Testing</SelectItem>\n                    <SelectItem value=\"5\">5 - Scaling</SelectItem>\n                    <SelectItem value=\"6\">6 - Automation</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-vc-text\">Sort By</Label>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"bg-vc-dark border-vc-border text-vc-text\" data-testid=\"select-sort\">\n                    <SelectValue placeholder=\"Sort by...\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-vc-card border-vc-border\">\n                    <SelectItem value=\"date-new\">Date (Newest)</SelectItem>\n                    <SelectItem value=\"date-old\">Date (Oldest)</SelectItem>\n                    <SelectItem value=\"score-high\">Score (High to Low)</SelectItem>\n                    <SelectItem value=\"score-low\">Score (Low to High)</SelectItem>\n                    <SelectItem value=\"stage-high\">Stage (6 to 1)</SelectItem>\n                    <SelectItem value=\"stage-low\">Stage (1 to 6)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button\n                onClick={clearFilters}\n                variant=\"outline\"\n                className=\"w-full border-vc-border text-vc-text hover:bg-vc-dark\"\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"h-4 w-4 mr-2\" />\n                Clear All Filters\n              </Button>\n            </div>\n          </PopoverContent>\n        </Popover>\n\n        {/* Sort Dropdown */}\n        <Select value={sortBy} onValueChange={setSortBy}>\n          <SelectTrigger className=\"w-[180px] bg-vc-card border-vc-border text-vc-text\" data-testid=\"select-quick-sort\">\n            <Filter className=\"h-4 w-4 mr-2\" />\n            <SelectValue placeholder=\"Sort by...\" />\n          </SelectTrigger>\n          <SelectContent className=\"bg-vc-card border-vc-border\">\n            <SelectItem value=\"date-new\">Newest First</SelectItem>\n            <SelectItem value=\"date-old\">Oldest First</SelectItem>\n            <SelectItem value=\"score-high\">Highest Score</SelectItem>\n            <SelectItem value=\"score-low\">Lowest Score</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {/* Active Filters Display */}\n      {activeFilters.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\">\n          {activeFilters.map((filter, index) => (\n            <Badge\n              key={index}\n              variant=\"secondary\"\n              className=\"bg-vc-primary/20 text-vc-primary border-vc-primary/30\"\n            >\n              {filter}\n            </Badge>\n          ))}\n          <Button\n            onClick={clearFilters}\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"h-6 px-2 text-vc-text-muted hover:text-vc-text\"\n            data-testid=\"button-clear-inline\"\n          >\n            Clear all\n          </Button>\n        </div>\n      )}\n\n      {/* Results Count */}\n      <div className=\"text-sm text-vc-text-muted\">\n        Showing {analyses.length} {analyses.length === 1 ? 'result' : 'results'}\n      </div>\n    </div>\n  );\n}\n\n// React is imported automatically by Vite\nimport React from 'react';","size_bytes":9373},"client/src/components/url-analysis-input.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Search, Link, Bot } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AIService } from \"@/lib/ai-service\";\nimport type { BusinessAnalysis, SearchResult } from \"@/types\";\n\ninterface URLAnalysisInputProps {\n  onAnalysisComplete: (analysis: BusinessAnalysis) => void;\n}\n\nexport function URLAnalysisInput({ onAnalysisComplete }: URLAnalysisInputProps) {\n  const [url, setUrl] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState<SearchResult | null>(null);\n  \n  const { toast } = useToast();\n\n  const { data: activeProvider } = useQuery({\n    queryKey: ['/api/ai-providers/active'],\n    queryFn: () => AIService.getActiveProvider(),\n  });\n\n  const analyzeURLMutation = useMutation({\n    mutationFn: (url: string) => AIService.analyzeURL(url),\n    onSuccess: (analysis) => {\n      toast({\n        title: \"Analysis Complete\",\n        description: `Business analysis completed with score: ${analysis.overallScore}/10`,\n      });\n      onAnalysisComplete(analysis);\n      setUrl('');\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Failed to analyze URL\";\n      let title = \"Analysis Failed\";\n      let description = errorMessage;\n      \n      // Provide specific guidance based on error type\n      if (errorMessage.includes('API key')) {\n        title = \"Invalid API Key\";\n        description = \"Please check your AI provider configuration and ensure your API key is valid.\";\n      } else if (errorMessage.includes('temporarily unavailable')) {\n        title = \"Service Temporarily Unavailable\";\n        description = \"The AI service is currently unavailable. Please try again in a few moments.\";\n      } else if (errorMessage.includes('rate limit')) {\n        title = \"Rate Limit Exceeded\";\n        description = \"You've made too many requests. Please wait a few moments before trying again.\";\n      } else if (errorMessage.includes('No active AI provider')) {\n        title = \"Configuration Required\";\n        description = \"Please configure an AI provider in settings before analyzing URLs.\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const searchBusinessesMutation = useMutation({\n    mutationFn: (query: string) => AIService.searchBusinesses(query),\n    onSuccess: (results) => {\n      setSearchResults(results);\n      toast({\n        title: \"Search Complete\",\n        description: `Found ${results.businesses.length} business opportunities`,\n      });\n    },\n    onError: (error: any) => {\n      const errorMessage = error.message || \"Failed to search businesses\";\n      let title = \"Search Failed\";\n      let description = errorMessage;\n      \n      // Provide specific guidance based on error type\n      if (errorMessage.includes('API key')) {\n        title = \"Invalid API Key\";\n        description = \"Please check your AI provider configuration and ensure your API key is valid.\";\n      } else if (errorMessage.includes('temporarily unavailable')) {\n        title = \"Service Temporarily Unavailable\";\n        description = \"The AI service is currently unavailable. Please try again in a few moments.\";\n      } else if (errorMessage.includes('rate limit')) {\n        title = \"Rate Limit Exceeded\";\n        description = \"You've made too many requests. Please wait a few moments before trying again.\";\n      } else if (errorMessage.includes('No active AI provider')) {\n        title = \"Configuration Required\";\n        description = \"Please configure an AI provider in settings before searching.\";\n      }\n      \n      toast({\n        title,\n        description,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAnalyze = () => {\n    if (!url.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a URL to analyze\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!activeProvider) {\n      toast({\n        title: \"Error\",\n        description: \"Please configure an AI provider first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    analyzeURLMutation.mutate(url.trim());\n  };\n\n  const handleAISearch = () => {\n    if (!searchQuery.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a search query\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!activeProvider) {\n      toast({\n        title: \"Error\",\n        description: \"Please configure an AI provider first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    searchBusinessesMutation.mutate(searchQuery.trim());\n  };\n\n  const handleSearchResultAnalyze = (businessUrl: string) => {\n    setUrl(businessUrl);\n    analyzeURLMutation.mutate(businessUrl);\n    setSearchResults(null);\n  };\n\n  return (\n    <Card className=\"glass-heavy border-vc-border/50 hover-glow transition-all\" data-testid=\"card-url-analysis\">\n      <CardContent className=\"p-6\">\n        <div className=\"mb-4\">\n          <h2 className=\"text-xl font-semibold text-vc-text mb-2\">Business Discovery & Analysis</h2>\n          <p className=\"text-vc-text-muted\">Input a URL to analyze or use AI-powered search to discover cloneable opportunities</p>\n        </div>\n\n        <div className=\"space-y-4\">\n          {/* URL Input */}\n          <div className=\"flex space-x-3\">\n            <div className=\"flex-1 relative\">\n              <Input\n                type=\"url\"\n                placeholder=\"Enter business URL (e.g., https://example.com)\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                className=\"w-full glass border-vc-border/50 pr-10 text-vc-text placeholder-vc-text-muted focus:border-vc-primary focus:ring-vc-primary/20 backdrop-blur-sm transition-all\"\n                onKeyDown={(e) => e.key === 'Enter' && handleAnalyze()}\n                data-testid=\"input-url\"\n              />\n              <Link className=\"absolute right-3 top-3 h-4 w-4 text-vc-text-muted\" />\n            </div>\n            <Button\n              onClick={handleAnalyze}\n              disabled={analyzeURLMutation.isPending || !url.trim()}\n              className=\"gradient-animated hover:scale-105 text-white px-6 font-semibold transition-all shadow-lg hover-glow\"\n              data-testid=\"button-analyze\"\n            >\n              <Search className=\"mr-2 h-4 w-4\" />\n              {analyzeURLMutation.isPending ? 'Analyzing...' : 'Analyze'}\n            </Button>\n          </div>\n\n          {/* AI Search */}\n          <div className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Or describe what type of business you want to clone (e.g., 'task management apps like Trello')\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full glass border-vc-border/50 pr-12 text-vc-text placeholder-vc-text-muted focus:border-vc-accent focus:ring-vc-accent/20 backdrop-blur-sm transition-all\"\n              onKeyDown={(e) => e.key === 'Enter' && handleAISearch()}\n              data-testid=\"input-search\"\n            />\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleAISearch}\n              disabled={searchBusinessesMutation.isPending || !searchQuery.trim()}\n              className=\"absolute right-2 top-1/2 -translate-y-1/2 text-vc-accent hover:text-vc-accent/80 h-8 w-8\"\n              data-testid=\"button-ai-search\"\n            >\n              <Bot className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        {/* Search Results */}\n        {searchResults && (\n          <div className=\"mt-6\">\n            <h3 className=\"text-lg font-semibold text-vc-text mb-4\">AI-Discovered Opportunities</h3>\n            <div className=\"space-y-3\">\n              {searchResults.businesses.map((business, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center justify-between p-3 glass rounded-lg border border-vc-border/50 hover:border-vc-accent hover-lift transition-all\"\n                  data-testid={`search-result-${index}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-white text-sm font-semibold\">\n                          {business.name.charAt(0)}\n                        </span>\n                      </div>\n                      <div>\n                        <p className=\"text-vc-text font-medium\">{business.name}</p>\n                        <p className=\"text-vc-text-muted text-sm\">\n                          {business.businessModel} • Est. Score: {business.estimatedScore}/10\n                        </p>\n                        <p className=\"text-vc-text-muted text-xs mt-1\">\n                          {business.description}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleSearchResultAnalyze(business.url)}\n                    className=\"text-vc-primary border-vc-primary hover:bg-vc-primary/10\"\n                    data-testid={`button-analyze-result-${index}`}\n                  >\n                    Analyze\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9969},"client/src/components/workflow-tabs.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowRight, Download, RotateCcw, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AIService } from \"@/lib/ai-service\";\nimport { ExportAnalysis } from \"@/components/export-analysis\";\nimport type { BusinessAnalysis, WorkflowStage } from \"@/types\";\n\ninterface WorkflowTabsProps {\n  analysis: BusinessAnalysis;\n}\n\nconst STAGE_NAMES = [\n  '',\n  'Discovery & Selection',\n  'Lazy-Entrepreneur Filter', \n  'MVP Launch Planning',\n  'Demand Testing Strategy',\n  'Scaling & Growth',\n  'AI Automation Mapping'\n];\n\nexport function WorkflowTabs({ analysis }: WorkflowTabsProps) {\n  const [activeStage, setActiveStage] = useState(analysis.currentStage || 1);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stages = [] } = useQuery({\n    queryKey: ['/api/workflow-stages', analysis.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/workflow-stages/${analysis.id}`);\n      return response.json();\n    },\n  });\n\n  const generateStageMutation = useMutation({\n    mutationFn: (stageNumber: number) => AIService.generateStageContent(analysis.id, stageNumber),\n    onSuccess: (stage) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/workflow-stages', analysis.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/business-analyses'] });\n      queryClient.invalidateQueries({ queryKey: [`/api/business-analyses/${analysis.id}`] });\n      toast({\n        title: \"Stage Generated\",\n        description: `${STAGE_NAMES[stage.stageNumber]} content generated successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate stage content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStageStatus = (stageNumber: number) => {\n    const stage = stages.find((s: WorkflowStage) => s.stageNumber === stageNumber);\n    if (stage?.status === 'completed') return 'completed';\n    if (stageNumber <= (analysis.currentStage || 1)) return 'current';\n    return 'pending';\n  };\n\n  const getStageData = (stageNumber: number) => {\n    return stages.find((s: WorkflowStage) => s.stageNumber === stageNumber);\n  };\n\n  const renderStageContent = (stageNumber: number) => {\n    const stage = getStageData(stageNumber);\n    const status = getStageStatus(stageNumber);\n\n    if (stageNumber === 1) {\n      return renderDiscoveryContent();\n    }\n\n    if (status === 'pending') {\n      return (\n        <div className=\"text-center py-8\">\n          <p className=\"text-vc-text-muted mb-4\">\n            This stage is not yet available. Complete previous stages to unlock.\n          </p>\n          <Button\n            onClick={() => generateStageMutation.mutate(stageNumber)}\n            disabled={generateStageMutation.isPending || stageNumber > (analysis.currentStage || 1) + 1}\n            className=\"bg-vc-primary hover:bg-vc-primary/80 text-white shadow-neon\"\n            data-testid={`button-generate-stage-${stageNumber}`}\n          >\n            {generateStageMutation.isPending ? 'Generating...' : `Generate ${STAGE_NAMES[stageNumber]}`}\n          </Button>\n        </div>\n      );\n    }\n\n    if (stage?.data) {\n      return renderStageSpecificContent(stageNumber, stage.data);\n    }\n\n    return (\n      <div className=\"text-center py-8\">\n        <Button\n          onClick={() => generateStageMutation.mutate(stageNumber)}\n          disabled={generateStageMutation.isPending}\n          className=\"bg-vc-primary hover:bg-vc-primary/80 text-white shadow-neon\"\n          data-testid={`button-generate-stage-${stageNumber}`}\n        >\n          {generateStageMutation.isPending ? 'Generating...' : `Generate ${STAGE_NAMES[stageNumber]}`}\n        </Button>\n      </div>\n    );\n  };\n\n  const renderDiscoveryContent = () => {\n    if (!analysis.scoreDetails) return null;\n\n    const weights = {\n      technicalComplexity: 20,\n      marketOpportunity: 25,\n      competitiveLandscape: 15,\n      resourceRequirements: 20,\n      timeToMarket: 20\n    };\n\n    const scoreItems = [\n      { key: 'technicalComplexity', label: 'Technical Complexity', weight: weights.technicalComplexity },\n      { key: 'marketOpportunity', label: 'Market Opportunity', weight: weights.marketOpportunity },\n      { key: 'competitiveLandscape', label: 'Competitive Landscape', weight: weights.competitiveLandscape },\n      { key: 'resourceRequirements', label: 'Resource Requirements', weight: weights.resourceRequirements },\n      { key: 'timeToMarket', label: 'Time to Market', weight: weights.timeToMarket },\n    ];\n\n    const getScoreColor = (score: number) => {\n      if (score >= 8) return 'bg-green-900/50 text-green-300';\n      if (score >= 6) return 'bg-yellow-900/50 text-yellow-300';\n      return 'bg-red-900/50 text-red-300';\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        {/* Business Analysis Results */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold text-vc-text\">Business Analysis Results</h3>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-vc-text-muted\">AI Analysis Complete</span>\n            </div>\n          </div>\n\n          {/* Business Overview Card */}\n          <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-vc-text-muted\">Business URL</label>\n                <p className=\"text-vc-text font-mono text-sm mt-1\">{analysis.url}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-vc-text-muted\">Business Model</label>\n                <p className=\"text-vc-text mt-1\">{analysis.businessModel}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-vc-text-muted\">Primary Revenue Stream</label>\n                <p className=\"text-vc-text mt-1\">{analysis.revenueStream}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-vc-text-muted\">Target Market</label>\n                <p className=\"text-vc-text mt-1\">{analysis.targetMarket}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Cloneability Scorecard */}\n          <div className=\"bg-vc-dark rounded-lg border border-vc-border overflow-hidden\">\n            <div className=\"bg-vc-card px-4 py-3 border-b border-vc-border\">\n              <h4 className=\"font-semibold text-vc-text\">Cloneability Scorecard</h4>\n            </div>\n            <div className=\"p-4\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"text-left text-sm text-vc-text-muted\">\n                      <th className=\"pb-3\">Criteria</th>\n                      <th className=\"pb-3 text-center\">Score</th>\n                      <th className=\"pb-3 text-center\">Weight</th>\n                      <th className=\"pb-3 text-center\">Weighted Score</th>\n                      <th className=\"pb-3\">AI Reasoning</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"space-y-2\">\n                    {scoreItems.map((item) => {\n                      const scoreData = analysis.scoreDetails![item.key as keyof typeof analysis.scoreDetails] as any;\n                      const weightedScore = Math.round((scoreData.score * item.weight / 100) * 10) / 10;\n                      \n                      return (\n                        <tr key={item.key} className=\"border-b border-vc-border/50\">\n                          <td className=\"py-3 text-vc-text\">{item.label}</td>\n                          <td className=\"py-3 text-center\">\n                            <Badge className={`${getScoreColor(scoreData.score)} text-xs font-medium`}>\n                              {scoreData.score}/10\n                            </Badge>\n                          </td>\n                          <td className=\"py-3 text-center text-vc-text-muted\">{item.weight}%</td>\n                          <td className=\"py-3 text-center text-vc-accent font-semibold\">{weightedScore}</td>\n                          <td className=\"py-3 text-sm text-vc-text-muted\">{scoreData.reasoning}</td>\n                        </tr>\n                      );\n                    })}\n                  </tbody>\n                  <tfoot>\n                    <tr className=\"border-t-2 border-vc-border\">\n                      <td className=\"pt-3 font-semibold text-vc-text\">Overall Score</td>\n                      <td className=\"pt-3 text-center\">\n                        <Badge className=\"bg-vc-primary text-white text-sm font-bold\">\n                          {analysis.overallScore}/10\n                        </Badge>\n                      </td>\n                      <td className=\"pt-3 text-center text-vc-text-muted\">100%</td>\n                      <td className=\"pt-3 text-center text-vc-accent font-bold text-lg\">\n                        {analysis.overallScore}\n                      </td>\n                      <td className=\"pt-3 text-sm text-green-400 font-medium\">\n                        {(analysis.overallScore || 0) >= 7 ? 'Strong Clone Candidate ✓' : \n                         (analysis.overallScore || 0) >= 5 ? 'Moderate Candidate' : \n                         'Weak Candidate'}\n                      </td>\n                    </tr>\n                  </tfoot>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-between items-center pt-4 border-t border-vc-border\">\n          <ExportAnalysis analysis={analysis} stages={stages} />\n          <div className=\"flex space-x-3\">\n            <Button\n              variant=\"outline\"\n              className=\"bg-vc-card border-vc-border text-vc-text hover:border-vc-primary\"\n              data-testid=\"button-reanalyze\"\n            >\n              <RotateCcw className=\"mr-2 h-4 w-4\" />\n              Re-analyze\n            </Button>\n            <Button\n              onClick={() => {\n                setActiveStage(2);\n                generateStageMutation.mutate(2);\n              }}\n              className=\"bg-vc-primary hover:bg-vc-primary/80 text-white font-semibold shadow-neon\"\n              data-testid=\"button-proceed-stage-2\"\n            >\n              Proceed to Filter\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderStageSpecificContent = (stageNumber: number, data: any) => {\n    switch (stageNumber) {\n      case 2:\n        return renderLazyEntrepreneurFilter(data);\n      case 3:\n        return renderMVPPlanning(data);\n      case 4:\n        return renderDemandTesting(data);\n      case 5:\n        return renderScalingGrowth(data);\n      case 6:\n        return renderAIAutomation(data);\n      default:\n        return <div className=\"text-vc-text-muted\">Stage content not available</div>;\n    }\n  };\n\n  const renderLazyEntrepreneurFilter = (data: any) => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <Badge className={`text-lg font-bold px-4 py-2 ${\n          data.recommendation === 'PROCEED' ? 'bg-green-900/50 text-green-300' :\n          data.recommendation === 'MODIFY' ? 'bg-yellow-900/50 text-yellow-300' :\n          'bg-red-900/50 text-red-300'\n        }`}>\n          {data.recommendation}\n        </Badge>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Effort Score</h4>\n          <div className=\"text-2xl font-bold text-vc-accent\">{data.effortScore}/10</div>\n        </div>\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Reward Score</h4>\n          <div className=\"text-2xl font-bold text-vc-accent\">{data.rewardScore}/10</div>\n        </div>\n      </div>\n\n      <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n        <h4 className=\"text-vc-text font-semibold mb-2\">AI Reasoning</h4>\n        <p className=\"text-vc-text-muted\">{data.reasoning}</p>\n      </div>\n\n      {data.modifications && data.modifications.length > 0 && (\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Suggested Modifications</h4>\n          <ul className=\"list-disc list-inside space-y-1 text-vc-text-muted\">\n            {data.modifications.map((mod: string, index: number) => (\n              <li key={index}>{mod}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end pt-4 border-t border-vc-border\">\n        <Button\n          onClick={() => {\n            setActiveStage(3);\n            if (!getStageData(3)) {\n              generateStageMutation.mutate(3);\n            }\n          }}\n          disabled={generateStageMutation.isPending}\n          className=\"bg-vc-primary hover:bg-vc-primary/80 text-white font-semibold shadow-neon\"\n          data-testid=\"button-proceed-stage-3\"\n        >\n          {generateStageMutation.isPending ? 'Generating...' : 'Proceed to MVP Planning'}\n          <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderMVPPlanning = (data: any) => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Core MVP Features</h4>\n          <ul className=\"space-y-2\">\n            {data.coreFeatures?.map((feature: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{feature}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Recommended Tech Stack</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {data.techStack?.map((tech: string, index: number) => (\n              <Badge key={index} variant=\"outline\" className=\"border-vc-accent text-vc-accent\">\n                {tech}\n              </Badge>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Timeline</h4>\n          <p className=\"text-vc-accent font-bold\">{data.timeline}</p>\n        </div>\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Budget Estimate</h4>\n          <p className=\"text-vc-accent font-bold\">{data.budgetEstimate}</p>\n        </div>\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-2\">Team Size</h4>\n          <p className=\"text-vc-accent font-bold\">{data.teamRequirements?.length || 0} roles</p>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end pt-4 border-t border-vc-border\">\n        <Button\n          onClick={() => {\n            setActiveStage(4);\n            if (!getStageData(4)) {\n              generateStageMutation.mutate(4);\n            }\n          }}\n          disabled={generateStageMutation.isPending}\n          className=\"bg-vc-primary hover:bg-vc-primary/80 text-white font-semibold shadow-neon\"\n          data-testid=\"button-proceed-stage-4\"\n        >\n          {generateStageMutation.isPending ? 'Generating...' : 'Proceed to Demand Testing'}\n          <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderDemandTesting = (data: any) => (\n    <div className=\"space-y-6\">\n      <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n        <h4 className=\"text-vc-text font-semibold mb-3\">Landing Page Strategy</h4>\n        <p className=\"text-vc-text-muted\">{data.landingPageStrategy}</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Validation Methods</h4>\n          <ul className=\"space-y-2\">\n            {data.validationMethods?.map((method: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-vc-accent mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{method}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Success Metrics</h4>\n          <ul className=\"space-y-2\">\n            {data.successMetrics?.map((metric: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{metric}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end pt-4 border-t border-vc-border\">\n        <Button\n          onClick={() => {\n            setActiveStage(5);\n            if (!getStageData(5)) {\n              generateStageMutation.mutate(5);\n            }\n          }}\n          disabled={generateStageMutation.isPending}\n          className=\"bg-vc-primary hover:bg-vc-primary/80 text-white font-semibold shadow-neon\"\n          data-testid=\"button-proceed-stage-5\"\n        >\n          {generateStageMutation.isPending ? 'Generating...' : 'Proceed to Scaling & Growth'}\n          <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderScalingGrowth = (data: any) => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Growth Strategies</h4>\n          <ul className=\"space-y-2\">\n            {data.growthStrategies?.map((strategy: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-vc-primary mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{strategy}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Acquisition Channels</h4>\n          <ul className=\"space-y-2\">\n            {data.acquisitionChannels?.map((channel: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-vc-secondary mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{channel}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n        <h4 className=\"text-vc-text font-semibold mb-3\">Competitive Positioning</h4>\n        <p className=\"text-vc-text-muted\">{data.positioning}</p>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-end pt-4 border-t border-vc-border\">\n        <Button\n          onClick={() => {\n            setActiveStage(6);\n            if (!getStageData(6)) {\n              generateStageMutation.mutate(6);\n            }\n          }}\n          disabled={generateStageMutation.isPending}\n          className=\"bg-vc-primary hover:bg-vc-primary/80 text-white font-semibold shadow-neon\"\n          data-testid=\"button-proceed-stage-6\"\n        >\n          {generateStageMutation.isPending ? 'Generating...' : 'Proceed to AI Automation'}\n          <ArrowRight className=\"ml-2 h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n\n  const renderAIAutomation = (data: any) => (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Customer Service AI</h4>\n          <ul className=\"space-y-2\">\n            {data.customerServiceAI?.map((item: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-vc-accent mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{item}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n          <h4 className=\"text-vc-text font-semibold mb-3\">Marketing Automation</h4>\n          <ul className=\"space-y-2\">\n            {data.marketingAutomation?.map((item: string, index: number) => (\n              <li key={index} className=\"flex items-start space-x-2\">\n                <CheckCircle className=\"h-4 w-4 text-vc-primary mt-0.5 flex-shrink-0\" />\n                <span className=\"text-vc-text-muted text-sm\">{item}</span>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n      <div className=\"bg-vc-dark rounded-lg border border-vc-border p-4\">\n        <h4 className=\"text-vc-text font-semibold mb-3\">ROI Projections</h4>\n        <p className=\"text-vc-text-muted\">{data.roiProjections}</p>\n      </div>\n\n      {/* Action Buttons - Complete Analysis */}\n      <div className=\"flex justify-between items-center pt-4 border-t border-vc-border\">\n        <div className=\"flex items-center space-x-2\">\n          <CheckCircle className=\"h-5 w-5 text-green-400\" />\n          <span className=\"text-sm text-vc-text\">Analysis Complete</span>\n        </div>\n        <div className=\"flex space-x-3\">\n          <Button\n            onClick={() => setActiveStage(1)}\n            variant=\"outline\"\n            className=\"bg-vc-card border-vc-border text-vc-text hover:border-vc-primary\"\n            data-testid=\"button-back-to-start\"\n          >\n            Back to Overview\n          </Button>\n          <ExportAnalysis analysis={analysis} stages={stages} />\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"bg-vc-card border-vc-border\" data-testid=\"card-workflow-tabs\">\n      <Tabs value={activeStage.toString()} onValueChange={(value) => setActiveStage(parseInt(value))}>\n        {/* Tab Navigation */}\n        <TabsList className=\"grid w-full grid-cols-6 bg-vc-card border-b border-vc-border rounded-none h-auto p-0\">\n          {[1, 2, 3, 4, 5, 6].map((stage) => {\n            const status = getStageStatus(stage);\n            return (\n              <TabsTrigger\n                key={stage}\n                value={stage.toString()}\n                className={`flex-1 min-w-0 py-4 px-3 text-center border-b-2 transition-all data-[state=active]:border-vc-primary data-[state=active]:bg-vc-primary/10 data-[state=active]:text-vc-primary ${\n                  status === 'completed' ? 'text-vc-text' : \n                  status === 'current' ? 'text-vc-text' : 'text-vc-text-muted'\n                }`}\n                disabled={status === 'pending' && stage > (analysis.currentStage || 1) + 1}\n                data-testid={`tab-stage-${stage}`}\n              >\n                <div>\n                  <div className=\"text-xs uppercase tracking-wide\">Stage {stage}</div>\n                  <div className=\"text-sm mt-1 truncate\">{STAGE_NAMES[stage]}</div>\n                  {status === 'completed' && (\n                    <CheckCircle className=\"h-3 w-3 mx-auto mt-1 text-green-400\" />\n                  )}\n                </div>\n              </TabsTrigger>\n            );\n          })}\n        </TabsList>\n\n        {/* Tab Content */}\n        {[1, 2, 3, 4, 5, 6].map((stage) => (\n          <TabsContent key={stage} value={stage.toString()} className=\"p-6\">\n            {renderStageContent(stage)}\n          </TabsContent>\n        ))}\n      </Tabs>\n    </Card>\n  );\n}\n","size_bytes":25354},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/ai-service.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { AIProvider, SearchResult } from \"../types\";\n\nexport class AIService {\n  static async testConnection(provider: string, apiKey: string): Promise<boolean> {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/ai-providers/test\", {\n        provider,\n        apiKey\n      });\n      const data = await response.json();\n      return data.connected;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  static async getProviders(): Promise<AIProvider[]> {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/ai-providers\");\n      return await response.json();\n    } catch (error) {\n      return [];\n    }\n  }\n\n  static async getActiveProvider(): Promise<AIProvider | null> {\n    try {\n      const response = await apiRequest(\"GET\", \"/api/ai-providers/active\");\n      return await response.json();\n    } catch (error) {\n      return null;\n    }\n  }\n\n  static async saveProvider(providerData: Omit<AIProvider, 'id' | 'userId' | 'createdAt'>): Promise<AIProvider> {\n    const response = await apiRequest(\"POST\", \"/api/ai-providers\", providerData);\n    return await response.json();\n  }\n\n  static async updateProvider(id: string, updates: Partial<AIProvider>): Promise<AIProvider> {\n    const response = await apiRequest(\"PUT\", `/api/ai-providers/${id}`, updates);\n    return await response.json();\n  }\n\n  static async deleteProvider(id: string): Promise<void> {\n    await apiRequest(\"DELETE\", `/api/ai-providers/${id}`);\n  }\n\n  static async analyzeURL(url: string) {\n    const response = await apiRequest(\"POST\", \"/api/business-analyses/analyze\", { url });\n    return await response.json();\n  }\n\n  static async searchBusinesses(query: string): Promise<SearchResult> {\n    const response = await apiRequest(\"POST\", \"/api/business-analyses/search\", { query });\n    return await response.json();\n  }\n\n  static async generateStageContent(analysisId: string, stageNumber: number) {\n    const response = await apiRequest(\"POST\", `/api/workflow-stages/${analysisId}/generate/${stageNumber}`);\n    return await response.json();\n  }\n}\n","size_bytes":2098},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { BarChart3, Home, ArrowLeft, TrendingUp } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { EnhancedAnalytics } from \"@/components/enhanced-analytics\";\nimport { BusinessComparison } from \"@/components/business-comparison\";\nimport { SearchFilter } from \"@/components/search-filter\";\nimport { BatchAnalysis } from \"@/components/batch-analysis\";\nimport type { BusinessAnalysis } from \"@/types\";\n\nexport function Analytics() {\n  const [filteredAnalyses, setFilteredAnalyses] = useState<BusinessAnalysis[]>([]);\n  \n  const { data: analyses = [] } = useQuery<BusinessAnalysis[]>({\n    queryKey: ['/api/business-analyses'],\n  });\n\n  const { data: stats } = useQuery<{\n    totalAnalyses: number;\n    strongCandidates: number;\n    inProgress: number;\n    avgScore: number;\n  }>({\n    queryKey: ['/api/stats'],\n  });\n\n  // Use filtered analyses if available, otherwise use all\n  const displayAnalyses = filteredAnalyses.length > 0 || analyses.length === 0 \n    ? filteredAnalyses \n    : analyses;\n\n  return (\n    <div className=\"min-h-screen bg-vc-dark\">\n      {/* Header */}\n      <header className=\"bg-vc-card border-b border-vc-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"text-vc-text-muted hover:text-vc-text\"\n                  data-testid=\"button-back-dashboard\"\n                >\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Dashboard\n                </Button>\n              </Link>\n              <div className=\"flex items-center\">\n                <BarChart3 className=\"h-8 w-8 text-vc-primary mr-3\" />\n                <div>\n                  <h1 className=\"text-2xl font-bold text-vc-text\">Analytics & Insights</h1>\n                  <p className=\"text-sm text-vc-text-muted\">\n                    Comprehensive business analysis visualization\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {stats && (\n                <div className=\"flex items-center space-x-6 text-sm\">\n                  <div className=\"text-center\">\n                    <p className=\"text-vc-text-muted\">Total Analyses</p>\n                    <p className=\"text-xl font-bold text-vc-accent\">{stats.totalAnalyses}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-vc-text-muted\">Strong Candidates</p>\n                    <p className=\"text-xl font-bold text-green-400\">{stats.strongCandidates}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-vc-text-muted\">In Progress</p>\n                    <p className=\"text-xl font-bold text-vc-primary\">{stats.inProgress}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Search and Filter */}\n        <div className=\"mb-8\">\n          <SearchFilter \n            analyses={analyses} \n            onFilteredResults={setFilteredAnalyses}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Main Charts Area */}\n          <div className=\"lg:col-span-2\">\n            <EnhancedAnalytics analyses={displayAnalyses} />\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <BatchAnalysis />\n            <BusinessComparison analyses={displayAnalyses} />\n            \n            {/* Quick Insights */}\n            <Card className=\"bg-vc-card border-vc-border\">\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold text-vc-text flex items-center\">\n                  <TrendingUp className=\"mr-2 h-5 w-5 text-vc-accent\" />\n                  Quick Insights\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {displayAnalyses.length > 0 ? (\n                  <>\n                    <div className=\"p-3 bg-vc-dark rounded-lg border border-vc-border/50\">\n                      <p className=\"text-xs text-vc-text-muted mb-1\">Average Score</p>\n                      <p className=\"text-xl font-bold text-vc-accent\">\n                        {(displayAnalyses.reduce((acc, a) => acc + (a.overallScore || 0), 0) / displayAnalyses.length).toFixed(1)}\n                      </p>\n                    </div>\n                    \n                    <div className=\"p-3 bg-vc-dark rounded-lg border border-vc-border/50\">\n                      <p className=\"text-xs text-vc-text-muted mb-1\">Best Performer</p>\n                      <p className=\"text-sm font-semibold text-vc-text\">\n                        {displayAnalyses.reduce((best, current) => \n                          (current.overallScore || 0) > (best.overallScore || 0) ? current : best\n                        ).businessModel || 'N/A'}\n                      </p>\n                      <p className=\"text-xs text-green-400 mt-1\">\n                        Score: {displayAnalyses.reduce((best, current) => \n                          (current.overallScore || 0) > (best.overallScore || 0) ? current : best\n                        ).overallScore}/10\n                      </p>\n                    </div>\n\n                    <div className=\"p-3 bg-vc-dark rounded-lg border border-vc-border/50\">\n                      <p className=\"text-xs text-vc-text-muted mb-1\">Most Advanced</p>\n                      <p className=\"text-sm font-semibold text-vc-text\">\n                        Stage {Math.max(...displayAnalyses.map(a => a.currentStage || 1))}\n                      </p>\n                      <p className=\"text-xs text-vc-primary mt-1\">\n                        {displayAnalyses.filter(a => a.currentStage === Math.max(...displayAnalyses.map(a => a.currentStage || 1))).length} businesses\n                      </p>\n                    </div>\n\n                    <div className=\"p-3 bg-gradient-to-r from-vc-primary/20 to-vc-secondary/20 rounded-lg border border-vc-primary/30\">\n                      <p className=\"text-xs text-vc-text-muted mb-1\">Success Rate</p>\n                      <p className=\"text-xl font-bold text-vc-accent\">\n                        {Math.round((displayAnalyses.filter(a => (a.overallScore || 0) >= 7).length / displayAnalyses.length) * 100)}%\n                      </p>\n                      <p className=\"text-xs text-vc-text-muted mt-1\">\n                        Score 7+ considered successful\n                      </p>\n                    </div>\n                  </>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <p className=\"text-vc-text-muted\">No data available</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7515},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { Flame, Settings, User, BarChart3, Book, LogOut } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AIProviderModal } from \"@/components/ai-provider-modal\";\nimport { URLAnalysisInput } from \"@/components/url-analysis-input\";\nimport { EnhancedWorkflow } from \"@/components/enhanced-workflow\";\nimport { AIInsightsPanel } from \"@/components/ai-insights-panel\";\nimport { ProgressTracker } from \"@/components/progress-tracker\";\nimport { RecentAnalyses } from \"@/components/recent-analyses\";\nimport { QuickStats } from \"@/components/quick-stats\";\nimport { BusinessComparison } from \"@/components/business-comparison\";\nimport { AIService } from \"@/lib/ai-service\";\nimport { FloatingActionButton } from \"@/components/floating-action-button\";\nimport type { BusinessAnalysis } from \"@/types\";\n\nexport default function Dashboard() {\n  const [showAIModal, setShowAIModal] = useState(false);\n  const [selectedAnalysis, setSelectedAnalysis] = useState<BusinessAnalysis | null>(null);\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n\n  const { data: activeProvider } = useQuery({\n    queryKey: ['/api/ai-providers/active'],\n    queryFn: () => AIService.getActiveProvider(),\n  });\n\n  const { data: analyses } = useQuery<BusinessAnalysis[]>({\n    queryKey: ['/api/business-analyses'],\n    queryFn: async () => {\n      const response = await fetch('/api/business-analyses');\n      return response.json();\n    },\n  });\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      // Ctrl/Cmd + K for quick actions\n      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n        e.preventDefault();\n        const fabButton = document.querySelector('[data-testid=\"fab-button\"]') as HTMLButtonElement;\n        if (fabButton) fabButton.click();\n      }\n      // Ctrl/Cmd + / for search focus\n      if ((e.ctrlKey || e.metaKey) && e.key === '/') {\n        e.preventDefault();\n        const searchInput = document.querySelector('[data-testid=\"input-search\"]') as HTMLInputElement;\n        if (searchInput) searchInput.focus();\n      }\n      // Ctrl/Cmd + A for analytics\n      if ((e.ctrlKey || e.metaKey) && e.key === 'a' && e.shiftKey) {\n        e.preventDefault();\n        setLocation('/analytics');\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [setLocation]);\n\n  // Handle analysis updates in useEffect (TanStack Query v5 pattern)\n  useEffect(() => {\n    if (selectedAnalysis && analyses) {\n      const updatedAnalysis = analyses.find((a) => a.id === selectedAnalysis.id);\n      if (updatedAnalysis) {\n        setSelectedAnalysis(updatedAnalysis);\n      }\n    }\n  }, [analyses]);\n\n  const handleAnalysisSelect = (analysis: BusinessAnalysis) => {\n    setSelectedAnalysis(analysis);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-vc-dark text-vc-text font-inter\">\n      {/* Header */}\n      <header className=\"glass-heavy border-b border-vc-border/50 sticky top-0 z-50\" data-testid=\"header\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            {/* Logo and Brand */}\n            <div className=\"flex items-center space-x-3\" data-testid=\"brand\">\n              <div className=\"w-10 h-10 gradient-animated rounded-lg flex items-center justify-center shadow-lg hover-scale\">\n                <Flame className=\"text-vc-text text-lg\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-vc-text\">VentureClone AI</h1>\n                <p className=\"text-xs text-vc-text-muted\">Systematic Business Cloning Platform</p>\n              </div>\n            </div>\n\n            {/* AI Provider Selection */}\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/analytics\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-2 glass border-vc-border/50 hover:border-vc-primary hover-glow transition-all\"\n                  data-testid=\"button-analytics\"\n                >\n                  <BarChart3 className=\"h-4 w-4 text-vc-primary\" />\n                  <span className=\"text-sm text-vc-text\">Analytics</span>\n                </Button>\n              </Link>\n\n              <Link href=\"/docs\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-2 glass border-vc-border/50 hover:border-vc-primary hover-glow transition-all\"\n                  data-testid=\"button-documentation\"\n                >\n                  <Book className=\"h-4 w-4 text-vc-primary\" />\n                  <span className=\"text-sm text-vc-text\">Docs</span>\n                </Button>\n              </Link>\n\n              <div className=\"relative\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-2 glass border-vc-border/50 hover:border-vc-primary hover-glow transition-all\"\n                  onClick={() => setShowAIModal(true)}\n                  data-testid=\"button-ai-provider\"\n                >\n                  <span className=\"text-vc-accent\">🤖</span>\n                  <span className=\"text-sm text-vc-text\">\n                    {activeProvider ? `${activeProvider.provider.toUpperCase()}` : 'No AI Provider'}\n                  </span>\n                  <span className=\"text-xs\">▼</span>\n                </Button>\n              </div>\n\n              <ThemeToggle />\n\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"border-vc-border hover:border-vc-accent transition-colors\"\n                onClick={() => setShowAIModal(true)}\n                data-testid=\"button-settings\"\n              >\n                <Settings className=\"h-4 w-4 text-vc-text-muted\" />\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                className=\"border-vc-border hover:border-destructive transition-colors\"\n                onClick={() => window.location.href = '/api/logout'}\n                data-testid=\"button-logout\"\n                title=\"Logout\"\n              >\n                <LogOut className=\"h-4 w-4 text-vc-text-muted\" />\n              </Button>\n\n              <div className=\"w-8 h-8 gradient-animated rounded-full flex items-center justify-center hover-scale shadow-lg\" title={user?.email || 'User'}>\n                {user?.profileImageUrl ? (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-full h-full rounded-full object-cover\"\n                  />\n                ) : (\n                  <User className=\"h-4 w-4 text-vc-dark\" />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          {/* Main Content Area */}\n          <div className=\"lg:col-span-3 space-y-6\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.1 }}\n            >\n              <URLAnalysisInput onAnalysisComplete={handleAnalysisSelect} />\n            </motion.div>\n            \n            {selectedAnalysis && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.95 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.3 }}\n              >\n                <h2 className=\"text-2xl font-semibold text-vc-text mb-6\">6-Stage Workflow Pipeline</h2>\n                <EnhancedWorkflow analysis={selectedAnalysis} />\n              </motion.div>\n            )}\n\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n            >\n              <RecentAnalyses \n                analyses={analyses || []} \n                onAnalysisSelect={handleAnalysisSelect}\n              />\n            </motion.div>\n          </div>\n\n          {/* Right Sidebar */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {selectedAnalysis && (\n              <AIInsightsPanel analysis={selectedAnalysis} />\n            )}\n            \n            {selectedAnalysis && (\n              <ProgressTracker analysis={selectedAnalysis} />\n            )}\n            \n            <BusinessComparison analyses={analyses || []} />\n            \n            <QuickStats />\n          </div>\n        </div>\n      </div>\n\n      {/* AI Provider Configuration Modal */}\n      <AIProviderModal \n        isOpen={showAIModal} \n        onClose={() => setShowAIModal(false)}\n      />\n      \n      {/* Floating Action Button */}\n      <FloatingActionButton />\n    </div>\n  );\n}\n","size_bytes":9352},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/components.ts":{"content":"\nimport { ReactNode } from 'react';\nimport type { BusinessAnalysis, AIProvider, WorkflowStage, ScoreDetails, AIInsights } from './index';\n\n// Common component props\nexport interface BaseComponentProps {\n  className?: string;\n  children?: ReactNode;\n}\n\n// AI Assistant Props\nexport interface AIAssistantProps extends BaseComponentProps {\n  onMessageSent?: (message: string) => void;\n  isVisible?: boolean;\n  onToggleVisibility?: () => void;\n}\n\n// AI Insights Panel Props\nexport interface AIInsightsPanelProps extends BaseComponentProps {\n  analysis: BusinessAnalysis;\n  onInsightRequest?: (type: string) => void;\n}\n\n// AI Provider Modal Props\nexport interface AIProviderModalProps extends BaseComponentProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onProviderAdded?: (provider: AIProvider) => void;\n  currentProvider?: AIProvider | null;\n}\n\n// Analytics Charts Props\nexport interface AnalyticsChartsProps extends BaseComponentProps {\n  data: BusinessAnalysis[];\n  timeRange?: 'week' | 'month' | 'quarter' | 'year';\n  onTimeRangeChange?: (range: string) => void;\n}\n\n// Batch Analysis Props\nexport interface BatchAnalysisProps extends BaseComponentProps {\n  onBatchSubmit: (urls: string[]) => void;\n  isProcessing?: boolean;\n  maxUrls?: number;\n}\n\n// Business Comparison Props\nexport interface BusinessComparisonProps extends BaseComponentProps {\n  businesses: BusinessAnalysis[];\n  onComparisonUpdate?: (selectedIds: string[]) => void;\n  maxComparisons?: number;\n}\n\n// Export Analysis Props\nexport interface ExportAnalysisProps extends BaseComponentProps {\n  analysis: BusinessAnalysis | BusinessAnalysis[];\n  formats?: ('pdf' | 'csv' | 'json')[];\n  onExportComplete?: (format: string, success: boolean) => void;\n}\n\n// Progress Tracker Props\nexport interface ProgressTrackerProps extends BaseComponentProps {\n  analysis: BusinessAnalysis;\n  stages?: WorkflowStage[];\n  onStageClick?: (stageNumber: number) => void;\n}\n\n// Quick Stats Props\nexport interface QuickStatsProps extends BaseComponentProps {\n  stats: {\n    totalAnalyses: number;\n    strongCandidates: number;\n    inProgress: number;\n    aiQueries: number;\n  };\n  isLoading?: boolean;\n  onRefresh?: () => void;\n}\n\n// Recent Analyses Props\nexport interface RecentAnalysesProps extends BaseComponentProps {\n  analyses: BusinessAnalysis[];\n  limit?: number;\n  onAnalysisClick?: (analysis: BusinessAnalysis) => void;\n  onViewAll?: () => void;\n}\n\n// Search Filter Props\nexport interface SearchFilterProps extends BaseComponentProps {\n  onFiltersChange: (filters: FilterOptions) => void;\n  initialFilters?: FilterOptions;\n  totalResults?: number;\n}\n\nexport interface FilterOptions {\n  search?: string;\n  businessModel?: string;\n  scoreRange?: [number, number];\n  dateRange?: {\n    from: Date;\n    to: Date;\n  };\n  status?: 'pending' | 'in_progress' | 'completed';\n  sortBy?: 'score' | 'date' | 'name';\n  sortOrder?: 'asc' | 'desc';\n}\n\n// URL Analysis Input Props\nexport interface UrlAnalysisInputProps extends BaseComponentProps {\n  onSubmit: (url: string) => void;\n  isAnalyzing?: boolean;\n  placeholder?: string;\n  validateUrl?: boolean;\n}\n\n// Workflow Tabs Props\nexport interface WorkflowTabsProps extends BaseComponentProps {\n  analysis: BusinessAnalysis;\n  activeStage?: number;\n  onStageChange?: (stage: number) => void;\n  onStageComplete?: (stage: number, data: any) => void;\n}\n\n// Score Display Props\nexport interface ScoreDisplayProps extends BaseComponentProps {\n  score: number;\n  maxScore?: number;\n  showPercentage?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n  variant?: 'default' | 'circular' | 'bar';\n}\n\n// Score Details Props\nexport interface ScoreDetailsProps extends BaseComponentProps {\n  scoreDetails: ScoreDetails;\n  expandable?: boolean;\n  onScoreClick?: (category: keyof ScoreDetails) => void;\n}\n\n// AI Insights Display Props\nexport interface AIInsightsDisplayProps extends BaseComponentProps {\n  insights: AIInsights;\n  expandable?: boolean;\n  onInsightExpand?: (type: keyof AIInsights) => void;\n}\n\n// Analysis Card Props\nexport interface AnalysisCardProps extends BaseComponentProps {\n  analysis: BusinessAnalysis;\n  onEdit?: (analysis: BusinessAnalysis) => void;\n  onDelete?: (analysisId: string) => void;\n  onView?: (analysis: BusinessAnalysis) => void;\n  showActions?: boolean;\n  compact?: boolean;\n}\n\n// Loading State Props\nexport interface LoadingStateProps extends BaseComponentProps {\n  message?: string;\n  showSpinner?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\n// Error State Props\nexport interface ErrorStateProps extends BaseComponentProps {\n  error: string | Error;\n  onRetry?: () => void;\n  showRetry?: boolean;\n}\n\n// Empty State Props\nexport interface EmptyStateProps extends BaseComponentProps {\n  title?: string;\n  description?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  icon?: ReactNode;\n}\n","size_bytes":4813},"client/src/types/index.ts":{"content":"export interface AIProvider {\n  id: string;\n  userId: string;\n  provider: 'openai' | 'gemini' | 'grok';\n  apiKey: string;\n  isActive: boolean;\n  createdAt: Date;\n}\n\nexport interface BusinessAnalysis {\n  id: string;\n  userId: string;\n  url: string;\n  businessModel?: string;\n  revenueStream?: string;\n  targetMarket?: string;\n  overallScore?: number;\n  scoreDetails?: ScoreDetails;\n  aiInsights?: AIInsights;\n  currentStage: number;\n  stageData?: any;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ScoreDetails {\n  technicalComplexity: { score: number; reasoning: string };\n  marketOpportunity: { score: number; reasoning: string };\n  competitiveLandscape: { score: number; reasoning: string };\n  resourceRequirements: { score: number; reasoning: string };\n  timeToMarket: { score: number; reasoning: string };\n}\n\nexport interface AIInsights {\n  keyInsight: string;\n  riskFactor: string;\n  opportunity: string;\n}\n\nexport interface WorkflowStage {\n  id: string;\n  analysisId: string;\n  stageNumber: number;\n  stageName: string;\n  status: 'pending' | 'in_progress' | 'completed';\n  data?: any;\n  aiGeneratedContent?: any;\n  completedAt?: Date;\n  createdAt: Date;\n}\n\nexport interface QuickStats {\n  totalAnalyses: number;\n  strongCandidates: number;\n  inProgress: number;\n  aiQueries: number;\n}\n\nexport interface SearchResult {\n  businesses: Array<{\n    name: string;\n    url: string;\n    description: string;\n    businessModel: string;\n    estimatedScore: number;\n  }>;\n}\n\nimport type { ReactNode } from 'react';\n\n// Re-export types from shared schema\nexport type {\n  User,\n  AiProvider as AIProviderSchema,\n  BusinessAnalysis as BusinessAnalysisSchema,\n  WorkflowStage as WorkflowStageSchema,\n  UpsertUser,\n  InsertAiProvider,\n  InsertBusinessAnalysis,\n  InsertWorkflowStage\n} from '@shared/schema';\n\n// Additional frontend-specific types\nexport interface BusinessAnalysisResult {\n  url: string;\n  businessModel: string;\n  revenueStream: string;\n  targetMarket: string;\n  overallScore: number;\n  scoreDetails: {\n    technicalComplexity: { score: number; reasoning: string };\n    marketOpportunity: { score: number; reasoning: string };\n    competitiveLandscape: { score: number; reasoning: string };\n    resourceRequirements: { score: number; reasoning: string };\n    timeToMarket: { score: number; reasoning: string };\n  };\n  aiInsights: {\n    keyInsight: string;\n    riskFactor: string;\n    opportunity: string;\n  };\n}\n\nexport interface StageData {\n  [key: string]: any;\n}\n\nexport interface AnalysisStats {\n  totalAnalyses: number;\n  strongCandidates: number;\n  inProgress: number;\n  aiQueries: number;\n}\n\nexport interface EmptyStateProps {\n  title?: string;\n  description?: string;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  icon?: ReactNode;\n}\n\n// Export component types\nexport * from './components';","size_bytes":2835},"client/src/components/business/index.ts":{"content":"\n// Business-specific components\nexport { UrlAnalysisInput } from '../url-analysis-input';\nexport { ProgressTracker } from '../progress-tracker';\nexport { WorkflowTabs } from '../workflow-tabs';\nexport { BusinessComparison } from '../business-comparison';\nexport { ExportAnalysis } from '../export-analysis';\nexport { RecentAnalyses } from '../recent-analyses';\nexport { SearchFilter } from '../search-filter';\n\n// AI-related components\nexport { AIAssistant } from '../ai-assistant';\nexport { AIInsightsPanel } from '../ai-insights-panel';\nexport { AIProviderModal } from '../ai-provider-modal';\n\n// Analytics components\nexport { AnalyticsCharts } from '../analytics-charts';\nexport { QuickStats } from '../quick-stats';\nexport { BatchAnalysis } from '../batch-analysis';\n","size_bytes":772},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/index.ts":{"content":"\nexport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from './accordion';\nexport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogOverlay, AlertDialogPortal, AlertDialogTitle, AlertDialogTrigger } from './alert-dialog';\nexport { Alert, AlertDescription, AlertTitle } from './alert';\nexport { AspectRatio } from './aspect-ratio';\nexport { Avatar, AvatarFallback, AvatarImage } from './avatar';\nexport { Badge, badgeVariants } from './badge';\nexport { Breadcrumb, BreadcrumbEllipsis, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from './breadcrumb';\nexport { Button, buttonVariants, type ButtonProps } from './button';\nexport { Calendar } from './calendar';\nexport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from './card';\nexport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from './carousel';\nexport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from './chart';\nexport { Checkbox } from './checkbox';\nexport { Collapsible, CollapsibleContent, CollapsibleTrigger } from './collapsible';\nexport { Command, CommandDialog, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList, CommandSeparator, CommandShortcut } from './command';\nexport { ContextMenu, ContextMenuCheckboxItem, ContextMenuContent, ContextMenuItem, ContextMenuLabel, ContextMenuRadioGroup, ContextMenuRadioItem, ContextMenuSeparator, ContextMenuShortcut, ContextMenuSub, ContextMenuSubContent, ContextMenuSubTrigger, ContextMenuTrigger } from './context-menu';\nexport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger, DialogClose } from './dialog';\nexport { Drawer, DrawerClose, DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerPortal, DrawerTitle, DrawerTrigger } from './drawer';\nexport { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuPortal, DropdownMenuRadioGroup, DropdownMenuRadioItem, DropdownMenuSeparator, DropdownMenuShortcut, DropdownMenuSub, DropdownMenuSubContent, DropdownMenuSubTrigger, DropdownMenuTrigger } from './dropdown-menu';\nexport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage, useFormField } from './form';\nexport { HoverCard, HoverCardContent, HoverCardTrigger } from './hover-card';\nexport { InputOTP, InputOTPGroup, InputOTPSeparator, InputOTPSlot } from './input-otp';\nexport { Input } from './input';\nexport { Label } from './label';\nexport { Menubar, MenubarCheckboxItem, MenubarContent, MenubarItem, MenubarLabel, MenubarMenu, MenubarRadioGroup, MenubarRadioItem, MenubarSeparator, MenubarShortcut, MenubarSub, MenubarSubContent, MenubarSubTrigger, MenubarTrigger } from './menubar';\nexport { NavigationMenu, NavigationMenuContent, NavigationMenuIndicator, NavigationMenuItem, NavigationMenuLink, NavigationMenuList, NavigationMenuTrigger, NavigationMenuViewport, navigationMenuTriggerStyle } from './navigation-menu';\nexport { Pagination, PaginationContent, PaginationEllipsis, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from './pagination';\nexport { Popover, PopoverContent, PopoverTrigger } from './popover';\nexport { Progress } from './progress';\nexport { RadioGroup, RadioGroupItem } from './radio-group';\nexport { ResizableHandle, ResizablePanel, ResizablePanelGroup } from './resizable';\nexport { ScrollArea, ScrollBar } from './scroll-area';\nexport { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectScrollDownButton, SelectScrollUpButton, SelectSeparator, SelectTrigger, SelectValue } from './select';\nexport { Separator } from './separator';\nexport { Sheet, SheetClose, SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger } from './sheet';\nexport { Sidebar, SidebarContent, SidebarFooter, SidebarGroup, SidebarGroupAction, SidebarGroupContent, SidebarGroupLabel, SidebarHeader, SidebarInput, SidebarInset, SidebarMenu, SidebarMenuAction, SidebarMenuBadge, SidebarMenuButton, SidebarMenuItem, SidebarMenuSkeleton, SidebarMenuSub, SidebarMenuSubButton, SidebarMenuSubItem, SidebarProvider, SidebarRail, SidebarSeparator, SidebarTrigger, useSidebar } from './sidebar';\nexport { Skeleton } from './skeleton';\nexport { Slider } from './slider';\nexport { Switch } from './switch';\nexport { Table, TableBody, TableCaption, TableCell, TableFooter, TableHead, TableHeader, TableRow } from './table';\nexport { Tabs, TabsContent, TabsList, TabsTrigger } from './tabs';\nexport { Textarea } from './textarea';\nexport { Toast, ToastAction, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport, type ToastActionElement, type ToastProps } from './toast';\nexport { Toaster } from './toaster';\nexport { ToggleGroup, ToggleGroupItem } from './toggle-group';\nexport { Toggle, toggleVariants } from './toggle';\nexport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from './tooltip';\n","size_bytes":5205},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/enhanced-analytics.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  AreaChart,\n  Area,\n  RadarChart,\n  Radar,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { TrendingUp, TrendingDown, Activity, Target } from \"lucide-react\";\nimport type { BusinessAnalysis } from \"@/types\";\n\ninterface EnhancedAnalyticsProps {\n  analyses: BusinessAnalysis[];\n}\n\nexport function EnhancedAnalytics({ analyses }: EnhancedAnalyticsProps) {\n  const [timeRange, setTimeRange] = useState(\"all\");\n  const [selectedMetric, setSelectedMetric] = useState(\"overallScore\");\n\n  // Prepare time series data\n  const timeSeriesData = analyses\n    .sort((a, b) => new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime())\n    .map((analysis) => ({\n      date: new Date(analysis.createdAt || 0).toLocaleDateString(),\n      overallScore: analysis.overallScore || 0,\n      technicalComplexity: (analysis.scoreDetails as any)?.technicalComplexity?.score || 0,\n      marketOpportunity: (analysis.scoreDetails as any)?.marketOpportunity?.score || 0,\n      competitiveLandscape: (analysis.scoreDetails as any)?.competitiveLandscape?.score || 0,\n      resourceRequirements: (analysis.scoreDetails as any)?.resourceRequirements?.score || 0,\n      timeToMarket: (analysis.scoreDetails as any)?.timeToMarket?.score || 0,\n      businessModel: analysis.businessModel || \"Unknown\",\n    }));\n\n  // Prepare category distribution data\n  const categoryData = [\n    {\n      name: \"Technical Complexity\",\n      avg: analyses.reduce((acc, a) => acc + ((a.scoreDetails as any)?.technicalComplexity?.score || 0), 0) / analyses.length,\n      color: \"hsl(16, 100%, 50%)\",\n    },\n    {\n      name: \"Market Opportunity\",\n      avg: analyses.reduce((acc, a) => acc + ((a.scoreDetails as any)?.marketOpportunity?.score || 0), 0) / analyses.length,\n      color: \"hsl(348, 83%, 47%)\",\n    },\n    {\n      name: \"Competitive Landscape\",\n      avg: analyses.reduce((acc, a) => acc + ((a.scoreDetails as any)?.competitiveLandscape?.score || 0), 0) / analyses.length,\n      color: \"hsl(51, 100%, 50%)\",\n    },\n    {\n      name: \"Resource Requirements\",\n      avg: analyses.reduce((acc, a) => acc + ((a.scoreDetails as any)?.resourceRequirements?.score || 0), 0) / analyses.length,\n      color: \"hsl(120, 60%, 50%)\",\n    },\n    {\n      name: \"Time to Market\",\n      avg: analyses.reduce((acc, a) => acc + ((a.scoreDetails as any)?.timeToMarket?.score || 0), 0) / analyses.length,\n      color: \"hsl(280, 60%, 50%)\",\n    },\n  ];\n\n  // Prepare radar chart data for top 5 analyses\n  const topAnalyses = [...analyses]\n    .sort((a, b) => (b.overallScore || 0) - (a.overallScore || 0))\n    .slice(0, 5);\n\n  const radarData = [\n    \"Technical\",\n    \"Market\",\n    \"Competition\",\n    \"Resources\",\n    \"Time to Market\",\n  ].map((category) => ({\n    category,\n    ...topAnalyses.reduce((acc, analysis, index) => {\n      const scoreKeyMap: Record<string, string> = {\n        Technical: \"technicalComplexity\",\n        Market: \"marketOpportunity\",\n        Competition: \"competitiveLandscape\",\n        Resources: \"resourceRequirements\",\n        \"Time to Market\": \"timeToMarket\",\n      };\n      const scoreKey = scoreKeyMap[category];\n      \n      if (scoreKey) {\n        acc[`business${index + 1}`] = (analysis.scoreDetails as any)?.[scoreKey]?.score || 0;\n      }\n      return acc;\n    }, {} as any),\n  }));\n\n  // Calculate trends\n  const calculateTrend = (metric: string) => {\n    if (timeSeriesData.length < 2) return 0;\n    const recent = timeSeriesData.slice(-5);\n    const older = timeSeriesData.slice(-10, -5);\n    const recentAvg = recent.reduce((acc, d) => acc + (d as any)[metric], 0) / recent.length;\n    const olderAvg = older.length > 0 ? older.reduce((acc, d) => acc + (d as any)[metric], 0) / older.length : recentAvg;\n    return ((recentAvg - olderAvg) / olderAvg) * 100;\n  };\n\n  const overallTrend = calculateTrend(\"overallScore\");\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white dark:bg-neutral-900 p-3 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800\">\n          <p className=\"text-sm font-semibold text-neutral-900 dark:text-neutral-100\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {entry.name}: {typeof entry.value === 'number' ? entry.value.toFixed(1) : entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics */}\n      <motion.div \n        className=\"grid grid-cols-1 md:grid-cols-4 gap-4\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card className=\"bg-vc-card border-vc-border hover-lift\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-vc-text-muted\">Average Score</p>\n                <p className=\"text-2xl font-bold text-vc-accent\">\n                  {(analyses.reduce((acc, a) => acc + (a.overallScore || 0), 0) / analyses.length).toFixed(1)}\n                </p>\n              </div>\n              <div className={`p-2 rounded-lg ${overallTrend > 0 ? 'bg-green-500/10' : 'bg-red-500/10'}`}>\n                {overallTrend > 0 ? (\n                  <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                ) : (\n                  <TrendingDown className=\"h-5 w-5 text-red-500\" />\n                )}\n              </div>\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-2\">\n              {overallTrend > 0 ? '+' : ''}{overallTrend.toFixed(1)}% trend\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-vc-card border-vc-border hover-lift\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-vc-text-muted\">Success Rate</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  {Math.round((analyses.filter(a => (a.overallScore || 0) >= 7).length / analyses.length) * 100)}%\n                </p>\n              </div>\n              <Target className=\"h-5 w-5 text-green-400\" />\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-2\">\n              Score 7+ candidates\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-vc-card border-vc-border hover-lift\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-vc-text-muted\">Analyzed</p>\n                <p className=\"text-2xl font-bold text-vc-primary\">\n                  {analyses.length}\n                </p>\n              </div>\n              <Activity className=\"h-5 w-5 text-vc-primary\" />\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-2\">\n              Total businesses\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-vc-card border-vc-border hover-lift\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-xs text-vc-text-muted\">Best Category</p>\n                <p className=\"text-lg font-bold text-vc-secondary\">\n                  {categoryData.sort((a, b) => b.avg - a.avg)[0]?.name.split(' ')[0]}\n                </p>\n              </div>\n              <div className=\"text-2xl font-bold text-vc-secondary\">\n                {categoryData.sort((a, b) => b.avg - a.avg)[0]?.avg.toFixed(1)}\n              </div>\n            </div>\n            <p className=\"text-xs text-vc-text-muted mt-2\">\n              Highest avg score\n            </p>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Charts */}\n      <Tabs defaultValue=\"trends\" className=\"w-full\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <TabsList className=\"bg-vc-card border-vc-border\">\n            <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n            <TabsTrigger value=\"distribution\">Distribution</TabsTrigger>\n            <TabsTrigger value=\"comparison\">Comparison</TabsTrigger>\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          </TabsList>\n\n          <Select value={selectedMetric} onValueChange={setSelectedMetric}>\n            <SelectTrigger className=\"w-48 bg-vc-card border-vc-border\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"overallScore\">Overall Score</SelectItem>\n              <SelectItem value=\"technicalComplexity\">Technical Complexity</SelectItem>\n              <SelectItem value=\"marketOpportunity\">Market Opportunity</SelectItem>\n              <SelectItem value=\"competitiveLandscape\">Competitive Landscape</SelectItem>\n              <SelectItem value=\"resourceRequirements\">Resource Requirements</SelectItem>\n              <SelectItem value=\"timeToMarket\">Time to Market</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <TabsContent value=\"trends\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Card className=\"bg-vc-card border-vc-border\">\n              <CardHeader>\n                <CardTitle className=\"text-vc-text\">Score Trends Over Time</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={350}>\n                  <AreaChart data={timeSeriesData}>\n                    <defs>\n                      <linearGradient id=\"colorScore\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"hsl(16, 100%, 50%)\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"hsl(16, 100%, 50%)\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--vc-border)\" opacity={0.3} />\n                    <XAxis dataKey=\"date\" stroke=\"var(--vc-text-muted)\" />\n                    <YAxis stroke=\"var(--vc-text-muted)\" domain={[0, 10]} />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Area\n                      type=\"monotone\"\n                      dataKey={selectedMetric}\n                      stroke=\"hsl(16, 100%, 50%)\"\n                      fillOpacity={1}\n                      fill=\"url(#colorScore)\"\n                      strokeWidth={2}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"distribution\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Card className=\"bg-vc-card border-vc-border\">\n              <CardHeader>\n                <CardTitle className=\"text-vc-text\">Category Score Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={350}>\n                  <BarChart data={categoryData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" stroke=\"var(--vc-border)\" opacity={0.3} />\n                    <XAxis dataKey=\"name\" angle={-45} textAnchor=\"end\" height={100} stroke=\"var(--vc-text-muted)\" />\n                    <YAxis stroke=\"var(--vc-text-muted)\" domain={[0, 10]} />\n                    <Tooltip content={<CustomTooltip />} />\n                    <Bar dataKey=\"avg\" radius={[8, 8, 0, 0]}>\n                      {categoryData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Bar>\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"comparison\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Card className=\"bg-vc-card border-vc-border\">\n              <CardHeader>\n                <CardTitle className=\"text-vc-text\">Top 5 Businesses Comparison</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={350}>\n                  <RadarChart data={radarData}>\n                    <PolarGrid stroke=\"var(--vc-border)\" />\n                    <PolarAngleAxis dataKey=\"category\" stroke=\"var(--vc-text-muted)\" />\n                    <PolarRadiusAxis angle={90} domain={[0, 10]} stroke=\"var(--vc-text-muted)\" />\n                    {topAnalyses.map((_, index) => (\n                      <Radar\n                        key={`business${index + 1}`}\n                        name={`Business ${index + 1}`}\n                        dataKey={`business${index + 1}`}\n                        stroke={[\"hsl(16, 100%, 50%)\", \"hsl(348, 83%, 47%)\", \"hsl(51, 100%, 50%)\", \"hsl(120, 60%, 50%)\", \"hsl(280, 60%, 50%)\"][index]}\n                        fill={[\"hsl(16, 100%, 50%)\", \"hsl(348, 83%, 47%)\", \"hsl(51, 100%, 50%)\", \"hsl(120, 60%, 50%)\", \"hsl(280, 60%, 50%)\"][index]}\n                        fillOpacity={0.3}\n                      />\n                    ))}\n                    <Tooltip content={<CustomTooltip />} />\n                    <Legend />\n                  </RadarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </TabsContent>\n\n        <TabsContent value=\"performance\">\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Card className=\"bg-vc-card border-vc-border\">\n              <CardHeader>\n                <CardTitle className=\"text-vc-text\">Score Distribution</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={350}>\n                  <PieChart>\n                    <Pie\n                      data={[\n                        { name: \"Excellent (9-10)\", value: analyses.filter(a => (a.overallScore || 0) >= 9).length, color: \"hsl(120, 60%, 50%)\" },\n                        { name: \"Good (7-8)\", value: analyses.filter(a => (a.overallScore || 0) >= 7 && (a.overallScore || 0) < 9).length, color: \"hsl(51, 100%, 50%)\" },\n                        { name: \"Average (5-6)\", value: analyses.filter(a => (a.overallScore || 0) >= 5 && (a.overallScore || 0) < 7).length, color: \"hsl(16, 100%, 50%)\" },\n                        { name: \"Poor (<5)\", value: analyses.filter(a => (a.overallScore || 0) < 5).length, color: \"hsl(0, 85%, 60%)\" },\n                      ]}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={120}\n                      dataKey=\"value\"\n                      label={({ name, value }) => `${name}: ${value}`}\n                    >\n                      {[\n                        { color: \"hsl(120, 60%, 50%)\" },\n                        { color: \"hsl(51, 100%, 50%)\" },\n                        { color: \"hsl(16, 100%, 50%)\" },\n                        { color: \"hsl(0, 85%, 60%)\" },\n                      ].map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip content={<CustomTooltip />} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16704},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { motion } from \"framer-motion\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      className=\"relative h-9 w-9 rounded-lg border border-neutral-200 dark:border-neutral-800 bg-white dark:bg-neutral-900 hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-all duration-300\"\n      data-testid=\"button-theme-toggle\"\n    >\n      <motion.div\n        initial={false}\n        animate={{\n          scale: theme === \"dark\" ? 1 : 0,\n          opacity: theme === \"dark\" ? 1 : 0,\n          rotate: theme === \"dark\" ? 0 : 180,\n        }}\n        transition={{\n          duration: 0.3,\n          type: \"spring\",\n          stiffness: 200,\n          damping: 15,\n        }}\n        className=\"absolute inset-0 flex items-center justify-center\"\n      >\n        <Moon className=\"h-4 w-4 text-neutral-600 dark:text-neutral-300\" />\n      </motion.div>\n      \n      <motion.div\n        initial={false}\n        animate={{\n          scale: theme === \"light\" ? 1 : 0,\n          opacity: theme === \"light\" ? 1 : 0,\n          rotate: theme === \"light\" ? 0 : -180,\n        }}\n        transition={{\n          duration: 0.3,\n          type: \"spring\",\n          stiffness: 200,\n          damping: 15,\n        }}\n        className=\"absolute inset-0 flex items-center justify-center\"\n      >\n        <Sun className=\"h-4 w-4 text-orange-500\" />\n      </motion.div>\n    </Button>\n  );\n}","size_bytes":1633},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Check localStorage first\n    const stored = localStorage.getItem(\"theme\");\n    if (stored === \"light\" || stored === \"dark\") {\n      return stored;\n    }\n    // Check system preference\n    if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      return \"dark\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"dark\" ? \"light\" : \"dark\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1345},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4208},"server/services/workflow-stages.ts":{"content":"import { AIProviderService } from './ai-providers';\n\nexport interface StagePromptContext {\n  analysisData: any;\n  previousStageData?: any;\n  allStagesData?: any[];\n}\n\nexport class WorkflowStageService {\n  constructor(private aiService: AIProviderService) {}\n\n  async generateStageContent(\n    stageNumber: number,\n    context: StagePromptContext\n  ): Promise<any> {\n    if (stageNumber === 1) {\n      return null; // Discovery already completed during initial analysis\n    }\n\n    const prompt = this.getEnhancedStagePrompt(stageNumber, context);\n    const schema = this.getEnhancedStageSchema(stageNumber);\n    const systemPrompt = this.getStageSystemPrompt(stageNumber);\n\n    const result = await this.aiService.generateStructuredContent(\n      prompt,\n      schema,\n      systemPrompt\n    );\n\n    // Add metadata and milestones\n    return {\n      ...result,\n      milestones: this.generateMilestones(stageNumber, result),\n      completionCriteria: this.getCompletionCriteria(stageNumber),\n      nextStepActions: this.getNextStepActions(stageNumber)\n    };\n  }\n\n  private getEnhancedStagePrompt(\n    stageNumber: number,\n    context: StagePromptContext\n  ): string {\n    const { analysisData, previousStageData } = context;\n\n    const prompts: { [key: number]: string } = {\n      2: `\n        Apply the \"Lazy Entrepreneur Filter\" to ${analysisData.url} (${analysisData.businessModel}).\n        \n        Current Score: ${analysisData.overallScore}/10\n        Business Model: ${analysisData.businessModel}\n        Revenue Stream: ${analysisData.revenueStream}\n        Target Market: ${analysisData.targetMarket}\n        \n        Evaluate based on:\n        1. EFFORT ANALYSIS\n           - Technical complexity (current score: ${analysisData.scoreDetails?.technicalComplexity?.score}/10)\n           - Resource requirements (current score: ${analysisData.scoreDetails?.resourceRequirements?.score}/10)\n           - Time to market (current score: ${analysisData.scoreDetails?.timeToMarket?.score}/10)\n        \n        2. REWARD POTENTIAL\n           - Market opportunity (current score: ${analysisData.scoreDetails?.marketOpportunity?.score}/10)\n           - Revenue potential based on ${analysisData.revenueStream}\n           - Competitive advantage possibilities\n        \n        3. LAZY OPTIMIZATION\n           - Identify shortcuts and simplifications\n           - Find existing tools/APIs to leverage\n           - Suggest MVV (Minimum Viable Version) approach\n           - List what NOT to build\n        \n        Provide actionable recommendation with clear go/no-go decision.\n      `,\n      \n      3: `\n        Create a detailed MVP Launch Plan for cloning ${analysisData.businessModel} business.\n        \n        Previous Filter Result: ${previousStageData?.recommendation || 'PROCEED'}\n        Suggested Modifications: ${JSON.stringify(previousStageData?.modifications || [])}\n        \n        Design the MVP with:\n        \n        1. CORE FEATURE SET (Limit to 5-7 essential features)\n           - Focus on ${analysisData.revenueStream} monetization\n           - Target ${analysisData.targetMarket} specifically\n           - Consider competitive landscape score: ${analysisData.scoreDetails?.competitiveLandscape?.score}/10\n        \n        2. TECHNICAL ARCHITECTURE\n           - Modern, scalable tech stack\n           - Cloud-first approach\n           - API-driven design\n           - Security best practices\n        \n        3. DEVELOPMENT ROADMAP\n           - Sprint-based timeline (2-week sprints)\n           - Milestone deliverables\n           - Testing strategy\n           - Launch checklist\n        \n        4. RESOURCE PLANNING\n           - Team composition (roles and skills)\n           - Budget breakdown by category\n           - Tool and service costs\n           - Risk buffer allocation\n        \n        Focus on speed to market while maintaining quality.\n      `,\n      \n      4: `\n        Design a comprehensive Demand Testing Strategy for the MVP.\n        \n        MVP Features: ${JSON.stringify(previousStageData?.coreFeatures || [])}\n        Timeline: ${previousStageData?.timeline || '3-6 months'}\n        Budget: ${previousStageData?.budgetEstimate || 'TBD'}\n        \n        Create testing framework including:\n        \n        1. PRE-LAUNCH VALIDATION\n           - Landing page A/B tests\n           - Value proposition testing\n           - Pricing sensitivity analysis\n           - Feature prioritization surveys\n        \n        2. SOFT LAUNCH STRATEGY\n           - Beta user acquisition (target 100-500 users)\n           - Cohort analysis setup\n           - Feedback loops implementation\n           - Iteration protocol\n        \n        3. METRICS FRAMEWORK\n           - North star metric definition\n           - Leading indicators\n           - Lagging indicators\n           - Dashboard requirements\n        \n        4. PIVOT TRIGGERS\n           - Red flags to watch\n           - Decision criteria\n           - Alternative directions\n           - Sunset conditions\n        \n        Focus on data-driven validation with clear success/failure criteria.\n      `,\n      \n      5: `\n        Develop a Scaling & Growth Strategy for validated business.\n        \n        Validation Results: ${JSON.stringify(previousStageData?.successMetrics || [])}\n        Current Target Market: ${analysisData.targetMarket}\n        \n        Design growth plan including:\n        \n        1. GROWTH CHANNELS (Prioritized by CAC/LTV)\n           - Organic growth tactics\n           - Paid acquisition channels\n           - Partnership opportunities\n           - Content marketing strategy\n           - Community building\n        \n        2. PRODUCT EXPANSION\n           - Feature roadmap (6-12 months)\n           - Platform extensions\n           - Market segment expansion\n           - Geographic expansion\n        \n        3. OPERATIONAL SCALING\n           - Team growth plan\n           - System architecture evolution\n           - Process automation priorities\n           - Quality maintenance strategies\n        \n        4. FINANCIAL PROJECTIONS\n           - Revenue growth targets\n           - Unit economics optimization\n           - Funding requirements\n           - Profitability timeline\n        \n        Focus on sustainable, capital-efficient growth.\n      `,\n      \n      6: `\n        Map AI Automation Opportunities for ${analysisData.businessModel}.\n        \n        Current Scale: Based on growth strategies ${JSON.stringify(previousStageData?.growthStrategies || [])}\n        \n        Identify AI integration points:\n        \n        1. CUSTOMER EXPERIENCE AI\n           - Chatbot/support automation\n           - Personalization engine\n           - Recommendation systems\n           - Predictive user behavior\n        \n        2. OPERATIONAL AI\n           - Process automation\n           - Quality assurance\n           - Fraud detection\n           - Resource optimization\n        \n        3. MARKETING & SALES AI\n           - Lead scoring\n           - Content generation\n           - Campaign optimization\n           - Churn prediction\n        \n        4. PRODUCT AI FEATURES\n           - Core feature enhancements\n           - AI-native features\n           - Data insights products\n           - API offerings\n        \n        5. IMPLEMENTATION ROADMAP\n           - Priority matrix (impact vs effort)\n           - Build vs buy decisions\n           - Integration timeline\n           - ROI projections\n        \n        Focus on practical, high-ROI implementations.\n      `\n    };\n\n    return prompts[stageNumber] || '';\n  }\n\n  private getEnhancedStageSchema(stageNumber: number): any {\n    const schemas: { [key: number]: any } = {\n      2: {\n        type: \"object\",\n        properties: {\n          recommendation: {\n            type: \"string\",\n            enum: [\"PROCEED\", \"MODIFY\", \"SKIP\"]\n          },\n          effortScore: {\n            type: \"number\",\n            minimum: 1,\n            maximum: 10\n          },\n          rewardScore: {\n            type: \"number\",\n            minimum: 1,\n            maximum: 10\n          },\n          effortBreakdown: {\n            type: \"object\",\n            properties: {\n              technical: { type: \"number\" },\n              marketing: { type: \"number\" },\n              operational: { type: \"number\" },\n              financial: { type: \"number\" }\n            }\n          },\n          reasoning: {\n            type: \"string\"\n          },\n          modifications: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          shortcuts: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          toolsToLeverage: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          riskMitigation: {\n            type: \"array\",\n            items: { type: \"string\" }\n          }\n        }\n      },\n      \n      3: {\n        type: \"object\",\n        properties: {\n          coreFeatures: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                name: { type: \"string\" },\n                priority: { type: \"string\", enum: [\"Must Have\", \"Should Have\", \"Nice to Have\"] },\n                effort: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] },\n                value: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] }\n              }\n            }\n          },\n          techStack: {\n            type: \"object\",\n            properties: {\n              frontend: { type: \"array\", items: { type: \"string\" } },\n              backend: { type: \"array\", items: { type: \"string\" } },\n              database: { type: \"array\", items: { type: \"string\" } },\n              infrastructure: { type: \"array\", items: { type: \"string\" } },\n              thirdPartyServices: { type: \"array\", items: { type: \"string\" } }\n            }\n          },\n          timeline: {\n            type: \"object\",\n            properties: {\n              total: { type: \"string\" },\n              phases: {\n                type: \"array\",\n                items: {\n                  type: \"object\",\n                  properties: {\n                    name: { type: \"string\" },\n                    duration: { type: \"string\" },\n                    deliverables: { type: \"array\", items: { type: \"string\" } }\n                  }\n                }\n              }\n            }\n          },\n          teamRequirements: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                role: { type: \"string\" },\n                level: { type: \"string\" },\n                commitment: { type: \"string\" },\n                cost: { type: \"string\" }\n              }\n            }\n          },\n          budgetBreakdown: {\n            type: \"object\",\n            properties: {\n              development: { type: \"string\" },\n              infrastructure: { type: \"string\" },\n              marketing: { type: \"string\" },\n              operations: { type: \"string\" },\n              buffer: { type: \"string\" },\n              total: { type: \"string\" }\n            }\n          },\n          validationMetrics: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          launchStrategy: {\n            type: \"string\"\n          }\n        }\n      },\n      \n      4: {\n        type: \"object\",\n        properties: {\n          validationMethods: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                method: { type: \"string\" },\n                timeline: { type: \"string\" },\n                cost: { type: \"string\" },\n                expectedOutcome: { type: \"string\" }\n              }\n            }\n          },\n          landingPageStrategy: {\n            type: \"object\",\n            properties: {\n              variants: { type: \"array\", items: { type: \"string\" } },\n              copyTesting: { type: \"array\", items: { type: \"string\" } },\n              conversionTargets: { type: \"string\" }\n            }\n          },\n          betaProgram: {\n            type: \"object\",\n            properties: {\n              targetUsers: { type: \"number\" },\n              acquisitionChannels: { type: \"array\", items: { type: \"string\" } },\n              incentives: { type: \"array\", items: { type: \"string\" } },\n              feedbackMethods: { type: \"array\", items: { type: \"string\" } }\n            }\n          },\n          pricingTests: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                model: { type: \"string\" },\n                pricePoints: { type: \"array\", items: { type: \"string\" } },\n                testMethod: { type: \"string\" }\n              }\n            }\n          },\n          successMetrics: {\n            type: \"object\",\n            properties: {\n              northStar: { type: \"string\" },\n              leading: { type: \"array\", items: { type: \"string\" } },\n              lagging: { type: \"array\", items: { type: \"string\" } },\n              targets: { type: \"object\" }\n            }\n          },\n          pivotIndicators: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                indicator: { type: \"string\" },\n                threshold: { type: \"string\" },\n                action: { type: \"string\" }\n              }\n            }\n          }\n        }\n      },\n      \n      5: {\n        type: \"object\",\n        properties: {\n          growthStrategies: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                strategy: { type: \"string\" },\n                timeline: { type: \"string\" },\n                investment: { type: \"string\" },\n                expectedROI: { type: \"string\" }\n              }\n            }\n          },\n          acquisitionChannels: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                channel: { type: \"string\" },\n                CAC: { type: \"string\" },\n                scalability: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] },\n                priority: { type: \"number\" }\n              }\n            }\n          },\n          retentionStrategies: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          productRoadmap: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                quarter: { type: \"string\" },\n                features: { type: \"array\", items: { type: \"string\" } },\n                objectives: { type: \"array\", items: { type: \"string\" } }\n              }\n            }\n          },\n          teamScaling: {\n            type: \"object\",\n            properties: {\n              currentSize: { type: \"number\" },\n              sixMonthTarget: { type: \"number\" },\n              twelveMonthTarget: { type: \"number\" },\n              keyHires: { type: \"array\", items: { type: \"string\" } }\n            }\n          },\n          infrastructure: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                component: { type: \"string\" },\n                currentState: { type: \"string\" },\n                targetState: { type: \"string\" },\n                timeline: { type: \"string\" }\n              }\n            }\n          },\n          positioning: {\n            type: \"object\",\n            properties: {\n              uniqueValue: { type: \"string\" },\n              competitiveDifferentiators: { type: \"array\", items: { type: \"string\" } },\n              messaging: { type: \"string\" }\n            }\n          },\n          financialProjections: {\n            type: \"object\",\n            properties: {\n              sixMonthRevenue: { type: \"string\" },\n              twelveMonthRevenue: { type: \"string\" },\n              burnRate: { type: \"string\" },\n              profitabilityTimeline: { type: \"string\" }\n            }\n          }\n        }\n      },\n      \n      6: {\n        type: \"object\",\n        properties: {\n          customerServiceAI: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                solution: { type: \"string\" },\n                implementation: { type: \"string\" },\n                cost: { type: \"string\" },\n                timeToValue: { type: \"string\" }\n              }\n            }\n          },\n          marketingAutomation: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                solution: { type: \"string\" },\n                useCase: { type: \"string\" },\n                expectedImpact: { type: \"string\" }\n              }\n            }\n          },\n          operationsAI: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                process: { type: \"string\" },\n                automationApproach: { type: \"string\" },\n                efficiencyGain: { type: \"string\" }\n              }\n            }\n          },\n          productFeatureAI: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                feature: { type: \"string\" },\n                aiEnhancement: { type: \"string\" },\n                userValue: { type: \"string\" },\n                complexity: { type: \"string\", enum: [\"Low\", \"Medium\", \"High\"] }\n              }\n            }\n          },\n          dataAnalysisAI: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                analysisType: { type: \"string\" },\n                dataSource: { type: \"string\" },\n                insights: { type: \"string\" },\n                businessImpact: { type: \"string\" }\n              }\n            }\n          },\n          implementationRoadmap: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                phase: { type: \"string\" },\n                timeline: { type: \"string\" },\n                initiatives: { type: \"array\", items: { type: \"string\" } },\n                investment: { type: \"string\" }\n              }\n            }\n          },\n          roiProjections: {\n            type: \"object\",\n            properties: {\n              costSavings: { type: \"string\" },\n              revenueIncrease: { type: \"string\" },\n              efficiencyGains: { type: \"string\" },\n              paybackPeriod: { type: \"string\" }\n            }\n          },\n          buildVsBuy: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n              properties: {\n                capability: { type: \"string\" },\n                recommendation: { type: \"string\", enum: [\"Build\", \"Buy\", \"Partner\"] },\n                rationale: { type: \"string\" }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    return schemas[stageNumber] || {};\n  }\n\n  private getStageSystemPrompt(stageNumber: number): string {\n    const prompts: { [key: number]: string } = {\n      2: \"You are a pragmatic startup advisor focused on effort minimization and smart shortcuts. Be brutally honest about feasibility and provide actionable simplifications.\",\n      3: \"You are an experienced product manager and technical architect. Focus on practical, implementable plans with realistic timelines and modern best practices.\",\n      4: \"You are a growth hacker and lean startup expert. Emphasize rapid testing, data-driven decisions, and fail-fast mentality.\",\n      5: \"You are a growth strategist and scale-up advisor. Focus on sustainable, capital-efficient growth with clear metrics and milestones.\",\n      6: \"You are an AI implementation specialist. Provide practical, high-ROI automation opportunities with clear implementation paths.\"\n    };\n\n    return prompts[stageNumber] || \"You are an expert business advisor.\";\n  }\n\n  private generateMilestones(stageNumber: number, stageData: any): any[] {\n    const milestoneMaps: { [key: number]: any[] } = {\n      2: [\n        { name: \"Initial Assessment\", completed: true },\n        { name: \"Effort Analysis\", completed: true },\n        { name: \"Simplification Strategy\", completed: true },\n        { name: \"Go/No-Go Decision\", completed: true }\n      ],\n      3: [\n        { name: \"Feature Prioritization\", completed: !!stageData.coreFeatures },\n        { name: \"Tech Stack Selection\", completed: !!stageData.techStack },\n        { name: \"Timeline Definition\", completed: !!stageData.timeline },\n        { name: \"Budget Approval\", completed: !!stageData.budgetBreakdown }\n      ],\n      4: [\n        { name: \"Landing Page Launch\", completed: false },\n        { name: \"Beta User Acquisition\", completed: false },\n        { name: \"Metrics Dashboard Setup\", completed: false },\n        { name: \"First Cohort Analysis\", completed: false }\n      ],\n      5: [\n        { name: \"Growth Channel Validation\", completed: false },\n        { name: \"Product-Market Fit\", completed: false },\n        { name: \"Team Expansion\", completed: false },\n        { name: \"Series A Ready\", completed: false }\n      ],\n      6: [\n        { name: \"AI Roadmap Defined\", completed: !!stageData.implementationRoadmap },\n        { name: \"First AI Feature Live\", completed: false },\n        { name: \"Automation ROI Validated\", completed: false },\n        { name: \"Full AI Integration\", completed: false }\n      ]\n    };\n\n    return milestoneMaps[stageNumber] || [];\n  }\n\n  private getCompletionCriteria(stageNumber: number): string[] {\n    const criteria: { [key: number]: string[] } = {\n      2: [\n        \"Clear go/no-go decision made\",\n        \"All simplifications identified\",\n        \"Resource requirements validated\",\n        \"Risk mitigation plan in place\"\n      ],\n      3: [\n        \"MVP scope fully defined\",\n        \"Development team assembled\",\n        \"Budget secured\",\n        \"Launch date set\"\n      ],\n      4: [\n        \"Minimum 100 beta users acquired\",\n        \"Key metrics tracking live\",\n        \"Initial feedback collected\",\n        \"Pivot decision made\"\n      ],\n      5: [\n        \"Sustainable CAC/LTV ratio achieved\",\n        \"Growth channels validated\",\n        \"Team scaled appropriately\",\n        \"Next funding round prepared\"\n      ],\n      6: [\n        \"AI roadmap approved\",\n        \"First implementations live\",\n        \"ROI metrics validated\",\n        \"Scaling plan defined\"\n      ]\n    };\n\n    return criteria[stageNumber] || [];\n  }\n\n  private getNextStepActions(stageNumber: number): string[] {\n    const actions: { [key: number]: string[] } = {\n      2: [\n        \"Review simplification opportunities\",\n        \"Validate resource estimates\",\n        \"Seek advisor feedback\",\n        \"Proceed to MVP planning\"\n      ],\n      3: [\n        \"Assemble development team\",\n        \"Set up development environment\",\n        \"Create project roadmap\",\n        \"Begin sprint planning\"\n      ],\n      4: [\n        \"Launch landing page\",\n        \"Start user acquisition\",\n        \"Set up analytics\",\n        \"Schedule user interviews\"\n      ],\n      5: [\n        \"Optimize acquisition channels\",\n        \"Hire key positions\",\n        \"Develop partnerships\",\n        \"Prepare investor deck\"\n      ],\n      6: [\n        \"Prioritize AI initiatives\",\n        \"Start pilot implementations\",\n        \"Measure impact metrics\",\n        \"Scale successful automations\"\n      ]\n    };\n\n    return actions[stageNumber] || [];\n  }\n}","size_bytes":23505},"client/src/components/enhanced-workflow.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  ArrowRight,\n  ArrowLeft,\n  CheckCircle2,\n  Circle,\n  Clock,\n  Lock,\n  Sparkles,\n  AlertCircle,\n  Download,\n  Play,\n  RotateCcw,\n  Target,\n  Zap,\n  TrendingUp,\n  Rocket,\n  Bot,\n  ChevronRight,\n  FileDown,\n  FileJson,\n  FileText\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AIService } from \"@/lib/ai-service\";\nimport { ExportService } from \"@/lib/export-utils\";\nimport type { BusinessAnalysis, WorkflowStage } from \"@/types\";\n\ninterface EnhancedWorkflowProps {\n  analysis: BusinessAnalysis;\n}\n\nconst STAGE_CONFIG = [\n  {\n    number: 1,\n    name: 'Discovery & Selection',\n    icon: Target,\n    color: 'from-blue-500 to-cyan-500',\n    description: 'Initial business analysis and validation'\n  },\n  {\n    number: 2,\n    name: 'Lazy-Entrepreneur Filter',\n    icon: Zap,\n    color: 'from-purple-500 to-pink-500',\n    description: 'Effort vs reward optimization'\n  },\n  {\n    number: 3,\n    name: 'MVP Launch Planning',\n    icon: Rocket,\n    color: 'from-green-500 to-emerald-500',\n    description: 'Minimum viable product roadmap'\n  },\n  {\n    number: 4,\n    name: 'Demand Testing Strategy',\n    icon: TrendingUp,\n    color: 'from-orange-500 to-yellow-500',\n    description: 'Market validation approach'\n  },\n  {\n    number: 5,\n    name: 'Scaling & Growth',\n    icon: Sparkles,\n    color: 'from-red-500 to-rose-500',\n    description: 'Sustainable expansion planning'\n  },\n  {\n    number: 6,\n    name: 'AI Automation Mapping',\n    icon: Bot,\n    color: 'from-indigo-500 to-purple-500',\n    description: 'Intelligence integration strategy'\n  }\n];\n\nexport function EnhancedWorkflow({ analysis }: EnhancedWorkflowProps) {\n  const [activeStage, setActiveStage] = useState(analysis.currentStage || 1);\n  const [expandedStage, setExpandedStage] = useState<number | null>(activeStage);\n  const [autoProgress, setAutoProgress] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: stages = [] } = useQuery({\n    queryKey: ['/api/workflow-stages', analysis.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/workflow-stages/${analysis.id}`);\n      return response.json();\n    },\n  });\n\n  const generateStageMutation = useMutation({\n    mutationFn: (stageNumber: number) => \n      AIService.generateStageContent(analysis.id, stageNumber),\n    onSuccess: (stage, stageNumber) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/workflow-stages', analysis.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/business-analyses'] });\n      \n      toast({\n        title: \"Stage Generated\",\n        description: `${STAGE_CONFIG[stageNumber - 1].name} content generated successfully`,\n      });\n\n      // Auto-progress to next stage if enabled\n      if (autoProgress && stageNumber < 6) {\n        setTimeout(() => {\n          setActiveStage(stageNumber + 1);\n          generateStageMutation.mutate(stageNumber + 1);\n        }, 2000);\n      }\n    },\n    onError: (error: any) => {\n      setAutoProgress(false);\n      toast({\n        title: \"Generation Failed\",\n        description: error.message || \"Failed to generate stage content\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStageStatus = (stageNumber: number) => {\n    const stage = stages.find((s: WorkflowStage) => s.stageNumber === stageNumber);\n    if (stage?.status === 'completed') return 'completed';\n    if (stage?.status === 'in_progress') return 'in_progress';\n    if (stageNumber <= (analysis.currentStage || 1)) return 'available';\n    return 'locked';\n  };\n\n  const getStageData = (stageNumber: number) => {\n    return stages.find((s: WorkflowStage) => s.stageNumber === stageNumber);\n  };\n\n  const calculateOverallProgress = () => {\n    const completedStages = stages.filter((s: WorkflowStage) => s.status === 'completed').length;\n    return (completedStages / 6) * 100;\n  };\n\n  const handleExportStage = (stage: WorkflowStage, format: 'markdown' | 'json') => {\n    ExportService.exportStage(stage, analysis, { format, includeMetadata: true });\n    toast({\n      title: \"Export Successful\",\n      description: `Stage ${stage.stageNumber} exported as ${format.toUpperCase()}`,\n    });\n  };\n\n  const handleExportFullWorkflow = (format: 'markdown' | 'json') => {\n    const completedStages = stages.filter((s: WorkflowStage) => s.status === 'completed');\n    if (completedStages.length === 0) {\n      toast({\n        title: \"No Data to Export\",\n        description: \"Please generate at least one stage before exporting\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    ExportService.exportFullWorkflow(completedStages, analysis, format);\n    toast({\n      title: \"Export Successful\",\n      description: `Full workflow exported as ${format.toUpperCase()}`,\n    });\n  };\n\n  const StageIcon = ({ stage, status }: { stage: typeof STAGE_CONFIG[0], status: string }) => {\n    const Icon = stage.icon;\n    \n    if (status === 'completed') {\n      return (\n        <motion.div\n          initial={{ scale: 0 }}\n          animate={{ scale: 1 }}\n          className=\"relative\"\n        >\n          <div className={`w-12 h-12 rounded-full bg-gradient-to-br ${stage.color} flex items-center justify-center`}>\n            <CheckCircle2 className=\"h-6 w-6 text-white\" />\n          </div>\n          <motion.div\n            className=\"absolute inset-0 rounded-full bg-white/20\"\n            animate={{ scale: [1, 1.2, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n          />\n        </motion.div>\n      );\n    }\n    \n    if (status === 'in_progress') {\n      return (\n        <motion.div\n          animate={{ rotate: 360 }}\n          transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n          className=\"relative\"\n        >\n          <div className={`w-12 h-12 rounded-full bg-gradient-to-br ${stage.color} flex items-center justify-center opacity-70`}>\n            <Icon className=\"h-6 w-6 text-white\" />\n          </div>\n        </motion.div>\n      );\n    }\n    \n    if (status === 'available') {\n      return (\n        <div className={`w-12 h-12 rounded-full bg-gradient-to-br ${stage.color} flex items-center justify-center`}>\n          <Icon className=\"h-6 w-6 text-white\" />\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"w-12 h-12 rounded-full bg-gray-700 flex items-center justify-center\">\n        <Lock className=\"h-5 w-5 text-gray-500\" />\n      </div>\n    );\n  };\n\n  const renderStageContent = (stageNumber: number) => {\n    const stageData = getStageData(stageNumber);\n    const status = getStageStatus(stageNumber);\n    \n    if (status === 'locked') {\n      return (\n        <div className=\"text-center py-12\">\n          <Lock className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n          <p className=\"text-vc-text-muted\">\n            Complete previous stages to unlock this content\n          </p>\n        </div>\n      );\n    }\n    \n    if (!stageData?.data) {\n      return (\n        <div className=\"text-center py-12\">\n          <Button\n            onClick={() => generateStageMutation.mutate(stageNumber)}\n            disabled={generateStageMutation.isPending}\n            className=\"bg-gradient-to-r from-vc-primary to-vc-secondary hover:opacity-90 text-white font-semibold shadow-neon\"\n            data-testid={`button-generate-stage-${stageNumber}`}\n          >\n            {generateStageMutation.isPending ? (\n              <>\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"mr-2\"\n                >\n                  <RotateCcw className=\"h-4 w-4\" />\n                </motion.div>\n                Generating...\n              </>\n            ) : (\n              <>\n                <Sparkles className=\"mr-2 h-4 w-4\" />\n                Generate {STAGE_CONFIG[stageNumber - 1].name}\n              </>\n            )}\n          </Button>\n        </div>\n      );\n    }\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"space-y-6\"\n      >\n        {stageData.data.milestones && (\n          <Card className=\"bg-vc-card border-vc-border\">\n            <CardHeader>\n              <CardTitle className=\"text-vc-text text-lg\">Milestones & Progress</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {stageData.data.milestones.map((milestone: any, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-3\">\n                    {milestone.completed ? (\n                      <CheckCircle2 className=\"h-5 w-5 text-green-400\" />\n                    ) : (\n                      <Circle className=\"h-5 w-5 text-gray-500\" />\n                    )}\n                    <span className={`text-sm ${milestone.completed ? 'text-vc-text' : 'text-vc-text-muted'}`}>\n                      {milestone.name}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {stageData.data.completionCriteria && (\n          <Card className=\"bg-vc-card border-vc-border\">\n            <CardHeader>\n              <CardTitle className=\"text-vc-text text-lg\">Completion Criteria</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <ul className=\"list-disc list-inside space-y-2 text-vc-text-muted\">\n                {stageData.data.completionCriteria.map((criteria: string, index: number) => (\n                  <li key={index}>{criteria}</li>\n                ))}\n              </ul>\n            </CardContent>\n          </Card>\n        )}\n        \n        {stageData.data.nextStepActions && (\n          <Card className=\"bg-vc-card border-vc-border\">\n            <CardHeader>\n              <CardTitle className=\"text-vc-text text-lg\">Next Steps</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                {stageData.data.nextStepActions.map((action: string, index: number) => (\n                  <div key={index} className=\"flex items-start space-x-2\">\n                    <ChevronRight className=\"h-4 w-4 text-vc-accent mt-0.5\" />\n                    <span className=\"text-sm text-vc-text-muted\">{action}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n        \n        {/* Stage-specific content rendering based on stage number */}\n        {stageNumber === 1 && renderDiscoveryContent()}\n        {stageNumber === 2 && renderFilterContent(stageData.data)}\n        {stageNumber === 3 && renderMVPContent(stageData.data)}\n        {stageNumber === 4 && renderDemandContent(stageData.data)}\n        {stageNumber === 5 && renderGrowthContent(stageData.data)}\n        {stageNumber === 6 && renderAIContent(stageData.data)}\n      </motion.div>\n    );\n  };\n\n  const renderDiscoveryContent = () => {\n    if (!analysis.scoreDetails) return null;\n    \n    return (\n      <div className=\"space-y-6\">\n        <Card className=\"bg-vc-card border-vc-border\">\n          <CardHeader>\n            <CardTitle className=\"text-vc-text\">Analysis Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-xs text-vc-text-muted\">Business Model</label>\n                <p className=\"text-vc-text font-medium\">{analysis.businessModel}</p>\n              </div>\n              <div>\n                <label className=\"text-xs text-vc-text-muted\">Target Market</label>\n                <p className=\"text-vc-text font-medium\">{analysis.targetMarket}</p>\n              </div>\n              <div>\n                <label className=\"text-xs text-vc-text-muted\">Revenue Stream</label>\n                <p className=\"text-vc-text font-medium\">{analysis.revenueStream}</p>\n              </div>\n              <div>\n                <label className=\"text-xs text-vc-text-muted\">Overall Score</label>\n                <Badge className=\"bg-vc-primary text-white\">{analysis.overallScore}/10</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  };\n\n  const renderFilterContent = (data: any) => (\n    <Card className=\"bg-vc-card border-vc-border\">\n      <CardHeader>\n        <CardTitle className=\"text-vc-text\">Lazy Entrepreneur Assessment</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center mb-6\">\n          <Badge className={`text-lg px-4 py-2 ${\n            data.recommendation === 'PROCEED' ? 'bg-green-500' :\n            data.recommendation === 'MODIFY' ? 'bg-yellow-500' :\n            'bg-red-500'\n          }`}>\n            {data.recommendation}\n          </Badge>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <div className=\"text-center\">\n            <p className=\"text-sm text-vc-text-muted mb-2\">Effort Score</p>\n            <div className=\"text-3xl font-bold text-vc-accent\">{data.effortScore}/10</div>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-sm text-vc-text-muted mb-2\">Reward Score</p>\n            <div className=\"text-3xl font-bold text-vc-primary\">{data.rewardScore}/10</div>\n          </div>\n        </div>\n        \n        <p className=\"text-vc-text-muted\">{data.reasoning}</p>\n      </CardContent>\n    </Card>\n  );\n\n  const renderMVPContent = (data: any) => (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-vc-card border-vc-border\">\n        <CardHeader>\n          <CardTitle className=\"text-vc-text\">Core MVP Features</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {data.coreFeatures?.map((feature: any, index: number) => (\n              <div key={index} className=\"flex items-center justify-between p-3 bg-vc-dark rounded-lg\">\n                <span className=\"text-vc-text\">{feature.name || feature}</span>\n                <div className=\"flex space-x-2\">\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {feature.priority || 'Must Have'}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {feature.effort || 'Medium'}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n      \n      {data.techStack && (\n        <Card className=\"bg-vc-card border-vc-border\">\n          <CardHeader>\n            <CardTitle className=\"text-vc-text\">Tech Stack</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-wrap gap-2\">\n              {Object.entries(data.techStack).map(([category, techs]: [string, any]) => (\n                <div key={category}>\n                  <p className=\"text-xs text-vc-text-muted mb-2\">{category}</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {(Array.isArray(techs) ? techs : [techs]).map((tech: string, i: number) => (\n                      <Badge key={i} variant=\"secondary\">{tech}</Badge>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n\n  const renderDemandContent = (data: any) => (\n    <Card className=\"bg-vc-card border-vc-border\">\n      <CardHeader>\n        <CardTitle className=\"text-vc-text\">Demand Testing Strategy</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {data.validationMethods?.map((method: any, index: number) => (\n          <div key={index} className=\"p-3 bg-vc-dark rounded-lg\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-vc-text font-medium\">\n                {typeof method === 'string' ? method : method.method}\n              </span>\n              {method.timeline && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <Clock className=\"h-3 w-3 mr-1\" />\n                  {method.timeline}\n                </Badge>\n              )}\n            </div>\n            {method.expectedOutcome && (\n              <p className=\"text-sm text-vc-text-muted\">{method.expectedOutcome}</p>\n            )}\n          </div>\n        ))}\n      </CardContent>\n    </Card>\n  );\n\n  const renderGrowthContent = (data: any) => (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-vc-card border-vc-border\">\n        <CardHeader>\n          <CardTitle className=\"text-vc-text\">Growth Strategies</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {data.growthStrategies?.map((strategy: any, index: number) => (\n              <div key={index} className=\"flex items-start space-x-3\">\n                <TrendingUp className=\"h-5 w-5 text-vc-primary mt-0.5\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-vc-text\">\n                    {typeof strategy === 'string' ? strategy : strategy.strategy}\n                  </p>\n                  {strategy.expectedROI && (\n                    <p className=\"text-xs text-vc-text-muted mt-1\">ROI: {strategy.expectedROI}</p>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const renderAIContent = (data: any) => (\n    <Card className=\"bg-vc-card border-vc-border\">\n      <CardHeader>\n        <CardTitle className=\"text-vc-text\">AI Automation Opportunities</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {data.customerServiceAI?.map((item: any, index: number) => (\n            <div key={index} className=\"p-3 bg-vc-dark rounded-lg\">\n              <div className=\"flex items-start space-x-3\">\n                <Bot className=\"h-5 w-5 text-vc-accent mt-0.5\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-vc-text font-medium\">\n                    {typeof item === 'string' ? item : item.solution}\n                  </p>\n                  {item.timeToValue && (\n                    <p className=\"text-xs text-vc-text-muted mt-1\">Time to value: {item.timeToValue}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Overall Progress */}\n      <Card className=\"bg-vc-card border-vc-border\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-vc-text\">Workflow Progress</h3>\n              <p className=\"text-sm text-vc-text-muted\">\n                {stages.filter((s: WorkflowStage) => s.status === 'completed').length} of 6 stages completed\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"bg-vc-card border-vc-border hover:border-vc-primary\"\n                    data-testid=\"button-export-workflow\"\n                  >\n                    <Download className=\"h-4 w-4 mr-1\" />\n                    Export All\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"bg-vc-card border-vc-border\">\n                  <DropdownMenuLabel className=\"text-vc-text\">Export Format</DropdownMenuLabel>\n                  <DropdownMenuSeparator className=\"bg-vc-border\" />\n                  <DropdownMenuItem\n                    className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n                    onClick={() => handleExportFullWorkflow('markdown')}\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    Markdown Report\n                  </DropdownMenuItem>\n                  <DropdownMenuItem\n                    className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n                    onClick={() => handleExportFullWorkflow('json')}\n                  >\n                    <FileJson className=\"h-4 w-4 mr-2\" />\n                    JSON Data\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAutoProgress(!autoProgress)}\n                className={`${autoProgress ? 'bg-vc-primary text-white' : ''}`}\n                data-testid=\"button-auto-progress\"\n              >\n                <Play className=\"h-4 w-4 mr-1\" />\n                Auto Progress\n              </Button>\n            </div>\n          </div>\n          <Progress value={calculateOverallProgress()} className=\"h-2 bg-vc-dark\" />\n        </CardContent>\n      </Card>\n\n      {/* Stage Navigation */}\n      <div className=\"flex items-center justify-between overflow-x-auto pb-4\">\n        {STAGE_CONFIG.map((stage) => {\n          const status = getStageStatus(stage.number);\n          const isActive = activeStage === stage.number;\n          \n          return (\n            <motion.div\n              key={stage.number}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"flex-shrink-0\"\n            >\n              <button\n                onClick={() => status !== 'locked' && setActiveStage(stage.number)}\n                disabled={status === 'locked'}\n                className={`relative flex flex-col items-center space-y-2 p-3 rounded-lg transition-all ${\n                  isActive ? 'bg-vc-dark' : ''\n                } ${status === 'locked' ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:bg-vc-dark/50'}`}\n                data-testid={`stage-nav-${stage.number}`}\n              >\n                <StageIcon stage={stage} status={status} />\n                <span className={`text-xs font-medium ${\n                  isActive ? 'text-vc-text' : 'text-vc-text-muted'\n                }`}>\n                  Stage {stage.number}\n                </span>\n                <span className={`text-xs ${\n                  isActive ? 'text-vc-text-muted' : 'text-gray-600'\n                } max-w-[100px] text-center`}>\n                  {stage.name}\n                </span>\n                \n                {/* Connection line to next stage */}\n                {stage.number < 6 && (\n                  <div className={`absolute left-full top-6 w-8 h-0.5 ${\n                    status === 'completed' ? 'bg-green-500' : 'bg-gray-700'\n                  }`} />\n                )}\n              </button>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Stage Content */}\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={activeStage}\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -20 }}\n          transition={{ duration: 0.3 }}\n        >\n          <Card className=\"bg-vc-card border-vc-border\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className={`w-10 h-10 rounded-full bg-gradient-to-br ${\n                    STAGE_CONFIG[activeStage - 1].color\n                  } flex items-center justify-center`}>\n                    {(() => {\n                      const StageIcon = STAGE_CONFIG[activeStage - 1].icon;\n                      return <StageIcon className=\"h-5 w-5 text-white\" />;\n                    })()}\n                  </div>\n                  <div>\n                    <CardTitle className=\"text-vc-text\">\n                      {STAGE_CONFIG[activeStage - 1].name}\n                    </CardTitle>\n                    <p className=\"text-sm text-vc-text-muted\">\n                      {STAGE_CONFIG[activeStage - 1].description}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  {getStageData(activeStage)?.data && (\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          data-testid={`button-export-stage-${activeStage}`}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent className=\"bg-vc-card border-vc-border\">\n                        <DropdownMenuLabel className=\"text-vc-text\">Export Stage {activeStage}</DropdownMenuLabel>\n                        <DropdownMenuSeparator className=\"bg-vc-border\" />\n                        <DropdownMenuItem\n                          className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n                          onClick={() => {\n                            const stage = getStageData(activeStage);\n                            if (stage) handleExportStage(stage, 'markdown');\n                          }}\n                        >\n                          <FileText className=\"h-4 w-4 mr-2\" />\n                          Markdown\n                        </DropdownMenuItem>\n                        <DropdownMenuItem\n                          className=\"text-vc-text hover:bg-vc-dark cursor-pointer\"\n                          onClick={() => {\n                            const stage = getStageData(activeStage);\n                            if (stage) handleExportStage(stage, 'json');\n                          }}\n                        >\n                          <FileJson className=\"h-4 w-4 mr-2\" />\n                          JSON\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  )}\n                  {activeStage > 1 && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setActiveStage(activeStage - 1)}\n                      data-testid=\"button-prev-stage\"\n                    >\n                      <ArrowLeft className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                  {activeStage < 6 && getStageStatus(activeStage + 1) !== 'locked' && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => setActiveStage(activeStage + 1)}\n                      data-testid=\"button-next-stage\"\n                    >\n                      <ArrowRight className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {renderStageContent(activeStage)}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}","size_bytes":28180},"client/src/lib/export-utils.ts":{"content":"import type { BusinessAnalysis, WorkflowStage } from \"@/types\";\n\ninterface ExportOptions {\n  format: 'markdown' | 'json' | 'pdf';\n  includeMetadata?: boolean;\n}\n\nexport class ExportService {\n  static exportStage(stage: WorkflowStage, analysis: BusinessAnalysis, options: ExportOptions): void {\n    switch (options.format) {\n      case 'markdown':\n        this.exportMarkdown(stage, analysis, options.includeMetadata);\n        break;\n      case 'json':\n        this.exportJSON(stage, analysis, options.includeMetadata);\n        break;\n      default:\n        throw new Error(`Unsupported export format: ${options.format}`);\n    }\n  }\n\n  static exportFullWorkflow(stages: WorkflowStage[], analysis: BusinessAnalysis, format: 'markdown' | 'json'): void {\n    if (format === 'markdown') {\n      const content = this.generateFullMarkdown(stages, analysis);\n      this.downloadFile(`${analysis.url.replace(/https?:\\/\\/|www\\.|\\//g, '') || 'venture'}-complete-workflow.md`, content, 'text/markdown');\n    } else {\n      const data = {\n        analysis,\n        stages: stages.map(s => ({\n          stageNumber: s.stageNumber,\n          status: s.status,\n          data: s.data,\n          createdAt: s.createdAt\n        })),\n        exportedAt: new Date().toISOString()\n      };\n      this.downloadFile(`${analysis.url.replace(/https?:\\/\\/|www\\.|\\//g, '') || 'venture'}-complete-workflow.json`, JSON.stringify(data, null, 2), 'application/json');\n    }\n  }\n\n  private static exportMarkdown(stage: WorkflowStage, analysis: BusinessAnalysis, includeMetadata?: boolean): void {\n    const content = this.generateStageMarkdown(stage, analysis, includeMetadata);\n    const filename = `${analysis.url.replace(/https?:\\/\\/|www\\.|\\//g, '') || 'venture'}-stage-${stage.stageNumber}.md`;\n    this.downloadFile(filename, content, 'text/markdown');\n  }\n\n  private static exportJSON(stage: WorkflowStage, analysis: BusinessAnalysis, includeMetadata?: boolean): void {\n    const data: any = {\n      stageNumber: stage.stageNumber,\n      status: stage.status,\n      data: stage.data\n    };\n\n    if (includeMetadata) {\n      data.analysisId = analysis.id;\n      data.businessUrl = analysis.url;\n      data.createdAt = stage.createdAt;\n      data.exportedAt = new Date().toISOString();\n    }\n\n    const filename = `${analysis.url.replace(/https?:\\/\\/|www\\.|\\//g, '') || 'venture'}-stage-${stage.stageNumber}.json`;\n    this.downloadFile(filename, JSON.stringify(data, null, 2), 'application/json');\n  }\n\n  private static generateStageMarkdown(stage: WorkflowStage, analysis: BusinessAnalysis, includeMetadata?: boolean): string {\n    const stageNames = [\n      'Discovery & Selection',\n      'Lazy-Entrepreneur Filter',\n      'MVP Launch Planning',\n      'Demand Testing Strategy',\n      'Scaling & Growth',\n      'AI Automation Mapping'\n    ];\n\n    let markdown = `# ${stageNames[stage.stageNumber - 1]}\\n\\n`;\n    \n    if (includeMetadata) {\n      markdown += `## Metadata\\n`;\n      markdown += `- **URL**: ${analysis.url}\\n`;\n      markdown += `- **Business Model**: ${analysis.businessModel || 'Unknown'}\\n`;\n      markdown += `- **Stage**: ${stage.stageNumber} of 6\\n`;\n      markdown += `- **Created**: ${new Date(stage.createdAt).toLocaleDateString()}\\n`;\n      markdown += `- **Overall Score**: ${analysis.overallScore}/10\\n\\n`;\n    }\n\n    markdown += `## Stage Content\\n\\n`;\n    \n    // Stage-specific content formatting\n    const data = stage.data || {};\n    \n    // Milestones\n    if (data.milestones && Array.isArray(data.milestones)) {\n      markdown += `### Milestones\\n\\n`;\n      data.milestones.forEach((milestone: any) => {\n        const status = milestone.completed ? '✅' : '⏳';\n        markdown += `${status} ${milestone.name || milestone}\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    // Completion Criteria\n    if (data.completionCriteria && Array.isArray(data.completionCriteria)) {\n      markdown += `### Completion Criteria\\n\\n`;\n      data.completionCriteria.forEach((criteria: string) => {\n        markdown += `- ${criteria}\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    // Next Steps\n    if (data.nextStepActions && Array.isArray(data.nextStepActions)) {\n      markdown += `### Next Steps\\n\\n`;\n      data.nextStepActions.forEach((action: string) => {\n        markdown += `1. ${action}\\n`;\n      });\n      markdown += '\\n';\n    }\n\n    // Stage-specific sections\n    switch (stage.stageNumber) {\n      case 1: // Discovery\n        if (analysis.scoreDetails) {\n          markdown += `### Analysis Scores\\n\\n`;\n          markdown += `- **Technical Complexity**: ${analysis.scoreDetails.technicalComplexity}/10\\n`;\n          markdown += `- **Market Opportunity**: ${analysis.scoreDetails.marketOpportunity}/10\\n`;\n          markdown += `- **Competitive Landscape**: ${analysis.scoreDetails.competitiveLandscape}/10\\n`;\n          markdown += `- **Resource Requirements**: ${analysis.scoreDetails.resourceRequirements}/10\\n`;\n          markdown += `- **Time to Market**: ${analysis.scoreDetails.timeToMarket}/10\\n\\n`;\n        }\n        break;\n\n      case 2: // Filter\n        if (data.effortScore !== undefined) {\n          markdown += `### Assessment Results\\n\\n`;\n          markdown += `- **Recommendation**: ${data.recommendation}\\n`;\n          markdown += `- **Effort Score**: ${data.effortScore}/10\\n`;\n          markdown += `- **Reward Score**: ${data.rewardScore}/10\\n`;\n          markdown += `- **Reasoning**: ${data.reasoning}\\n\\n`;\n        }\n        break;\n\n      case 3: // MVP\n        if (data.coreFeatures) {\n          markdown += `### Core Features\\n\\n`;\n          data.coreFeatures.forEach((feature: any) => {\n            const name = typeof feature === 'string' ? feature : feature.name;\n            markdown += `- ${name}\\n`;\n          });\n          markdown += '\\n';\n        }\n        if (data.techStack) {\n          markdown += `### Tech Stack\\n\\n`;\n          Object.entries(data.techStack).forEach(([category, techs]: [string, any]) => {\n            markdown += `**${category}**: ${Array.isArray(techs) ? techs.join(', ') : techs}\\n`;\n          });\n          markdown += '\\n';\n        }\n        break;\n\n      case 4: // Demand Testing\n        if (data.validationMethods) {\n          markdown += `### Validation Methods\\n\\n`;\n          data.validationMethods.forEach((method: any) => {\n            const methodName = typeof method === 'string' ? method : method.method;\n            markdown += `#### ${methodName}\\n`;\n            if (method.timeline) markdown += `- Timeline: ${method.timeline}\\n`;\n            if (method.expectedOutcome) markdown += `- Expected Outcome: ${method.expectedOutcome}\\n`;\n            markdown += '\\n';\n          });\n        }\n        break;\n\n      case 5: // Growth\n        if (data.growthStrategies) {\n          markdown += `### Growth Strategies\\n\\n`;\n          data.growthStrategies.forEach((strategy: any) => {\n            const strategyText = typeof strategy === 'string' ? strategy : strategy.strategy;\n            markdown += `- ${strategyText}\\n`;\n            if (strategy.expectedROI) markdown += `  - Expected ROI: ${strategy.expectedROI}\\n`;\n          });\n          markdown += '\\n';\n        }\n        break;\n\n      case 6: // AI\n        if (data.customerServiceAI) {\n          markdown += `### AI Automation Opportunities\\n\\n`;\n          data.customerServiceAI.forEach((item: any) => {\n            const solution = typeof item === 'string' ? item : item.solution;\n            markdown += `- ${solution}\\n`;\n            if (item.timeToValue) markdown += `  - Time to Value: ${item.timeToValue}\\n`;\n          });\n          markdown += '\\n';\n        }\n        break;\n    }\n\n    return markdown;\n  }\n\n  private static generateFullMarkdown(stages: WorkflowStage[], analysis: BusinessAnalysis): string {\n    let markdown = `# VentureClone AI - Complete Workflow Report\\n\\n`;\n    markdown += `## Business Overview\\n\\n`;\n    markdown += `- **URL**: ${analysis.url}\\n`;\n    markdown += `- **URL**: ${analysis.url}\\n`;\n    markdown += `- **Business Model**: ${analysis.businessModel}\\n`;\n    markdown += `- **Target Market**: ${analysis.targetMarket}\\n`;\n    markdown += `- **Revenue Stream**: ${analysis.revenueStream}\\n`;\n    markdown += `- **Overall Score**: ${analysis.overallScore}/10\\n`;\n    markdown += `- **Generated**: ${new Date(analysis.createdAt).toLocaleDateString()}\\n\\n`;\n\n    markdown += `---\\n\\n`;\n\n    // Add each stage\n    stages\n      .sort((a, b) => a.stageNumber - b.stageNumber)\n      .forEach(stage => {\n        markdown += this.generateStageMarkdown(stage, analysis, false);\n        markdown += `\\n---\\n\\n`;\n      });\n\n    markdown += `## Summary\\n\\n`;\n    markdown += `This report was generated by VentureClone AI on ${new Date().toLocaleDateString()}. `;\n    markdown += `The analysis covers ${stages.length} of 6 workflow stages.\\n`;\n\n    return markdown;\n  }\n\n  private static downloadFile(filename: string, content: string, mimeType: string): void {\n    const blob = new Blob([content], { type: mimeType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  }\n}","size_bytes":9240},"client/src/components/floating-action-button.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { \n  Plus, \n  Search, \n  Bot, \n  Download, \n  BarChart3,\n  Settings,\n  Sparkles,\n  X,\n  Zap,\n  Link,\n  Book\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface QuickAction {\n  id: string;\n  icon: React.ReactNode;\n  label: string;\n  description: string;\n  color: string;\n  action: () => void;\n}\n\nexport function FloatingActionButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const quickActions: QuickAction[] = [\n    {\n      id: 'analyze',\n      icon: <Search className=\"h-5 w-5\" />,\n      label: 'Quick Analyze',\n      description: 'Analyze a URL instantly',\n      color: 'from-blue-500 to-cyan-500',\n      action: () => {\n        const url = window.prompt('Enter URL to analyze:');\n        if (url) {\n          toast({\n            title: \"Analysis Started\",\n            description: `Analyzing ${url}...`,\n          });\n        }\n        setIsOpen(false);\n      }\n    },\n    {\n      id: 'ai-search',\n      icon: <Bot className=\"h-5 w-5\" />,\n      label: 'AI Discovery',\n      description: 'Find business opportunities',\n      color: 'from-purple-500 to-pink-500',\n      action: () => {\n        const element = document.querySelector('[data-testid=\"input-search\"]');\n        if (element) {\n          (element as HTMLInputElement).focus();\n          setIsOpen(false);\n        }\n      }\n    },\n    {\n      id: 'analytics',\n      icon: <BarChart3 className=\"h-5 w-5\" />,\n      label: 'View Analytics',\n      description: 'Check your insights',\n      color: 'from-green-500 to-emerald-500',\n      action: () => {\n        setLocation('/analytics');\n        setIsOpen(false);\n      }\n    },\n    {\n      id: 'docs',\n      icon: <Book className=\"h-5 w-5\" />,\n      label: 'Documentation',\n      description: 'View guides and help',\n      color: 'from-teal-500 to-cyan-500',\n      action: () => {\n        setLocation('/docs');\n        setIsOpen(false);\n      }\n    },\n    {\n      id: 'generate',\n      icon: <Sparkles className=\"h-5 w-5\" />,\n      label: 'Generate Report',\n      description: 'Create analysis report',\n      color: 'from-orange-500 to-yellow-500',\n      action: () => {\n        toast({\n          title: \"Report Generation\",\n          description: \"Generating comprehensive report...\",\n        });\n        setIsOpen(false);\n      }\n    },\n    {\n      id: 'quick-clone',\n      icon: <Zap className=\"h-5 w-5\" />,\n      label: 'Quick Clone',\n      description: 'Start cloning process',\n      color: 'from-red-500 to-rose-500',\n      action: () => {\n        toast({\n          title: \"Quick Clone\",\n          description: \"Starting quick clone wizard...\",\n        });\n        setIsOpen(false);\n      }\n    },\n    {\n      id: 'connect',\n      icon: <Link className=\"h-5 w-5\" />,\n      label: 'Integrations',\n      description: 'Connect services',\n      color: 'from-indigo-500 to-purple-500',\n      action: () => {\n        toast({\n          title: \"Integrations\",\n          description: \"Opening integrations panel...\",\n        });\n        setIsOpen(false);\n      }\n    }\n  ];\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-[100]\">\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/20 backdrop-blur-sm\"\n              onClick={() => setIsOpen(false)}\n            />\n            \n            {/* Quick Actions Grid */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9, y: 20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.9, y: 20 }}\n              transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n              className=\"absolute bottom-20 right-0 w-80 glass-heavy rounded-xl p-4 shadow-2xl\"\n            >\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-vc-text\">Quick Actions</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => setIsOpen(false)}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-3\">\n                {quickActions.map((action, index) => (\n                  <motion.button\n                    key={action.id}\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: index * 0.05 }}\n                    onClick={action.action}\n                    className=\"group relative p-4 glass rounded-lg border border-vc-border/50 hover:border-vc-primary hover-lift transition-all text-left\"\n                  >\n                    <div className={`w-10 h-10 rounded-lg bg-gradient-to-r ${action.color} flex items-center justify-center mb-2 group-hover:scale-110 transition-transform`}>\n                      {action.icon}\n                    </div>\n                    <div className=\"text-sm font-medium text-vc-text\">\n                      {action.label}\n                    </div>\n                    <div className=\"text-xs text-vc-text-muted mt-1\">\n                      {action.description}\n                    </div>\n                  </motion.button>\n                ))}\n              </div>\n              \n              <div className=\"mt-4 p-3 glass-light rounded-lg\">\n                <div className=\"flex items-center space-x-2 text-xs text-vc-text-muted\">\n                  <Settings className=\"h-3 w-3\" />\n                  <span>Press <kbd className=\"px-1 py-0.5 bg-vc-dark rounded text-xs\">Ctrl</kbd> + <kbd className=\"px-1 py-0.5 bg-vc-dark rounded text-xs\">K</kbd> for quick access</span>\n                </div>\n              </div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n      \n      {/* Main FAB Button */}\n      <motion.button\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={() => setIsOpen(!isOpen)}\n        className={`\n          w-14 h-14 rounded-full shadow-2xl\n          flex items-center justify-center\n          transition-all duration-300\n          ${isOpen \n            ? 'bg-vc-dark rotate-45' \n            : 'gradient-animated hover:shadow-neon'\n          }\n        `}\n      >\n        <Plus className={`h-6 w-6 text-white transition-transform duration-300 ${isOpen ? 'rotate-45' : ''}`} />\n      </motion.button>\n      \n      {/* Pulse Animation when closed */}\n      {!isOpen && (\n        <div className=\"absolute inset-0 rounded-full gradient-animated opacity-30 animate-ping pointer-events-none\" />\n      )}\n    </div>\n  );\n}","size_bytes":7067},"client/src/pages/documentation.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { \n  Book, \n  Rocket, \n  Shield, \n  Zap, \n  Target, \n  Brain,\n  Settings,\n  HelpCircle,\n  ChevronRight,\n  Search,\n  Home,\n  ArrowLeft,\n  Sparkles,\n  Globe,\n  BarChart,\n  Workflow,\n  Key,\n  AlertCircle,\n  CheckCircle,\n  Info,\n  Lightbulb,\n  Code,\n  DollarSign,\n  Clock,\n  Users,\n  Layers\n} from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { motion } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface DocSection {\n  id: string;\n  title: string;\n  icon: React.ElementType;\n  content: React.ReactNode;\n}\n\nexport default function Documentation() {\n  const [activeSection, setActiveSection] = useState(\"getting-started\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const sections: DocSection[] = [\n    {\n      id: \"getting-started\",\n      title: \"Getting Started\",\n      icon: Rocket,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Welcome to VentureClone AI</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Your intelligent companion for identifying and analyzing cloneable business opportunities. \n              This guide will help you get up and running in minutes.\n            </p>\n          </div>\n\n          <Card className=\"p-6 glass-card-light\">\n            <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n              <CheckCircle className=\"w-5 h-5 text-green-500\" />\n              Quick Start Checklist\n            </h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start gap-2\">\n                <ChevronRight className=\"w-4 h-4 mt-1 text-primary\" />\n                <div>\n                  <strong>Configure AI Provider:</strong> Set up at least one AI provider (OpenAI, Gemini, or Grok)\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <ChevronRight className=\"w-4 h-4 mt-1 text-primary\" />\n                <div>\n                  <strong>Enter API Keys:</strong> Add your API keys in the AI Provider settings\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <ChevronRight className=\"w-4 h-4 mt-1 text-primary\" />\n                <div>\n                  <strong>First Analysis:</strong> Enter a website URL to analyze your first business\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <ChevronRight className=\"w-4 h-4 mt-1 text-primary\" />\n                <div>\n                  <strong>Review Results:</strong> Explore the comprehensive analysis and scoring\n                </div>\n              </li>\n            </ul>\n          </Card>\n\n          <Card className=\"p-6 glass-card-gradient border-primary/20\">\n            <h3 className=\"text-xl font-semibold mb-3 flex items-center gap-2\">\n              <Lightbulb className=\"w-5 h-5 text-yellow-500\" />\n              First Steps\n            </h3>\n            <ol className=\"space-y-4\">\n              <li>\n                <strong className=\"text-lg\">1. Set Up Your AI Provider</strong>\n                <p className=\"text-muted-foreground mt-1\">\n                  Click the settings icon in the header to configure your preferred AI provider. \n                  We support OpenAI (GPT-4), Google Gemini, and X.AI's Grok.\n                </p>\n              </li>\n              <li>\n                <strong className=\"text-lg\">2. Analyze Your First Business</strong>\n                <p className=\"text-muted-foreground mt-1\">\n                  Enter any website URL in the analysis input field. The AI will crawl the site \n                  and provide a comprehensive clonability analysis.\n                </p>\n              </li>\n              <li>\n                <strong className=\"text-lg\">3. Understand the Scores</strong>\n                <p className=\"text-muted-foreground mt-1\">\n                  Each business is scored across 5 dimensions. Scores above 7.0 indicate \n                  strong cloning potential in that area.\n                </p>\n              </li>\n            </ol>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"core-features\",\n      title: \"Core Features\",\n      icon: Zap,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Core Features</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Discover the powerful features that make VentureClone AI your competitive advantage.\n            </p>\n          </div>\n\n          <div className=\"grid gap-4\">\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Globe className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">URL-Based Analysis</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Simply paste any business website URL and our AI will analyze its entire business model, \n                    technology stack, market positioning, and revenue potential.\n                  </p>\n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"outline\">Auto-crawling</Badge>\n                    <Badge variant=\"outline\">Deep analysis</Badge>\n                    <Badge variant=\"outline\">Real-time</Badge>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Brain className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">AI-Powered Insights</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Leverage multiple AI providers for diverse perspectives. Each provider brings unique \n                    strengths to analyze technical complexity, market opportunities, and competitive landscape.\n                  </p>\n                  <div className=\"flex gap-2\">\n                    <Badge variant=\"outline\">OpenAI GPT-4</Badge>\n                    <Badge variant=\"outline\">Google Gemini</Badge>\n                    <Badge variant=\"outline\">X.AI Grok</Badge>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <BarChart className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">5-Dimensional Scoring</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Every business is evaluated across five critical dimensions, providing you with a \n                    comprehensive understanding of cloning feasibility and potential.\n                  </p>\n                  <div className=\"grid grid-cols-2 gap-2 mt-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <Code className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">Technical Complexity</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <DollarSign className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">Market Opportunity</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Users className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">Competitive Landscape</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Layers className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">Resource Requirements</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                      <span className=\"text-sm\">Time to Market</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 rounded-lg bg-primary/10\">\n                  <Workflow className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">6-Stage Workflow Pipeline</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Follow our proven methodology from discovery to launch. Each stage provides specific \n                    guidance, tasks, and AI-generated content to accelerate your cloning process.\n                  </p>\n                  <div className=\"flex gap-2 flex-wrap\">\n                    <Badge variant=\"secondary\">Discovery</Badge>\n                    <Badge variant=\"secondary\">Research</Badge>\n                    <Badge variant=\"secondary\">Development</Badge>\n                    <Badge variant=\"secondary\">Testing</Badge>\n                    <Badge variant=\"secondary\">Launch</Badge>\n                    <Badge variant=\"secondary\">AI Automation</Badge>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: \"analysis-guide\",\n      title: \"Analysis Guide\",\n      icon: Target,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Business Analysis Guide</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Learn how to interpret analysis results and make data-driven decisions about which businesses to clone.\n            </p>\n          </div>\n\n          <Card className=\"p-6 glass-card-light\">\n            <h3 className=\"text-xl font-semibold mb-4\">Understanding Scores</h3>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start gap-3\">\n                <Badge className=\"bg-green-500/10 text-green-500 border-green-500/20\">9-10</Badge>\n                <div>\n                  <strong>Excellent</strong>\n                  <p className=\"text-muted-foreground text-sm\">Highly favorable for cloning with minimal barriers</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Badge className=\"bg-blue-500/10 text-blue-500 border-blue-500/20\">7-8.9</Badge>\n                <div>\n                  <strong>Good</strong>\n                  <p className=\"text-muted-foreground text-sm\">Strong potential with some manageable challenges</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Badge className=\"bg-yellow-500/10 text-yellow-500 border-yellow-500/20\">5-6.9</Badge>\n                <div>\n                  <strong>Moderate</strong>\n                  <p className=\"text-muted-foreground text-sm\">Feasible but requires careful planning and resources</p>\n                </div>\n              </div>\n              <div className=\"flex items-start gap-3\">\n                <Badge className=\"bg-red-500/10 text-red-500 border-red-500/20\">Below 5</Badge>\n                <div>\n                  <strong>Challenging</strong>\n                  <p className=\"text-muted-foreground text-sm\">Significant barriers that may not be worth overcoming</p>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6 glass-card-gradient\">\n            <h3 className=\"text-xl font-semibold mb-4\">Scoring Dimensions Explained</h3>\n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                  <Code className=\"w-4 h-4\" />\n                  Technical Complexity (Lower is Better)\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  Evaluates the technical difficulty of replicating the business model and technology stack.\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Simple tech stack vs. proprietary technology</li>\n                  <li>• Standard features vs. complex algorithms</li>\n                  <li>• Open-source solutions availability</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                  <DollarSign className=\"w-4 h-4\" />\n                  Market Opportunity (Higher is Better)\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  Assesses the market size, growth potential, and revenue opportunities.\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Total addressable market (TAM)</li>\n                  <li>• Growth rate and trends</li>\n                  <li>• Revenue model viability</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                  <Users className=\"w-4 h-4\" />\n                  Competitive Landscape (Higher is Better)\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  Analyzes market saturation and differentiation opportunities.\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Number of existing competitors</li>\n                  <li>• Market concentration</li>\n                  <li>• Differentiation potential</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                  <Layers className=\"w-4 h-4\" />\n                  Resource Requirements (Lower is Better)\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  Estimates the capital, team, and infrastructure needed.\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Initial capital requirements</li>\n                  <li>• Team size and expertise needed</li>\n                  <li>• Infrastructure and operational costs</li>\n                </ul>\n              </div>\n\n              <div>\n                <h4 className=\"font-semibold flex items-center gap-2 mb-2\">\n                  <Clock className=\"w-4 h-4\" />\n                  Time to Market (Lower is Better)\n                </h4>\n                <p className=\"text-muted-foreground text-sm mb-2\">\n                  Projects the timeline from start to revenue generation.\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Development timeline</li>\n                  <li>• MVP feasibility</li>\n                  <li>• Time to first revenue</li>\n                </ul>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"workflow-stages\",\n      title: \"Workflow Stages\",\n      icon: Workflow,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">6-Stage Workflow Pipeline</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Follow our systematic approach to transform ideas into successful ventures.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-blue-500/10 flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-blue-500\">1</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">Discovery & Ideation</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Identify and validate business opportunities. Use AI to discover hidden gems and evaluate \n                    their cloning potential.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• Market trend analysis</li>\n                      <li>• Competitor identification</li>\n                      <li>• Opportunity validation</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-purple-500/10 flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-purple-500\">2</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">Research & Planning</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Deep dive into the business model, technology requirements, and market dynamics. \n                    Create a comprehensive clone strategy.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• Technical architecture design</li>\n                      <li>• Feature prioritization</li>\n                      <li>• Resource planning</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-green-500/10 flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-green-500\">3</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">Development & Build</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Execute the development plan with AI assistance. Build your MVP efficiently using \n                    proven patterns and best practices.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• MVP development</li>\n                      <li>• Core feature implementation</li>\n                      <li>• Integration setup</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-orange-500/10 flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-orange-500\">4</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">Testing & Validation</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Validate your clone with real users. Gather feedback, iterate quickly, and ensure \n                    product-market fit.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• User testing</li>\n                      <li>• Performance optimization</li>\n                      <li>• Feedback integration</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-pink-500/10 flex items-center justify-center\">\n                  <span className=\"text-lg font-bold text-pink-500\">5</span>\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">Launch & Scale</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Go to market with confidence. Launch your clone, acquire users, and scale operations \n                    based on market response.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• Marketing campaign launch</li>\n                      <li>• User acquisition</li>\n                      <li>• Growth optimization</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n\n            <Card className=\"p-6 glass-card-gradient border-primary/20\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-12 h-12 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center\">\n                  <Sparkles className=\"w-6 h-6 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-xl font-semibold mb-2\">AI Automation & Optimization</h3>\n                  <p className=\"text-muted-foreground mb-3\">\n                    Leverage AI to automate operations, optimize performance, and discover new growth \n                    opportunities continuously.\n                  </p>\n                  <div className=\"bg-muted/30 rounded-lg p-3\">\n                    <strong className=\"text-sm\">Key Activities:</strong>\n                    <ul className=\"text-sm text-muted-foreground mt-1 space-y-1\">\n                      <li>• Process automation</li>\n                      <li>• AI-driven optimization</li>\n                      <li>• Continuous improvement</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          </div>\n        </div>\n      )\n    },\n    {\n      id: \"ai-configuration\",\n      title: \"AI Configuration\",\n      icon: Settings,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">AI Provider Configuration</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Set up and manage your AI providers for optimal analysis performance.\n            </p>\n          </div>\n\n          <Card className=\"p-6 glass-card-light\">\n            <h3 className=\"text-xl font-semibold mb-4\">Supported AI Providers</h3>\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <h4 className=\"font-semibold\">OpenAI (GPT-4)</h4>\n                  <Badge variant=\"outline\">Recommended</Badge>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Industry-leading language model with excellent business analysis capabilities.\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm\">\n                    <strong>Best for:</strong> Comprehensive analysis, technical insights\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>API Key:</strong> Get from <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noopener\" className=\"text-primary hover:underline\">platform.openai.com</a>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg p-4\">\n                <h4 className=\"font-semibold mb-2\">Google Gemini</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Google's advanced AI with strong reasoning and multimodal capabilities.\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm\">\n                    <strong>Best for:</strong> Market analysis, competitive insights\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>API Key:</strong> Get from <a href=\"https://makersuite.google.com/app/apikey\" target=\"_blank\" rel=\"noopener\" className=\"text-primary hover:underline\">Google AI Studio</a>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"border rounded-lg p-4\">\n                <h4 className=\"font-semibold mb-2\">X.AI Grok</h4>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  X's AI model with real-time information access and unique perspectives.\n                </p>\n                <div className=\"space-y-2\">\n                  <div className=\"text-sm\">\n                    <strong>Best for:</strong> Trend analysis, social insights\n                  </div>\n                  <div className=\"text-sm\">\n                    <strong>API Key:</strong> Get from <a href=\"https://x.ai\" target=\"_blank\" rel=\"noopener\" className=\"text-primary hover:underline\">x.ai</a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6 glass-card-gradient\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <Key className=\"w-5 h-5\" />\n              API Key Setup Guide\n            </h3>\n            <ol className=\"space-y-3\">\n              <li className=\"flex items-start gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-sm\">1</span>\n                <div>\n                  <strong>Click the Settings icon</strong> in the header navigation\n                </div>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-sm\">2</span>\n                <div>\n                  <strong>Select your AI provider</strong> from the dropdown menu\n                </div>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-sm\">3</span>\n                <div>\n                  <strong>Enter your API key</strong> in the secure input field\n                </div>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-sm\">4</span>\n                <div>\n                  <strong>Set as active provider</strong> using the toggle switch\n                </div>\n              </li>\n              <li className=\"flex items-start gap-3\">\n                <span className=\"flex-shrink-0 w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center text-sm\">5</span>\n                <div>\n                  <strong>Save configuration</strong> to start using the AI provider\n                </div>\n              </li>\n            </ol>\n          </Card>\n\n          <Card className=\"p-6 border-yellow-500/20 bg-yellow-500/5\">\n            <div className=\"flex items-start gap-3\">\n              <AlertCircle className=\"w-5 h-5 text-yellow-500 mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold mb-1\">Security Note</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  API keys are encrypted and stored securely. Never share your API keys publicly. \n                  Each provider has different rate limits and pricing - check their documentation.\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"keyboard-shortcuts\",\n      title: \"Keyboard Shortcuts\",\n      icon: Zap,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Keyboard Shortcuts</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Master these shortcuts to navigate VentureClone AI like a pro.\n            </p>\n          </div>\n\n          <Card className=\"p-6 glass-card-light\">\n            <h3 className=\"text-xl font-semibold mb-4\">Global Shortcuts</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Open Quick Actions</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">Ctrl + K</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Focus Search</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">Ctrl + /</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Go to Analytics</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">Ctrl + Shift + A</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">New Analysis</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">Ctrl + N</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Settings</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">Ctrl + ,</kbd>\n              </div>\n            </div>\n          </Card>\n\n          <Card className=\"p-6 glass-card-gradient\">\n            <h3 className=\"text-xl font-semibold mb-4\">Navigation Shortcuts</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Dashboard</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">G then D</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Analytics</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">G then A</kbd>\n              </div>\n              <div className=\"flex items-center justify-between py-2 px-3 rounded-lg bg-muted/30\">\n                <span className=\"text-sm\">Documentation</span>\n                <kbd className=\"px-2 py-1 bg-background rounded text-xs font-mono\">G then H</kbd>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"tips-tricks\",\n      title: \"Tips & Best Practices\",\n      icon: Lightbulb,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Tips & Best Practices</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Expert advice to maximize your success with VentureClone AI.\n            </p>\n          </div>\n\n          <Card className=\"p-6 glass-card-light\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <Target className=\"w-5 h-5 text-primary\" />\n              Choosing Businesses to Clone\n            </h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle className=\"w-4 h-4 mt-1 text-green-500\" />\n                <div>\n                  <strong>Look for Simple Business Models:</strong> Start with businesses that have \n                  straightforward revenue models and clear value propositions.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle className=\"w-4 h-4 mt-1 text-green-500\" />\n                <div>\n                  <strong>Target Growing Markets:</strong> Focus on industries with rising demand \n                  and emerging trends.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle className=\"w-4 h-4 mt-1 text-green-500\" />\n                <div>\n                  <strong>Identify Differentiation Opportunities:</strong> Look for businesses where \n                  you can add unique value or serve an underserved segment.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <CheckCircle className=\"w-4 h-4 mt-1 text-green-500\" />\n                <div>\n                  <strong>Consider Local Market Gaps:</strong> Global successes often have local \n                  market opportunities.\n                </div>\n              </li>\n            </ul>\n          </Card>\n\n          <Card className=\"p-6 glass-card-gradient\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <Brain className=\"w-5 h-5 text-primary\" />\n              Maximizing AI Analysis\n            </h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start gap-2\">\n                <Info className=\"w-4 h-4 mt-1 text-blue-500\" />\n                <div>\n                  <strong>Use Multiple Providers:</strong> Different AI providers excel at different \n                  aspects - use multiple for comprehensive insights.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <Info className=\"w-4 h-4 mt-1 text-blue-500\" />\n                <div>\n                  <strong>Analyze Competitors:</strong> Run analyses on multiple competitors to \n                  understand the full landscape.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <Info className=\"w-4 h-4 mt-1 text-blue-500\" />\n                <div>\n                  <strong>Regular Re-analysis:</strong> Markets change - re-analyze businesses \n                  periodically for updated insights.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <Info className=\"w-4 h-4 mt-1 text-blue-500\" />\n                <div>\n                  <strong>Deep Dive on High Scores:</strong> When you find high-scoring opportunities, \n                  use the workflow stages for detailed planning.\n                </div>\n              </li>\n            </ul>\n          </Card>\n\n          <Card className=\"p-6 border-red-500/20 bg-red-500/5\">\n            <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5 text-red-500\" />\n              Common Pitfalls to Avoid\n            </h3>\n            <ul className=\"space-y-3\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-red-500\">✕</span>\n                <div>\n                  <strong>Ignoring Legal Considerations:</strong> Always research intellectual \n                  property, patents, and regulatory requirements.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-red-500\">✕</span>\n                <div>\n                  <strong>Underestimating Resources:</strong> Be realistic about time, money, \n                  and team requirements.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-red-500\">✕</span>\n                <div>\n                  <strong>Copying Without Innovation:</strong> Direct clones rarely succeed - \n                  always add your unique value.\n                </div>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-red-500\">✕</span>\n                <div>\n                  <strong>Rushing to Launch:</strong> Follow the workflow stages systematically \n                  for best results.\n                </div>\n              </li>\n            </ul>\n          </Card>\n        </div>\n      )\n    },\n    {\n      id: \"faq\",\n      title: \"FAQ\",\n      icon: HelpCircle,\n      content: (\n        <div className=\"space-y-6\">\n          <div>\n            <h2 className=\"text-3xl font-bold mb-4 gradient-text-animated\">Frequently Asked Questions</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              Quick answers to common questions about VentureClone AI.\n            </p>\n          </div>\n\n          <div className=\"space-y-4\">\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">How accurate are the AI analyses?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Our AI analyses are highly accurate for general business assessment, typically achieving \n                85-90% accuracy when compared to manual expert analysis. However, they should be used as \n                a starting point and supplemented with your own research and domain expertise.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">Can I analyze any website?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Yes, you can analyze any publicly accessible website. The AI will crawl and analyze the \n                visible content, structure, and business model. Note that some sites with heavy JavaScript \n                or authentication requirements may have limited analysis depth.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">How many analyses can I run?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                The number of analyses depends on your API key limits with your chosen AI provider. \n                Each analysis typically uses 1-2 API calls. Check your provider's pricing and rate \n                limits for specific details.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">Which AI provider should I use?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                We recommend starting with OpenAI GPT-4 for the most comprehensive analysis. You can \n                add multiple providers to get different perspectives. Each provider has unique strengths: \n                OpenAI for depth, Gemini for market insights, and Grok for real-time trends.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">How long does an analysis take?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Most analyses complete within 30-60 seconds. Complex websites or detailed workflow \n                content generation may take up to 2-3 minutes. The speed also depends on your AI \n                provider's response time.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">Can I export my analysis results?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Currently, all analyses are saved in your dashboard for future reference. You can \n                copy individual sections or take screenshots. Export functionality is planned for \n                a future update.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">Is my data secure?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Yes, all data is encrypted in transit and at rest. API keys are securely stored and \n                never exposed. Analysis data is private to your account and not shared with third \n                parties beyond the AI provider calls.\n              </p>\n            </Card>\n\n            <Card className=\"p-6 glass-card-light\">\n              <h4 className=\"font-semibold mb-2\">What makes a good clone candidate?</h4>\n              <p className=\"text-muted-foreground text-sm\">\n                Good candidates typically score 7+ on market opportunity, have technical complexity \n                below 6, reasonable resource requirements, and clear differentiation opportunities. \n                Look for businesses with proven demand but room for improvement or localization.\n              </p>\n            </Card>\n          </div>\n\n          <Card className=\"p-6 glass-card-gradient border-primary/20 mt-6\">\n            <div className=\"flex items-start gap-3\">\n              <Info className=\"w-5 h-5 text-primary mt-0.5\" />\n              <div>\n                <h4 className=\"font-semibold mb-1\">Still have questions?</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Check our documentation regularly for updates, or use the quick actions menu (Ctrl+K) \n                  to explore features hands-on. Remember, the best way to learn is by analyzing your \n                  first business!\n                </p>\n              </div>\n            </div>\n          </Card>\n        </div>\n      )\n    }\n  ];\n\n  const filteredSections = sections.filter(section =>\n    section.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (typeof section.content === 'string' && section.content.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const currentSection = sections.find(s => s.id === activeSection) || sections[0];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 w-full glass-morphism border-b\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"gap-2\">\n                  <ArrowLeft className=\"w-4 h-4\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              <div className=\"flex items-center gap-2\">\n                <Book className=\"w-5 h-5 text-primary\" />\n                <h1 className=\"text-lg font-semibold\">Documentation</h1>\n              </div>\n            </div>\n            <Badge variant=\"outline\" className=\"gap-1\">\n              <Sparkles className=\"w-3 h-3\" />\n              v1.0.0\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex gap-8\">\n          {/* Sidebar */}\n          <aside className=\"w-64 flex-shrink-0\">\n            <Card className=\"glass-card-light sticky top-24\">\n              <div className=\"p-4\">\n                <div className=\"relative mb-4\">\n                  <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search docs...\"\n                    className=\"pl-9 glass-input\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    data-testid=\"input-docs-search\"\n                  />\n                </div>\n                <ScrollArea className=\"h-[calc(100vh-16rem)]\">\n                  <nav className=\"space-y-1\">\n                    {filteredSections.map((section) => {\n                      const Icon = section.icon;\n                      return (\n                        <button\n                          key={section.id}\n                          onClick={() => setActiveSection(section.id)}\n                          className={`w-full flex items-center gap-3 px-3 py-2 rounded-lg transition-all ${\n                            activeSection === section.id\n                              ? 'bg-primary/10 text-primary'\n                              : 'hover:bg-muted/50 text-muted-foreground hover:text-foreground'\n                          }`}\n                          data-testid={`nav-${section.id}`}\n                        >\n                          <Icon className=\"w-4 h-4\" />\n                          <span className=\"text-sm font-medium\">{section.title}</span>\n                        </button>\n                      );\n                    })}\n                  </nav>\n                </ScrollArea>\n              </div>\n            </Card>\n          </aside>\n\n          {/* Content */}\n          <main className=\"flex-1 max-w-4xl\">\n            <motion.div\n              key={activeSection}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3 }}\n            >\n              {currentSection.content}\n            </motion.div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":47339},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/landing.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Flame, TrendingUp, Zap, Shield, ArrowRight, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: TrendingUp,\n      title: \"AI-Powered Analysis\",\n      description: \"Analyze any website to assess clonability potential with advanced AI\",\n    },\n    {\n      icon: Zap,\n      title: \"6-Stage Workflow\",\n      description: \"Systematic process from discovery to AI automation\",\n    },\n    {\n      icon: Shield,\n      title: \"Multi-Provider Support\",\n      description: \"Connect OpenAI, Gemini, or Grok with your own API keys\",\n    },\n    {\n      icon: Sparkles,\n      title: \"Comprehensive Scoring\",\n      description: \"5-dimensional scoring across technical, market, and resource factors\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-vc-dark text-vc-text\">\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-vc-primary/10 via-transparent to-vc-secondary/10\" />\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n          <motion.div \n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"w-20 h-20 gradient-animated rounded-2xl flex items-center justify-center shadow-2xl hover-scale\">\n                <Flame className=\"text-vc-text text-4xl\" />\n              </div>\n            </div>\n            \n            <h1 className=\"text-5xl md:text-6xl font-bold mb-6 bg-clip-text text-transparent bg-gradient-to-r from-vc-primary to-vc-secondary\">\n              VentureClone AI\n            </h1>\n            \n            <p className=\"text-xl text-vc-text-muted mb-8 max-w-3xl mx-auto\">\n              The systematic business cloning platform that analyzes existing online businesses \n              for clonability potential using AI-powered insights\n            </p>\n            \n            <div className=\"flex justify-center space-x-4\">\n              <Button\n                onClick={() => window.location.href = \"/api/login\"}\n                size=\"lg\"\n                className=\"gradient-animated text-vc-dark font-semibold px-8 py-6 text-lg hover-scale\"\n                data-testid=\"button-login\"\n              >\n                Get Started\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </div>\n          </motion.div>\n          \n          <motion.div \n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5, delay: 0.2 }}\n          >\n            {features.map((feature, index) => (\n              <Card \n                key={index} \n                className=\"glass border-vc-border/50 hover:border-vc-primary/50 transition-all hover-glow\"\n              >\n                <CardContent className=\"p-6\">\n                  <feature.icon className=\"h-10 w-10 text-vc-primary mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                  <p className=\"text-sm text-vc-text-muted\">{feature.description}</p>\n                </CardContent>\n              </Card>\n            ))}\n          </motion.div>\n          \n          <motion.div \n            className=\"mt-16 text-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5, delay: 0.4 }}\n          >\n            <p className=\"text-vc-text-muted\">\n              Transform your business ideas into reality with AI-driven insights and systematic execution\n            </p>\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4029}},"version":1}